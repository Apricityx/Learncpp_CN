{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"%E7%BF%BB%E8%AF%91%E7%BA%A6%E5%AE%9A/","text":"\u82f1\u6587\u539f\u6587\u4f7f\u7528 variable \u6307\u4ee3\u4e86\u53d8\u91cf\u3001\u51fd\u6570\u3001\u5bf9\u8c61\u7b49\u591a\u79cd\u7c7b\u578b\uff0c\u5e76\u4e0d\u4ec5\u9650\u4e8e\u201d\u53d8\u91cf\u201c\uff0c\u5728\u7ffb\u8bd1\u4e2d\u6211\u4eec\u9075\u5faa\u539f\u6587\u8fd9\u4e00\u7ea6\u5b9a {} \u7ffb\u8bd1\u4e3a\u82b1\u62ec\u53f7 \u6bcf\u8282\u8bfe\u540e\u7684\u5c0f\u6d4b\u8bd5\u6682\u65f6\u4e0d\u7ffb\u8bd1\uff0c\u5168\u90e8\u5b8c\u7ed3\u540e\u7edf\u4e00\u7ffb\u8bd1\u5e76\u89e3\u6790","title":"\u7ffb\u8bd1\u7ea6\u5b9a"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.01%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.1 \u2014 Statements and the structure of a program - \u4f5c\u8005\uff1a ALEX - 2022-1-10 Chapter introduction Welcome to the first primary chapter of these C++ tutorials! In this chapter, we\u2019ll take a first look at a number of topics that are essential to every C++ program. Because there are quite a few topics to cover, we\u2019ll cover most at a fairly shallow level (just enough to get by). The goal of this chapter is to help you understand how basic C++ programs are constructed. By the end of the chapter, you will be able to write your own simple programs. In future chapters, we\u2019ll revisit the majority of these topics and explore them in more detail. We\u2019ll also introduce new concepts that build on top of these. In order to keep the lesson lengths manageable, topics may be split over several subsequent lessons. If you feel like some important concept isn\u2019t covered in a lesson, it\u2019s possible that it\u2019s covered in the next lesson. Statements A computer program is a sequence of instructions that tell the computer what to do. A statement is a type of instruction that causes the program to perform some action . Statements are by far the most common type of instruction in a C++ program. This is because they are the smallest independent unit of computation in the C++ language. In that regard, they act much like sentences do in natural language. When we want to convey an idea to another person, we typically write or speak in sentences (not in random words or syllables). In C++, when we want to have our program do something, we typically write statements. Most (but not all) statements in C++ end in a semicolon. If you see a line that ends in a semicolon, it\u2019s probably a statement. In a high-level language such as C++, a single statement may compile into many machine language instructions. For advanced readers There are many different kinds of statements in C++: Declaration statements Jump statements Expression statements Compound statements Selection statements (conditionals) Iteration statements (loops) Try blocks By the time you\u2019re through with this tutorial series, you\u2019ll understand what all of these are! Functions and the main function In C++, statements are typically grouped into units called functions. A function is a collection of statements that executes sequentially (in order, from top to bottom). As you learn to write your own programs, you\u2019ll be able to create your own functions and mix and match statements in any way you please (we\u2019ll show how in a future lesson). Rule Every C++ program must have a special function named main (all lower case letters). When the program is run, the statements inside of main are executed in sequential order. Programs typically terminate (finish running) when the last statement inside function main has executed (though programs may abort early in some circumstances, or do some cleanup afterwards). Functions are typically written to do a specific job. For example, a function named \u201cmax\u201d might contain statements that figures out which of two numbers is larger. A function named \u201ccalculateGrade\u201d might calculate a student\u2019s grade from a set of test scores. We will talk a lot more about functions soon, as they are the most commonly used organizing tool in a program. [!NOTE] \u4f5c\u8005\u6ce8 When discussing functions, it\u2019s fairly common shorthand to append a pair of parenthesis to the end of the function\u2019s name. For example, if you see the term main() or doSomething() , this is shorthand for functions named main or doSomething respectively. This helps differentiate functions from other things with names (such as variables) without having to write the word \u201cfunction\u201d each time. Dissecting Hello world! Now that you have a brief understanding of what statements and functions are, let\u2019s return to our \u201cHello world\u201d program and take a high-level look at what each line does in more detail. 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello world!\" ; return 0 ; } COPY Line 1 is a special type of line called a preprocessor directive. This preprocessor directive indicates that we would like to use the contents of the iostream library, which is the part of the C++ standard library that allows us to read and write text from/to the console. We need this line in order to use std::cout on line 5. Excluding this line would result in a compile error on line 5, as the compiler wouldn\u2019t otherwise know what std::cout is. Line 2 is blank, and is ignored by the compiler. This line exists only to help make the program more readable to humans (by separating the #include preprocessor directive and the subsequent parts of the program). Line 3 tells the compiler that we\u2019re going to write (define) a function called main . As you learned above, every C++ program must have a _main_function or it will fail to link. Lines 4 and 7 tell the compiler which lines are part of the main function. Everything between the opening curly brace on line 4 and the closing curly brace on line 7 is considered part of the main function. This is called the function body. Line 5 is the first statement within function main , and is the first statement that will execute when we run our program. std::cout (which stands for \u201ccharacter output\u201d) and the << operator allow us to send letters or numbers to the console to be output. In this case, we\u2019re sending it the text \u201cHello world!\u201d, which will be output to the console. This statement creates the visible output of the program. Line 6 is a return statement. When an executable program finishes running, the program sends a value back to the operating system in order to indicate whether it ran successfully or not. This particular return statement returns the value of 0 to the operating system, which means \u201ceverything went okay!\u201d. This is the last statement in the program that executes. All of the programs we write will follow this general template, or a variation on it. Author\u2019s note If parts (or all) of the above explanation are confusing, that\u2019s to be expected at this point. This was just to provide a quick overview. Subsequent lessons will dig into all of the above topics, with plenty of additional explanation and examples. You can compile and run this program yourself, and you will see that it outputs the following to the console: 1 Hello world! If you run into issues compiling or executing this program, check out lesson 0.8 -- A few common C++ problems . Syntax and syntax errors In English, sentences are constructed according to specific grammatical rules that you probably learned in English class in school. For example, normal sentences end in a period. The rules that govern how sentences are constructed in a language is called syntax. If you forget the period and run two sentences together, this is a violation of the English language syntax. C++ has a syntax too: rules about how your programs must be constructed in order to be considered valid. When you compile your program, the compiler is responsible for making sure your program follows the basic syntax of the C++ language. If you violate a rule, the compiler will complain when you try to compile your program, and issue you a syntax error. Let\u2019s see what happens if we omit the semicolon on line 5 of the \u201cHello world\u201d program, like this: 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello world!\" return 0 ; } COPY Feel free to compile this ill-formed program yourself. Visual Studio produces the following error (your compiler may generate an error message with different wording): 1 c:\\vcprojects\\test1.cpp(6): error C2143: syntax error : missing ';' before 'return' This is telling you that you have a syntax error on line 6: the compiler was expecting a semicolon before the return statement, but it didn\u2019t find one. Although the compiler will tell you which line of code it was compiling when it encountered the syntax error, the omission may actually be on a previous line. In this case, the error is actually at the end of line 5 (the compiler didn\u2019t discover the issue until line 6). Syntax errors are common when writing a program. Fortunately, they\u2019re typically straightforward to find and fix, as the compiler will generally point you right at them. Compilation of a program will only complete once all syntax errors are resolved. You can try deleting characters or even whole lines from the \u201cHello world\u201d program to see different kinds of errors that get generated. Try restoring the missing semicolon at the end of line 5, and then deleting lines 1, 3, or 4 and see what happens.","title":"1.01 \u7a0b\u5e8f\u7ed3\u6784\u548c\u8bed\u53e5"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.01%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5/#chapter-introduction","text":"Welcome to the first primary chapter of these C++ tutorials! In this chapter, we\u2019ll take a first look at a number of topics that are essential to every C++ program. Because there are quite a few topics to cover, we\u2019ll cover most at a fairly shallow level (just enough to get by). The goal of this chapter is to help you understand how basic C++ programs are constructed. By the end of the chapter, you will be able to write your own simple programs. In future chapters, we\u2019ll revisit the majority of these topics and explore them in more detail. We\u2019ll also introduce new concepts that build on top of these. In order to keep the lesson lengths manageable, topics may be split over several subsequent lessons. If you feel like some important concept isn\u2019t covered in a lesson, it\u2019s possible that it\u2019s covered in the next lesson.","title":"Chapter introduction"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.01%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5/#statements","text":"A computer program is a sequence of instructions that tell the computer what to do. A statement is a type of instruction that causes the program to perform some action . Statements are by far the most common type of instruction in a C++ program. This is because they are the smallest independent unit of computation in the C++ language. In that regard, they act much like sentences do in natural language. When we want to convey an idea to another person, we typically write or speak in sentences (not in random words or syllables). In C++, when we want to have our program do something, we typically write statements. Most (but not all) statements in C++ end in a semicolon. If you see a line that ends in a semicolon, it\u2019s probably a statement. In a high-level language such as C++, a single statement may compile into many machine language instructions. For advanced readers There are many different kinds of statements in C++: Declaration statements Jump statements Expression statements Compound statements Selection statements (conditionals) Iteration statements (loops) Try blocks By the time you\u2019re through with this tutorial series, you\u2019ll understand what all of these are! Functions and the main function In C++, statements are typically grouped into units called functions. A function is a collection of statements that executes sequentially (in order, from top to bottom). As you learn to write your own programs, you\u2019ll be able to create your own functions and mix and match statements in any way you please (we\u2019ll show how in a future lesson). Rule Every C++ program must have a special function named main (all lower case letters). When the program is run, the statements inside of main are executed in sequential order. Programs typically terminate (finish running) when the last statement inside function main has executed (though programs may abort early in some circumstances, or do some cleanup afterwards). Functions are typically written to do a specific job. For example, a function named \u201cmax\u201d might contain statements that figures out which of two numbers is larger. A function named \u201ccalculateGrade\u201d might calculate a student\u2019s grade from a set of test scores. We will talk a lot more about functions soon, as they are the most commonly used organizing tool in a program. [!NOTE] \u4f5c\u8005\u6ce8 When discussing functions, it\u2019s fairly common shorthand to append a pair of parenthesis to the end of the function\u2019s name. For example, if you see the term main() or doSomething() , this is shorthand for functions named main or doSomething respectively. This helps differentiate functions from other things with names (such as variables) without having to write the word \u201cfunction\u201d each time.","title":"Statements"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.01%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E8%AF%AD%E5%8F%A5/#dissecting-hello-world","text":"Now that you have a brief understanding of what statements and functions are, let\u2019s return to our \u201cHello world\u201d program and take a high-level look at what each line does in more detail. 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello world!\" ; return 0 ; } COPY Line 1 is a special type of line called a preprocessor directive. This preprocessor directive indicates that we would like to use the contents of the iostream library, which is the part of the C++ standard library that allows us to read and write text from/to the console. We need this line in order to use std::cout on line 5. Excluding this line would result in a compile error on line 5, as the compiler wouldn\u2019t otherwise know what std::cout is. Line 2 is blank, and is ignored by the compiler. This line exists only to help make the program more readable to humans (by separating the #include preprocessor directive and the subsequent parts of the program). Line 3 tells the compiler that we\u2019re going to write (define) a function called main . As you learned above, every C++ program must have a _main_function or it will fail to link. Lines 4 and 7 tell the compiler which lines are part of the main function. Everything between the opening curly brace on line 4 and the closing curly brace on line 7 is considered part of the main function. This is called the function body. Line 5 is the first statement within function main , and is the first statement that will execute when we run our program. std::cout (which stands for \u201ccharacter output\u201d) and the << operator allow us to send letters or numbers to the console to be output. In this case, we\u2019re sending it the text \u201cHello world!\u201d, which will be output to the console. This statement creates the visible output of the program. Line 6 is a return statement. When an executable program finishes running, the program sends a value back to the operating system in order to indicate whether it ran successfully or not. This particular return statement returns the value of 0 to the operating system, which means \u201ceverything went okay!\u201d. This is the last statement in the program that executes. All of the programs we write will follow this general template, or a variation on it. Author\u2019s note If parts (or all) of the above explanation are confusing, that\u2019s to be expected at this point. This was just to provide a quick overview. Subsequent lessons will dig into all of the above topics, with plenty of additional explanation and examples. You can compile and run this program yourself, and you will see that it outputs the following to the console: 1 Hello world! If you run into issues compiling or executing this program, check out lesson 0.8 -- A few common C++ problems . Syntax and syntax errors In English, sentences are constructed according to specific grammatical rules that you probably learned in English class in school. For example, normal sentences end in a period. The rules that govern how sentences are constructed in a language is called syntax. If you forget the period and run two sentences together, this is a violation of the English language syntax. C++ has a syntax too: rules about how your programs must be constructed in order to be considered valid. When you compile your program, the compiler is responsible for making sure your program follows the basic syntax of the C++ language. If you violate a rule, the compiler will complain when you try to compile your program, and issue you a syntax error. Let\u2019s see what happens if we omit the semicolon on line 5 of the \u201cHello world\u201d program, like this: 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello world!\" return 0 ; } COPY Feel free to compile this ill-formed program yourself. Visual Studio produces the following error (your compiler may generate an error message with different wording): 1 c:\\vcprojects\\test1.cpp(6): error C2143: syntax error : missing ';' before 'return' This is telling you that you have a syntax error on line 6: the compiler was expecting a semicolon before the return statement, but it didn\u2019t find one. Although the compiler will tell you which line of code it was compiling when it encountered the syntax error, the omission may actually be on a previous line. In this case, the error is actually at the end of line 5 (the compiler didn\u2019t discover the issue until line 6). Syntax errors are common when writing a program. Fortunately, they\u2019re typically straightforward to find and fix, as the compiler will generally point you right at them. Compilation of a program will only complete once all syntax errors are resolved. You can try deleting characters or even whole lines from the \u201cHello world\u201d program to see different kinds of errors that get generated. Try restoring the missing semicolon at the end of line 5, and then deleting lines 1, 3, or 4 and see what happens.","title":"Dissecting Hello world!"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.02%20%E6%B3%A8%E9%87%8A/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.2 \u2014 Comments - \u4f5c\u8005\uff1a ALEX - 2020-5-1 A comment is a programmer-readable note that is inserted directly into the source code of the program. Comments are ignored by the compiler and are for the programmer\u2019s use only. In C++ there are two different styles of comments, both of which serve the same purpose: to help programmers document the code in some way. Single-line comments The // symbol begins a C++ single-line comment, which tells the compiler to ignore everything from the // symbol to the end of the line. For example: 1 std :: cout << \"Hello world!\" ; // Everything from here to the end of the line is ignored Typically, the single-line comment is used to make a quick comment about a single line of code. 1 2 3 std :: cout << \"Hello world! \\n \" ; // std::cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments make the code hard to read std :: cout << \"Yeah! \\n \" ; // especially when lines are different lengths Having comments to the right of a line can make both the code and the comment hard to read, particularly if the line is long. If the lines are fairly short, the comments can simply be aligned (usually to a tab stop), like so: 1 2 3 std :: cout << \"Hello world! \\n \" ; // std::cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // this is much easier to read std :: cout << \"Yeah! \\n \" ; // don't you think so? However, if the lines are long, placing comments to the right can make your lines really long. In that case, single-line comments are often placed above the line it is commenting: 1 2 3 4 5 6 7 8 // std::cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // this is much easier to read std :: cout << \"It is very nice to meet you! \\n \" ; // don't you think so? std :: cout << \"Yeah! \\n \" ; COPY Author\u2019s note The statements above represent one of our first encounters with snippets of code. Because snippets aren\u2019t full programs, they aren\u2019t able to be compiled by themselves. Rather, they exist to demonstrate specific concepts in a concise manner. If you would like to compile a snippet, you\u2019ll need to turn it into a full program in order for it to compile. Typically, that program will look something like this: 1 2 3 4 5 6 7 8 #include <iostream> int main () { // Replace this line with the snippet of code you'd like to compile return 0 ; } COPY Multi-line comments The /* and */ pair of symbols denotes a C-style multi-line comment. Everything in between the symbols is ignored. 1 2 3 /* This is a multi-line comment. This line will be ignored. So will this one. */ COPY Since everything between the symbols is ignored, you will sometimes see programmers \u201cbeautify\u201d their multi-line comments: 1 2 3 4 /* This is a multi-line comment. * the matching asterisks to the left * can make this easier to read */ COPY Multi-line style comments can not be nested. Consequently, the following will have unexpected results: 1 2 /* This is a multi-line /* comment */ this is not inside the comment */ // The above comment ends at the first */, not the second */ COPY When the compiler tries to compile this, it will ignore everything from the first / _ to the first /. Since \u201c_this is not inside the comment */ \u201d is not considered part of the comment, the compiler will try to compile it. That will inevitably result in a compile error. This is one place where using a syntax highlighter can be really useful, as the different coloring for comment should make clear what\u2019s considered part of the comment vs not. Warning Don\u2019t use multi-line comments inside other multi-line comments. Wrapping single-line comments inside a multi-line comment is okay. Proper use of comments Typically, comments should be used for three things. First, for a given library, program, or function, comments are best used to describe what the library, program, or function, does. These are typically placed at the top of the file or library, or immediately preceding the function. For example: 1 // This program calculates the student's final grade based on his test and homework scores. COPY 1 // This function uses Newton's method to approximate the root of a given equation. COPY 1 // The following lines generate a random item based on rarity, level, and a weight factor. COPY All of these comments give the reader a good idea of what the library, program, or function is trying to accomplish without having to look at the actual code. The user (possibly someone else, or you if you\u2019re trying to reuse code you\u2019ve previously written) can tell at a glance whether the code is relevant to what he or she is trying to accomplish. This is particularly important when working as part of a team, where not everybody will be familiar with all of the code. Second, within a library, program, or function described above, comments can be used to describe how the code is going to accomplish its goal. 1 2 3 /* To calculate the final grade, we sum all the weighted midterm and homework scores and then divide by the number of scores to assign a percentage, which is used to calculate a letter grade. */ COPY 1 2 3 4 5 6 // To generate a random item, we're going to do the following: // 1) Put all of the items of the desired rarity on a list // 2) Calculate a probability for each item based on level and weight factor // 3) Choose a random number // 4) Figure out which item that random number corresponds to // 5) Return the appropriate item COPY These comments give the user an idea of how the code is going to accomplish its goal without having to understand what each individual line of code does. Third, at the statement level, comments should be used to describe why the code is doing something. A bad statement comment explains what the code is doing. If you ever write code that is so complex that needs a comment to explain what a statement is doing, you probably need to rewrite your statement, not comment it. Here are some examples of bad line comments and good statement comments. Bad comment: 1 2 // Set sight range to 0 sight = 0 ; COPY Reason: We already can see that sight is being set to 0 by looking at the statement Good comment: 1 2 // The player just drank a potion of blindness and can not see anything sight = 0 ; COPY Reason: Now we know why the player\u2019s sight is being set to 0 Bad comment: 1 2 // Calculate the cost of the items cost = quantity * 2 * storePrice ; COPY Reason: We can see that this is a cost calculation, but why is quantity multiplied by 2? Good comment: 1 2 // We need to multiply quantity by 2 here because they are bought in pairs cost = quantity * 2 * storePrice ; COPY Reason: Now we know why this formula makes sense. Programmers often have to make a tough decision between solving a problem one way, or solving it another way. Comments are a great way to remind yourself (or tell somebody else) the reason you made one decision instead of another. Good comments: 1 2 // We decided to use a linked list instead of an array because // arrays do insertion too slowly. COPY 1 2 // We're going to use Newton's method to find the root of a number because // there is no deterministic way to solve these equations. COPY Finally, comments should be written in a way that makes sense to someone who has no idea what the code does. It is often the case that a programmer will say \u201cIt\u2019s obvious what this does! There\u2019s no way I\u2019ll forget about this\u201d. Guess what? It\u2019s not obvious, and you will be amazed how quickly you forget. :) You (or someone else) will thank you later for writing down the what, how, and why of your code in human language. Reading individual lines of code is easy. Understanding what goal they are meant to accomplish is not. Best practice Comment your code liberally, and write your comments as if speaking to someone who has no idea what the code does. Don\u2019t assume you\u2019ll remember why you made specific choices. Author\u2019s note Throughout the rest of this tutorial series, we\u2019ll use comments inside code blocks to draw your attention to specific things, or help illustrate how things work (while ensuring the programs still compile). Astute readers will note that by the above standards, most of these comments are horrible. :) As you read through the rest of the tutorials, keep in mind that the comments are serving an intentional educational purpose, not trying to demonstrate what good comments look like. Commenting out code Converting one or more lines of code into a comment is called commenting out your code. This provides a convenient way to (temporarily) exclude parts of your code from being included in your compiled program. To comment out a single line of code, simply use the // style comment to turn a line of code into a comment temporarily: Uncommented out: 1 std :: cout << 1 ; COPY Commented out: 1 // std::cout << 1; COPY To comment out a block of code, use // on multiple lines of code, or the / / style comment to turn the block of code into a comment temporarily. Uncommented out: 1 2 3 std :: cout << 1 ; std :: cout << 2 ; std :: cout << 3 ; COPY Commented out: 1 2 3 // std::cout << 1; // std::cout << 2; // std::cout << 3; COPY or 1 2 3 4 5 /* std::cout << 1; std::cout << 2; std::cout << 3; */ COPY There are quite a few reasons you might want to do this: You\u2019re working on a new piece of code that won\u2019t compile yet, and you need to run the program. The compiler won\u2019t let you compile the code if there are compiler errors. Commenting out the code that won\u2019t compile will allow the program to compile so you can run it. When you\u2019re ready, you can uncomment the code, and continue working on it. You\u2019ve written new code that compiles but doesn\u2019t work correctly, and you don\u2019t have time to fix it until later. Commenting out the broken code will ensure the broken code doesn\u2019t execute and cause problems until you can fix it. To find the source of an error. If a program isn\u2019t producing the desired results (or is crashing), it can sometimes be useful to disable parts of your code to see if you can isolate what\u2019s causing it to not work correctly. If you comment out one or more lines of code, and your program starts working as expected (or stops crashing), odds are whatever you last commented out was part of the problem. You can then investigate why those lines of code are causing the problem. You want to replace one piece of code with another piece of code. Instead of just deleting the original code, you can comment it out and leave it there for reference until you\u2019re sure your new code works properly. Once you are sure your new code is working, you can remove the old commented out code. If you can\u2019t get your new code to work, you can always delete the new code and uncomment the old code to revert to what you had before. Commenting out code is a common thing to do while developing, so many IDEs provide support for commenting out a highlighted section of code. How you access this functionality varies by IDE. For Visual Studio users You can comment or uncomment a selection via Edit menu > Advanced > Comment Selection (or Uncomment Selection). For Code::Blocks users You can comment or uncomment a selection via Edit menu > Comment (or Uncomment, or Toggle comment, or any of the other comment tools). Tip If you always use single line comments for your normal comments, then you can always use multi-line comments to comment out your code without conflict. If you use multi-line comments to document your code, then commenting-out code using comments can become more challenging. If you do need to comment out a code block that contains multi-line comments, you can also consider using the #if 0 preprocessor directive, which we discuss in lesson 2.10 -- Introduction to the preprocessor . Summary At the library, program, or function level, use comments to describe what . Inside the library, program, or function, use comments to describe how . At the statement level, use comments to describe why .","title":"1.02 \u6ce8\u91ca"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.02%20%E6%B3%A8%E9%87%8A/#single-line-comments","text":"The // symbol begins a C++ single-line comment, which tells the compiler to ignore everything from the // symbol to the end of the line. For example: 1 std :: cout << \"Hello world!\" ; // Everything from here to the end of the line is ignored Typically, the single-line comment is used to make a quick comment about a single line of code. 1 2 3 std :: cout << \"Hello world! \\n \" ; // std::cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments make the code hard to read std :: cout << \"Yeah! \\n \" ; // especially when lines are different lengths Having comments to the right of a line can make both the code and the comment hard to read, particularly if the line is long. If the lines are fairly short, the comments can simply be aligned (usually to a tab stop), like so: 1 2 3 std :: cout << \"Hello world! \\n \" ; // std::cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // this is much easier to read std :: cout << \"Yeah! \\n \" ; // don't you think so? However, if the lines are long, placing comments to the right can make your lines really long. In that case, single-line comments are often placed above the line it is commenting: 1 2 3 4 5 6 7 8 // std::cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // this is much easier to read std :: cout << \"It is very nice to meet you! \\n \" ; // don't you think so? std :: cout << \"Yeah! \\n \" ; COPY Author\u2019s note The statements above represent one of our first encounters with snippets of code. Because snippets aren\u2019t full programs, they aren\u2019t able to be compiled by themselves. Rather, they exist to demonstrate specific concepts in a concise manner. If you would like to compile a snippet, you\u2019ll need to turn it into a full program in order for it to compile. Typically, that program will look something like this: 1 2 3 4 5 6 7 8 #include <iostream> int main () { // Replace this line with the snippet of code you'd like to compile return 0 ; } COPY Multi-line comments The /* and */ pair of symbols denotes a C-style multi-line comment. Everything in between the symbols is ignored. 1 2 3 /* This is a multi-line comment. This line will be ignored. So will this one. */ COPY Since everything between the symbols is ignored, you will sometimes see programmers \u201cbeautify\u201d their multi-line comments: 1 2 3 4 /* This is a multi-line comment. * the matching asterisks to the left * can make this easier to read */ COPY Multi-line style comments can not be nested. Consequently, the following will have unexpected results: 1 2 /* This is a multi-line /* comment */ this is not inside the comment */ // The above comment ends at the first */, not the second */ COPY When the compiler tries to compile this, it will ignore everything from the first / _ to the first /. Since \u201c_this is not inside the comment */ \u201d is not considered part of the comment, the compiler will try to compile it. That will inevitably result in a compile error. This is one place where using a syntax highlighter can be really useful, as the different coloring for comment should make clear what\u2019s considered part of the comment vs not. Warning Don\u2019t use multi-line comments inside other multi-line comments. Wrapping single-line comments inside a multi-line comment is okay. Proper use of comments Typically, comments should be used for three things. First, for a given library, program, or function, comments are best used to describe what the library, program, or function, does. These are typically placed at the top of the file or library, or immediately preceding the function. For example: 1 // This program calculates the student's final grade based on his test and homework scores. COPY 1 // This function uses Newton's method to approximate the root of a given equation. COPY 1 // The following lines generate a random item based on rarity, level, and a weight factor. COPY All of these comments give the reader a good idea of what the library, program, or function is trying to accomplish without having to look at the actual code. The user (possibly someone else, or you if you\u2019re trying to reuse code you\u2019ve previously written) can tell at a glance whether the code is relevant to what he or she is trying to accomplish. This is particularly important when working as part of a team, where not everybody will be familiar with all of the code. Second, within a library, program, or function described above, comments can be used to describe how the code is going to accomplish its goal. 1 2 3 /* To calculate the final grade, we sum all the weighted midterm and homework scores and then divide by the number of scores to assign a percentage, which is used to calculate a letter grade. */ COPY 1 2 3 4 5 6 // To generate a random item, we're going to do the following: // 1) Put all of the items of the desired rarity on a list // 2) Calculate a probability for each item based on level and weight factor // 3) Choose a random number // 4) Figure out which item that random number corresponds to // 5) Return the appropriate item COPY These comments give the user an idea of how the code is going to accomplish its goal without having to understand what each individual line of code does. Third, at the statement level, comments should be used to describe why the code is doing something. A bad statement comment explains what the code is doing. If you ever write code that is so complex that needs a comment to explain what a statement is doing, you probably need to rewrite your statement, not comment it. Here are some examples of bad line comments and good statement comments. Bad comment: 1 2 // Set sight range to 0 sight = 0 ; COPY Reason: We already can see that sight is being set to 0 by looking at the statement Good comment: 1 2 // The player just drank a potion of blindness and can not see anything sight = 0 ; COPY Reason: Now we know why the player\u2019s sight is being set to 0 Bad comment: 1 2 // Calculate the cost of the items cost = quantity * 2 * storePrice ; COPY Reason: We can see that this is a cost calculation, but why is quantity multiplied by 2? Good comment: 1 2 // We need to multiply quantity by 2 here because they are bought in pairs cost = quantity * 2 * storePrice ; COPY Reason: Now we know why this formula makes sense. Programmers often have to make a tough decision between solving a problem one way, or solving it another way. Comments are a great way to remind yourself (or tell somebody else) the reason you made one decision instead of another. Good comments: 1 2 // We decided to use a linked list instead of an array because // arrays do insertion too slowly. COPY 1 2 // We're going to use Newton's method to find the root of a number because // there is no deterministic way to solve these equations. COPY Finally, comments should be written in a way that makes sense to someone who has no idea what the code does. It is often the case that a programmer will say \u201cIt\u2019s obvious what this does! There\u2019s no way I\u2019ll forget about this\u201d. Guess what? It\u2019s not obvious, and you will be amazed how quickly you forget. :) You (or someone else) will thank you later for writing down the what, how, and why of your code in human language. Reading individual lines of code is easy. Understanding what goal they are meant to accomplish is not. Best practice Comment your code liberally, and write your comments as if speaking to someone who has no idea what the code does. Don\u2019t assume you\u2019ll remember why you made specific choices. Author\u2019s note Throughout the rest of this tutorial series, we\u2019ll use comments inside code blocks to draw your attention to specific things, or help illustrate how things work (while ensuring the programs still compile). Astute readers will note that by the above standards, most of these comments are horrible. :) As you read through the rest of the tutorials, keep in mind that the comments are serving an intentional educational purpose, not trying to demonstrate what good comments look like. Commenting out code Converting one or more lines of code into a comment is called commenting out your code. This provides a convenient way to (temporarily) exclude parts of your code from being included in your compiled program. To comment out a single line of code, simply use the // style comment to turn a line of code into a comment temporarily: Uncommented out: 1 std :: cout << 1 ; COPY Commented out: 1 // std::cout << 1; COPY To comment out a block of code, use // on multiple lines of code, or the / / style comment to turn the block of code into a comment temporarily. Uncommented out: 1 2 3 std :: cout << 1 ; std :: cout << 2 ; std :: cout << 3 ; COPY Commented out: 1 2 3 // std::cout << 1; // std::cout << 2; // std::cout << 3; COPY or 1 2 3 4 5 /* std::cout << 1; std::cout << 2; std::cout << 3; */ COPY There are quite a few reasons you might want to do this: You\u2019re working on a new piece of code that won\u2019t compile yet, and you need to run the program. The compiler won\u2019t let you compile the code if there are compiler errors. Commenting out the code that won\u2019t compile will allow the program to compile so you can run it. When you\u2019re ready, you can uncomment the code, and continue working on it. You\u2019ve written new code that compiles but doesn\u2019t work correctly, and you don\u2019t have time to fix it until later. Commenting out the broken code will ensure the broken code doesn\u2019t execute and cause problems until you can fix it. To find the source of an error. If a program isn\u2019t producing the desired results (or is crashing), it can sometimes be useful to disable parts of your code to see if you can isolate what\u2019s causing it to not work correctly. If you comment out one or more lines of code, and your program starts working as expected (or stops crashing), odds are whatever you last commented out was part of the problem. You can then investigate why those lines of code are causing the problem. You want to replace one piece of code with another piece of code. Instead of just deleting the original code, you can comment it out and leave it there for reference until you\u2019re sure your new code works properly. Once you are sure your new code is working, you can remove the old commented out code. If you can\u2019t get your new code to work, you can always delete the new code and uncomment the old code to revert to what you had before. Commenting out code is a common thing to do while developing, so many IDEs provide support for commenting out a highlighted section of code. How you access this functionality varies by IDE. For Visual Studio users You can comment or uncomment a selection via Edit menu > Advanced > Comment Selection (or Uncomment Selection). For Code::Blocks users You can comment or uncomment a selection via Edit menu > Comment (or Uncomment, or Toggle comment, or any of the other comment tools). Tip If you always use single line comments for your normal comments, then you can always use multi-line comments to comment out your code without conflict. If you use multi-line comments to document your code, then commenting-out code using comments can become more challenging. If you do need to comment out a code block that contains multi-line comments, you can also consider using the #if 0 preprocessor directive, which we discuss in lesson 2.10 -- Introduction to the preprocessor . Summary At the library, program, or function level, use comments to describe what . Inside the library, program, or function, use comments to describe how . At the statement level, use comments to describe why .","title":"Single-line comments"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/","text":"1.3 \u5bf9\u8c61\u548c\u53d8\u91cf \u6570\u636e \u5728 [[1.1 \u7a0b\u5e8f\u7ed3\u6784\u548c\u8bed\u53e5]] \u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u7ec4\u6210\u4e00\u4e2a\u7a0b\u5e8f\u6240\u6d89\u53ca\u7684\u5927\u591a\u6570\u8bed\u53e5\u5e76\u4e14\u5c06\u5b83\u4eec\u5c01\u88c5\u6210\u4e86\u51fd\u6570\u3002\u8fd9\u4e9b\u8bed\u53e5\u80fd\u591f\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u5e76\u6309\u7167\uff08\u4f46\u613f\uff09\u9884\u671f\u8f93\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\uff0c\u7a0b\u5e8f\u7a76\u7adf\u662f\u5982\u4f55\u751f\u6210\u8fd9\u4e9b\u7ed3\u679c\u7684\u5462\uff1f\u5b83\u4eec\u662f\u901a\u8fc7\u64cd\u4f5c\uff08\u8bfb\u3001\u4fee\u6539\u3001\u5199\uff09\u6570\u636e\u6765\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\u7684\u3002\u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u6570\u636e\u6307\u7684\u662f\u4efb\u4f55\u53ef\u4ee5\u88ab\u8ba1\u7b97\u673a\u79fb\u52a8\u3001\u5904\u7406\u548c\u5b58\u50a8\u7684\u4fe1\u606f\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u6240\u8c13\u7a0b\u5e8f\uff0c\u5373\u4e00\u7cfb\u5217\u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u5e76\u8f93\u51fa\u9884\u671f\u7ed3\u679c\u7684\u6307\u4ee4 \u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u9014\u5f84\u6765\u83b7\u53d6\u6570\u636e\uff0c\u4f8b\u5982\u901a\u8fc7\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u7f51\u7edc\u3001\u7528\u6237\u8f93\u5165\u6765\u83b7\u53d6\uff0c\u7a0b\u5e8f\u5458\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5c06\u6570\u636e\u5d4c\u5165\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u3002\u5728\u524d\u9762\u8bfe\u7a0b\u4e2d\u7f16\u5199\u7684 \u201cHello world\u201d \u7a0b\u5e8f\u4e2d\uff0c\u201cHello world\u201d\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4fbf\u662f\u76f4\u63a5\u5d4c\u5165\u5728\u7a0b\u5e8f\u4e2d\u7684\u3002\u968f\u540e\uff0c\u8be5\u7a0b\u5e8f\u5bf9\u8be5\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c06\u5176\u663e\u793a\u5728\u663e\u793a\u5668\u4e0a\u3002 \u6570\u636e\u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u65f6\uff0c\u5f80\u5f80\u4ee5\u4e00\u79cd\u66f4\u9ad8\u6548\u66f4\u4fbf\u4e8e\u5904\u7406\u7684\u683c\u5f0f\u6765\u5b58\u50a8\uff08\u5f80\u5f80\u4e0d\u80fd\u591f\u88ab\u4eba\u7c7b\u76f4\u63a5\u9605\u8bfb\uff09\u3002\u56e0\u6b64\uff0c\u5f53 \u201cHello World\u201d \u7a0b\u5e8f\u88ab\u7f16\u8bd1\u540e\uff0c\u5b57\u7b26\u4e32 \u201cHello World\u201d \u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u79cd\u66f4\u4e3a\u9ad8\u6548\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u5e76\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u4f7f\u7528\uff08\u4e8c\u8fdb\u5236\u683c\u5f0f\u2014\u2014\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\uff09 \u5bf9\u8c61\u548c\u53d8\u91cf \u6240\u6709\u8ba1\u7b97\u673a\u90fd\u6709\u5185\u5b58\uff0c\u5373 RAM \uff08\u968f\u673a\u8bbf\u95ee\u5185\u5b58\uff09\uff0c \u53ef\u4f9b\u7a0b\u5e8f\u4f7f\u7528\u3002\u4f60\u53ef\u4ee5\u5c06 RAM \u770b\u505a\u662f\u4e00\u7cfb\u5217\u5177\u6709\u6807\u53f7\u7684\u201c\u4fe1\u7bb1\u201d\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b58\u653e\u4e00\u7cfb\u5217\u7684\u6570\u636e\u7247\u6bb5\u3002\u4e00\u4e2a\u5355\u72ec\u7684\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u79f0\u4e4b\u4e3a\u503c\uff08value\uff09\u3002 \u5728\u4e00\u4e9b\u6bd4\u8f83\u53e4\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982 Apple Basic\uff09\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u201d\u4fe1\u7bb1\u201c\uff08\u5bf9\u5e94\u7684\u8bed\u53e5\u7c7b\u4f3c\u4e8e \u83b7\u53d6\u6807\u53f7\u4e3a7532\u7684\u4fe1\u7bb1\u4e2d\u7684\u6570\u636e \uff09 [[\u5728 C++ \u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u5185\u5b58\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u591f\u901a\u8fc7\u67d0\u4e2a\u5bf9\u8c61\u95f4\u63a5\u5730\u8bbf\u95ee\u5185\u5b58]]\u3002\u6240\u8c13\u5bf9\u8c61\uff0c\u5373\u5b58\u653e\u5728\u67d0\u4e2a\u533a\u57df\uff08\u4e00\u822c\u6765\u8bb2\u4e3a\u5185\u5b58\uff09\uff0c\u5177\u6709\u503c\u4ee5\u53ca\u5176\u4ed6\u5c5e\u6027\uff08\u540e\u7eed\u8bfe\u7a0b\u4f1a\u7740\u91cd\u4ecb\u7ecd\uff09\u7684\u6570\u636e\u3002\u7f16\u8bd1\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u7684\u8fc7\u7a0b\uff0c\u8d85\u51fa\u4e86\u672c\u8bfe\u7a0b\u7684\u8303\u56f4\u3002\u4f46\u662f\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u662f\uff0c \u83b7\u53d6\u6807\u53f7\u4e3a7532\u7684\u4fe1\u7bb1\u4e2d\u7684\u6570\u636e \u662f\u4e0d\u53ef\u884c\u7684\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u5e94\u5f53\u662f \u83b7\u53d6\u67d0\u4e2a\u5bf9\u8c61\u6240\u4fdd\u5b58\u7684\u503c \u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4f7f\u7528\u5bf9\u8c61\u6765\u5b58\u50a8\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u4eec\u5b9e\u9645\u4f7f\u7528\u7684\u5185\u5b58\u3002 \u5bf9\u8c61\u53ef\u4ee5\u662f\u547d\u540d\u7684\uff0c\u6216\u672a\u547d\u540d\u7684\u3002\u4e00\u4e2a\u547d\u540d\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u53d8\u91cf\uff0c\u800c\u8be5\u5bf9\u8c61\u7684\u540d\u5b57\u672c\u8eab\uff0c\u5219\u79f0\u4e3a[[\u6807\u8bc6\u7b26(identifier)]]\u3002\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5927\u591a\u6570\u7684\u5bf9\u8c61\u90fd\u5c5e\u4e8e\u53d8\u91cf\u3002 [!TIP] \u4f5c\u8005\u6ce8 \u5728\u4e00\u822c\u7684\u7f16\u7a0b\u4e2d\uff0c \u5bf9\u8c61 \u8fd9\u4e2a\u672f\u8bed\u901a\u5e38\u6307\u4ee3\u7684\u662f\u67d0\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u636e\u7ed3\u6784\u6216\u51fd\u6570\u3002\u5728 C++ \u4e2d\uff0c \u5bf9\u8c61 \u8fd9\u4e2a\u672f\u8bed\u7684\u542b\u4e49\u8981\u66f4\u52a0\u5c40\u9650\u4e00\u4e9b\uff0c\u5b83\u5e76\u4e0d\u5305\u62ec\u51fd\u6570\u3002 \u53d8\u91cf\u7684\u5b9e\u4f8b\u5316 \u4e3a\u4e86\u521b\u5efa\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u88ab\u79f0\u4e3a\u201d\u5b9a\u4e49\u201c\u7684\u7279\u6b8a\u7c7b\u578b\u7684\u58f0\u660e\u8bed\u53e5\uff08\u7a0d\u540e\u4f1a\u6f84\u6e05\u58f0\u660e\u548c\u5b9a\u4e49\u4e4b\u95f4\u7684\u533a\u522b\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3ax\u7684\u53d8\u91cf\uff0c\u6848\u4f8b\u5982\u4e0b\uff1a 1 int x ; // define a variable named x, of type int \u5728\u7f16\u8bd1\u9636\u6bb5\uff0c\u5f53\u7f16\u8bd1\u5668\u89e3\u6790\u5230\u8be5\u8bed\u53e5\u65f6\uff0c\u5b83\u4f1a\u8bb0\u5f55\u4e0b\u6b64\u65f6\u5b9a\u4e49\u7684\u4e00\u4e2a\u540d\u4e3ax\u3001\u7c7b\u578b\u4e3a int \u7684\u53d8\u91cf\u3002\uff08\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u7c7b\u578b\u7cfb\u7edf\uff09\u3002\u4ece\u6b64\u4ee5\u540e\uff08\u6709\u4e00\u5b9a\u7684\u9650\u5236\u6761\u4ef6\uff0c\u7a0d\u540e\u4ecb\u7ecd\uff09\uff0c\u6bcf\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u6807\u8bc6\u7b26 x\uff0c\u5b83\u5c31\u77e5\u9053\u53bb\u5f15\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\uff08\u79f0\u4e3a\u8fd0\u884c\u65f6\uff09\uff0c\u8be5\u53d8\u91cf\u4f1a\u88ab[[\u5b9e\u4f8b\u5316(instantiated)]]\u3002\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u8bcd\u53ea\u662f\u542c\u8d77\u6765\u6709\u70b9\u7384\u4e4e\u7f62\u4e86\uff0c\u5b83\u7684\u542b\u4e49\u5f88\u7b80\u5355\u2014\u2014\u521b\u5efa\u5bf9\u8c61\u5e76\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u3002\u53d8\u91cf\u5728\u4f7f\u7528\u524d\uff08\u5b58\u50a8\u503c\u524d\uff09\u5fc5\u987b\u5b9e\u4f8b\u5316\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe\u53d8\u91cfx\u5b9e\u4f8b\u5316\u540e\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u4e3a140\uff0c\u4e4b\u540e\u7a0b\u5e8f\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u8be5\u53d8\u91cfx\u65f6\uff0c\u5b83\u90fd\u4f1a\u53d6\u8bbf\u95ee\u5185\u5b58\u5730\u5740140\u3002\u4e00\u4e2a\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a[[\u5b9e\u4f8b(instance)]]\u3002 \u6570\u636e\u7c7b\u578b \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u53d8\u91cf\u5c31\u662f\u67d0\u4e2a\u547d\u540d\u4e4b\u540e\u7684\u5b58\u50a8\u533a\u57df\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u6570\u636e\uff08\u5982\u4f55\u5b58\u653e\u5c06\u5728\u540e\u7eed\u7684\u7ae0\u8282\u8ba8\u8bba\uff09\u3002\u6570\u636e\u7c7b\u578b\uff08\u4e00\u822c\u7b80\u79f0\u4e3a\u7c7b\u578b\uff09\u53ef\u4ee5\u544a\u77e5\u7f16\u8bd1\u5668\u5b83\u8981\u5b58\u50a8\u7684\u8be5\u6570\u636e\u7684\u503c\u662f\u4ec0\u4e48\u7c7b\u578b\uff08\u4f8b\u5982\uff0c\u6570\u5b57\uff0c\u5b57\u6bcd\uff0c\u6587\u672c\u7b49\u7b49\uff09\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf x \u7684\u7c7b\u578b\u662f int\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8be5\u53d8\u91cf x \u8868\u793a\u7684\u662f\u4e00\u4e2a\u6574\u578b\u7684\u503c\u3002\u6574\u578b\u8868\u793a\u8be5\u6570\u5b57\u4e0d\u9700\u8981\u5c0f\u6570\u90e8\u5206\u5c31\u53ef\u4ee5\u8868\u793a\uff0c\u4f8b\u5982 4\uff0c27\uff0c0\uff0c-2 \u6216\u8005 -12\u3002\u957f\u8bdd\u77ed\u8bf4\uff0c\u8fd9\u91cc x \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u3002 \u5728 C++ \u4e2d\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u5fc5\u987b\u5728[[\u7f16\u8bd1\u65f6(compile-time)]]\u786e\u5b9a\u3002\u6b64\u5916\uff0c\u8be5\u7c7b\u578b\u518d\u4e0b\u4e00\u6b21\u7f16\u8bd1\u524d\uff0c\u4e0d\u80fd\u53d1\u751f\u6539\u53d8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u8be5\u6574\u578b\u53d8\u91cf\u53ea\u80fd\u59cb\u7ec8\u5b58\u653e\u4e00\u4e2a\u6574\u578b\u7684\u503c\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5b83\u5b58\u653e\u5176\u4ed6\u7c7b\u578b\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u53e6\u5916\u7684\u53d8\u91cf\u3002 \u6574\u578b\u53ea\u662f C++ \u539f\u751f\u652f\u6301\u7684\u591a\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u89e3\u91ca\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a double \u7684\u53d8\u91cf\uff1a 1 double width ; // define a variable named width, of type double C++ \u5141\u8bb8\u7528\u6237\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u3002\u6211\u4eec\u4f1a\u5728\u5c06\u6765\u7684\u8bfe\u7a0b\u4e2d\u5927\u91cf\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u662f C++ \u8bed\u8a00\u5f3a\u5927\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u5728\u4ecb\u7ecd\u6027\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u6574\u578b\u53d8\u91cf\uff0c\u56e0\u5b83\u4eec\u66f4\u52a0\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u63a2\u7d22\u5927\u91cf\u7684\u5176\u4ed6 C++ \u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u3002 \u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u5f53\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u9700\u8981\u7528\u9017\u53f7\u5c06\u53d8\u91cf\u540d\u5206\u5272\u5f00\u6765\u5373\u53ef\u3002\u4e0b\u9762\u4e24\u4e2a\u4ee3\u7801\u7247\u6bb5\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff1a 1 2 int a ; int b ; 1 int a , b ; \u5982\u679c\u5c5e\u4e8e\u4e0a\u8ff0\u65b9\u5f0f\u6765\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff0c\u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u4f1a\u72af\u4e0b\u4e24\u79cd\u9519\u8bef\uff08\u8fd9\u6ca1\u6709\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u6355\u83b7\u8fd9\u4e9b\u9519\u8bef\u5e76\u8981\u6c42\u4f60\u8fdb\u884c\u4fee\u590d\uff09\uff1a \u7b2c\u4e00\u79cd\u9519\u8bef\u662f\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6dfb\u52a0\u7c7b\u578b\u8bf4\u660e\u3002 1 2 3 int a , int b ; // wrong (compiler error) int a , b ; // correct \u7b2c\u4e8c\u79cd\u9519\u8bef\u662f\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u5b9a\u4e49\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c\u8fd9\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u5fc5\u987b\u5206\u522b\u5b9a\u4e49\u3002 1 2 3 4 5 6 7 int a , double b ; // wrong (compiler error) int a ; double b ; // correct (but not recommended) // correct and recommended (easier to read) int a ; double b ; [!TIP] \u6700\u4f73\u5b9e\u8df5 [[\u5c3d\u7ba1\u5728\u8bed\u8a00\u5c42\u9762\uff0c\u4f7f\u7528\u5355\u4e00\u8bed\u53e5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u5e94\u5f53\u5c3d\u91cf\u907f\u514d\u8fd9\u6837\u53bb\u505a\uff08\u5373\u65f6\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff09\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\u4e00\u4e2a\u8bed\u53e5\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff08\u5e76\u4f7f\u7528\u5355\u884c\u6ce8\u91ca\u89e3\u91ca\u8be5\u53d8\u91cf\u7684\u7528\u9014\uff09\u3002]] \u5c0f\u7ed3 \u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u53d8\u91cf\u6765\u8bbf\u95ee\u5185\u5b58\u3002\u53d8\u91cf\u5177\u6709\u6807\u8bc6\u7b26\u3001\u7c7b\u578b\u548c\u503c\uff08\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u4e0e\u6b64\u5904\u4e0d\u76f8\u5173\u7684\u5c5e\u6027\uff09\u3002[[\u53d8\u91cf\u7c7b\u578b\u7528\u4e8e\u786e\u5b9a\u5185\u5b58\u4e2d\u7684\u503c\u5e94\u8be5\u88ab\u5982\u4f55\u89e3\u6790]]\u3002 \u5728\u4e0b\u4e00\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4e3a\u53d8\u91cf\u8d4b\u503c\u5e76\u4f7f\u7528\u5b83\u4eec\u3002","title":"1.3 \u5bf9\u8c61\u548c\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#13","text":"","title":"1.3 \u5bf9\u8c61\u548c\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_1","text":"\u5728 [[1.1 \u7a0b\u5e8f\u7ed3\u6784\u548c\u8bed\u53e5]] \u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u7ec4\u6210\u4e00\u4e2a\u7a0b\u5e8f\u6240\u6d89\u53ca\u7684\u5927\u591a\u6570\u8bed\u53e5\u5e76\u4e14\u5c06\u5b83\u4eec\u5c01\u88c5\u6210\u4e86\u51fd\u6570\u3002\u8fd9\u4e9b\u8bed\u53e5\u80fd\u591f\u6267\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\u5e76\u6309\u7167\uff08\u4f46\u613f\uff09\u9884\u671f\u8f93\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\uff0c\u7a0b\u5e8f\u7a76\u7adf\u662f\u5982\u4f55\u751f\u6210\u8fd9\u4e9b\u7ed3\u679c\u7684\u5462\uff1f\u5b83\u4eec\u662f\u901a\u8fc7\u64cd\u4f5c\uff08\u8bfb\u3001\u4fee\u6539\u3001\u5199\uff09\u6570\u636e\u6765\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\u7684\u3002\u5728\u8ba1\u7b97\u673a\u9886\u57df\uff0c\u6570\u636e\u6307\u7684\u662f\u4efb\u4f55\u53ef\u4ee5\u88ab\u8ba1\u7b97\u673a\u79fb\u52a8\u3001\u5904\u7406\u548c\u5b58\u50a8\u7684\u4fe1\u606f\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u6240\u8c13\u7a0b\u5e8f\uff0c\u5373\u4e00\u7cfb\u5217\u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u5e76\u8f93\u51fa\u9884\u671f\u7ed3\u679c\u7684\u6307\u4ee4 \u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u9014\u5f84\u6765\u83b7\u53d6\u6570\u636e\uff0c\u4f8b\u5982\u901a\u8fc7\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u7f51\u7edc\u3001\u7528\u6237\u8f93\u5165\u6765\u83b7\u53d6\uff0c\u7a0b\u5e8f\u5458\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5c06\u6570\u636e\u5d4c\u5165\u5728\u7a0b\u5e8f\u6e90\u7801\u4e2d\u3002\u5728\u524d\u9762\u8bfe\u7a0b\u4e2d\u7f16\u5199\u7684 \u201cHello world\u201d \u7a0b\u5e8f\u4e2d\uff0c\u201cHello world\u201d\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4fbf\u662f\u76f4\u63a5\u5d4c\u5165\u5728\u7a0b\u5e8f\u4e2d\u7684\u3002\u968f\u540e\uff0c\u8be5\u7a0b\u5e8f\u5bf9\u8be5\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c06\u5176\u663e\u793a\u5728\u663e\u793a\u5668\u4e0a\u3002 \u6570\u636e\u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u65f6\uff0c\u5f80\u5f80\u4ee5\u4e00\u79cd\u66f4\u9ad8\u6548\u66f4\u4fbf\u4e8e\u5904\u7406\u7684\u683c\u5f0f\u6765\u5b58\u50a8\uff08\u5f80\u5f80\u4e0d\u80fd\u591f\u88ab\u4eba\u7c7b\u76f4\u63a5\u9605\u8bfb\uff09\u3002\u56e0\u6b64\uff0c\u5f53 \u201cHello World\u201d \u7a0b\u5e8f\u88ab\u7f16\u8bd1\u540e\uff0c\u5b57\u7b26\u4e32 \u201cHello World\u201d \u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u79cd\u66f4\u4e3a\u9ad8\u6548\u7684\u683c\u5f0f\u6765\u5b58\u50a8\u5e76\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u4f7f\u7528\uff08\u4e8c\u8fdb\u5236\u683c\u5f0f\u2014\u2014\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\uff09","title":"\u6570\u636e"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_2","text":"\u6240\u6709\u8ba1\u7b97\u673a\u90fd\u6709\u5185\u5b58\uff0c\u5373 RAM \uff08\u968f\u673a\u8bbf\u95ee\u5185\u5b58\uff09\uff0c \u53ef\u4f9b\u7a0b\u5e8f\u4f7f\u7528\u3002\u4f60\u53ef\u4ee5\u5c06 RAM \u770b\u505a\u662f\u4e00\u7cfb\u5217\u5177\u6709\u6807\u53f7\u7684\u201c\u4fe1\u7bb1\u201d\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b58\u653e\u4e00\u7cfb\u5217\u7684\u6570\u636e\u7247\u6bb5\u3002\u4e00\u4e2a\u5355\u72ec\u7684\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u79f0\u4e4b\u4e3a\u503c\uff08value\uff09\u3002 \u5728\u4e00\u4e9b\u6bd4\u8f83\u53e4\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff08\u4f8b\u5982 Apple Basic\uff09\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u201d\u4fe1\u7bb1\u201c\uff08\u5bf9\u5e94\u7684\u8bed\u53e5\u7c7b\u4f3c\u4e8e \u83b7\u53d6\u6807\u53f7\u4e3a7532\u7684\u4fe1\u7bb1\u4e2d\u7684\u6570\u636e \uff09 [[\u5728 C++ \u4e2d\uff0c\u76f4\u63a5\u8bbf\u95ee\u5185\u5b58\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u591f\u901a\u8fc7\u67d0\u4e2a\u5bf9\u8c61\u95f4\u63a5\u5730\u8bbf\u95ee\u5185\u5b58]]\u3002\u6240\u8c13\u5bf9\u8c61\uff0c\u5373\u5b58\u653e\u5728\u67d0\u4e2a\u533a\u57df\uff08\u4e00\u822c\u6765\u8bb2\u4e3a\u5185\u5b58\uff09\uff0c\u5177\u6709\u503c\u4ee5\u53ca\u5176\u4ed6\u5c5e\u6027\uff08\u540e\u7eed\u8bfe\u7a0b\u4f1a\u7740\u91cd\u4ecb\u7ecd\uff09\u7684\u6570\u636e\u3002\u7f16\u8bd1\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u7684\u8fc7\u7a0b\uff0c\u8d85\u51fa\u4e86\u672c\u8bfe\u7a0b\u7684\u8303\u56f4\u3002\u4f46\u662f\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u662f\uff0c \u83b7\u53d6\u6807\u53f7\u4e3a7532\u7684\u4fe1\u7bb1\u4e2d\u7684\u6570\u636e \u662f\u4e0d\u53ef\u884c\u7684\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u5e94\u5f53\u662f \u83b7\u53d6\u67d0\u4e2a\u5bf9\u8c61\u6240\u4fdd\u5b58\u7684\u503c \u3002\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4f7f\u7528\u5bf9\u8c61\u6765\u5b58\u50a8\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u4eec\u5b9e\u9645\u4f7f\u7528\u7684\u5185\u5b58\u3002 \u5bf9\u8c61\u53ef\u4ee5\u662f\u547d\u540d\u7684\uff0c\u6216\u672a\u547d\u540d\u7684\u3002\u4e00\u4e2a\u547d\u540d\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u53d8\u91cf\uff0c\u800c\u8be5\u5bf9\u8c61\u7684\u540d\u5b57\u672c\u8eab\uff0c\u5219\u79f0\u4e3a[[\u6807\u8bc6\u7b26(identifier)]]\u3002\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5927\u591a\u6570\u7684\u5bf9\u8c61\u90fd\u5c5e\u4e8e\u53d8\u91cf\u3002 [!TIP] \u4f5c\u8005\u6ce8 \u5728\u4e00\u822c\u7684\u7f16\u7a0b\u4e2d\uff0c \u5bf9\u8c61 \u8fd9\u4e2a\u672f\u8bed\u901a\u5e38\u6307\u4ee3\u7684\u662f\u67d0\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u636e\u7ed3\u6784\u6216\u51fd\u6570\u3002\u5728 C++ \u4e2d\uff0c \u5bf9\u8c61 \u8fd9\u4e2a\u672f\u8bed\u7684\u542b\u4e49\u8981\u66f4\u52a0\u5c40\u9650\u4e00\u4e9b\uff0c\u5b83\u5e76\u4e0d\u5305\u62ec\u51fd\u6570\u3002","title":"\u5bf9\u8c61\u548c\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_3","text":"\u4e3a\u4e86\u521b\u5efa\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u88ab\u79f0\u4e3a\u201d\u5b9a\u4e49\u201c\u7684\u7279\u6b8a\u7c7b\u578b\u7684\u58f0\u660e\u8bed\u53e5\uff08\u7a0d\u540e\u4f1a\u6f84\u6e05\u58f0\u660e\u548c\u5b9a\u4e49\u4e4b\u95f4\u7684\u533a\u522b\uff09\u3002 \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u540d\u4e3ax\u7684\u53d8\u91cf\uff0c\u6848\u4f8b\u5982\u4e0b\uff1a 1 int x ; // define a variable named x, of type int \u5728\u7f16\u8bd1\u9636\u6bb5\uff0c\u5f53\u7f16\u8bd1\u5668\u89e3\u6790\u5230\u8be5\u8bed\u53e5\u65f6\uff0c\u5b83\u4f1a\u8bb0\u5f55\u4e0b\u6b64\u65f6\u5b9a\u4e49\u7684\u4e00\u4e2a\u540d\u4e3ax\u3001\u7c7b\u578b\u4e3a int \u7684\u53d8\u91cf\u3002\uff08\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u7c7b\u578b\u7cfb\u7edf\uff09\u3002\u4ece\u6b64\u4ee5\u540e\uff08\u6709\u4e00\u5b9a\u7684\u9650\u5236\u6761\u4ef6\uff0c\u7a0d\u540e\u4ecb\u7ecd\uff09\uff0c\u6bcf\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u6807\u8bc6\u7b26 x\uff0c\u5b83\u5c31\u77e5\u9053\u53bb\u5f15\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\uff08\u79f0\u4e3a\u8fd0\u884c\u65f6\uff09\uff0c\u8be5\u53d8\u91cf\u4f1a\u88ab[[\u5b9e\u4f8b\u5316(instantiated)]]\u3002\u5b9e\u4f8b\u5316\u8fd9\u4e2a\u8bcd\u53ea\u662f\u542c\u8d77\u6765\u6709\u70b9\u7384\u4e4e\u7f62\u4e86\uff0c\u5b83\u7684\u542b\u4e49\u5f88\u7b80\u5355\u2014\u2014\u521b\u5efa\u5bf9\u8c61\u5e76\u4e3a\u5176\u5206\u914d\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u3002\u53d8\u91cf\u5728\u4f7f\u7528\u524d\uff08\u5b58\u50a8\u503c\u524d\uff09\u5fc5\u987b\u5b9e\u4f8b\u5316\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe\u53d8\u91cfx\u5b9e\u4f8b\u5316\u540e\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u4e3a140\uff0c\u4e4b\u540e\u7a0b\u5e8f\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u8be5\u53d8\u91cfx\u65f6\uff0c\u5b83\u90fd\u4f1a\u53d6\u8bbf\u95ee\u5185\u5b58\u5730\u5740140\u3002\u4e00\u4e2a\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a[[\u5b9e\u4f8b(instance)]]\u3002","title":"\u53d8\u91cf\u7684\u5b9e\u4f8b\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_4","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u53d8\u91cf\u5c31\u662f\u67d0\u4e2a\u547d\u540d\u4e4b\u540e\u7684\u5b58\u50a8\u533a\u57df\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u6570\u636e\uff08\u5982\u4f55\u5b58\u653e\u5c06\u5728\u540e\u7eed\u7684\u7ae0\u8282\u8ba8\u8bba\uff09\u3002\u6570\u636e\u7c7b\u578b\uff08\u4e00\u822c\u7b80\u79f0\u4e3a\u7c7b\u578b\uff09\u53ef\u4ee5\u544a\u77e5\u7f16\u8bd1\u5668\u5b83\u8981\u5b58\u50a8\u7684\u8be5\u6570\u636e\u7684\u503c\u662f\u4ec0\u4e48\u7c7b\u578b\uff08\u4f8b\u5982\uff0c\u6570\u5b57\uff0c\u5b57\u6bcd\uff0c\u6587\u672c\u7b49\u7b49\uff09\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53d8\u91cf x \u7684\u7c7b\u578b\u662f int\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8be5\u53d8\u91cf x \u8868\u793a\u7684\u662f\u4e00\u4e2a\u6574\u578b\u7684\u503c\u3002\u6574\u578b\u8868\u793a\u8be5\u6570\u5b57\u4e0d\u9700\u8981\u5c0f\u6570\u90e8\u5206\u5c31\u53ef\u4ee5\u8868\u793a\uff0c\u4f8b\u5982 4\uff0c27\uff0c0\uff0c-2 \u6216\u8005 -12\u3002\u957f\u8bdd\u77ed\u8bf4\uff0c\u8fd9\u91cc x \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u3002 \u5728 C++ \u4e2d\uff0c\u53d8\u91cf\u7684\u7c7b\u578b\u5fc5\u987b\u5728[[\u7f16\u8bd1\u65f6(compile-time)]]\u786e\u5b9a\u3002\u6b64\u5916\uff0c\u8be5\u7c7b\u578b\u518d\u4e0b\u4e00\u6b21\u7f16\u8bd1\u524d\uff0c\u4e0d\u80fd\u53d1\u751f\u6539\u53d8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u8be5\u6574\u578b\u53d8\u91cf\u53ea\u80fd\u59cb\u7ec8\u5b58\u653e\u4e00\u4e2a\u6574\u578b\u7684\u503c\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5b83\u5b58\u653e\u5176\u4ed6\u7c7b\u578b\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u53e6\u5916\u7684\u53d8\u91cf\u3002 \u6574\u578b\u53ea\u662f C++ \u539f\u751f\u652f\u6301\u7684\u591a\u79cd\u7c7b\u578b\u4e2d\u7684\u4e00\u79cd\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u89e3\u91ca\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a double \u7684\u53d8\u91cf\uff1a 1 double width ; // define a variable named width, of type double C++ \u5141\u8bb8\u7528\u6237\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u3002\u6211\u4eec\u4f1a\u5728\u5c06\u6765\u7684\u8bfe\u7a0b\u4e2d\u5927\u91cf\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u662f C++ \u8bed\u8a00\u5f3a\u5927\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u5728\u4ecb\u7ecd\u6027\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u6574\u578b\u53d8\u91cf\uff0c\u56e0\u5b83\u4eec\u66f4\u52a0\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u63a2\u7d22\u5927\u91cf\u7684\u5176\u4ed6 C++ \u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"\u6570\u636e\u7c7b\u578b"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_5","text":"\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u5f53\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u9700\u8981\u7528\u9017\u53f7\u5c06\u53d8\u91cf\u540d\u5206\u5272\u5f00\u6765\u5373\u53ef\u3002\u4e0b\u9762\u4e24\u4e2a\u4ee3\u7801\u7247\u6bb5\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff1a 1 2 int a ; int b ; 1 int a , b ; \u5982\u679c\u5c5e\u4e8e\u4e0a\u8ff0\u65b9\u5f0f\u6765\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff0c\u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u4f1a\u72af\u4e0b\u4e24\u79cd\u9519\u8bef\uff08\u8fd9\u6ca1\u6709\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u6355\u83b7\u8fd9\u4e9b\u9519\u8bef\u5e76\u8981\u6c42\u4f60\u8fdb\u884c\u4fee\u590d\uff09\uff1a \u7b2c\u4e00\u79cd\u9519\u8bef\u662f\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6dfb\u52a0\u7c7b\u578b\u8bf4\u660e\u3002 1 2 3 int a , int b ; // wrong (compiler error) int a , b ; // correct \u7b2c\u4e8c\u79cd\u9519\u8bef\u662f\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u5b9a\u4e49\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c\u8fd9\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u5fc5\u987b\u5206\u522b\u5b9a\u4e49\u3002 1 2 3 4 5 6 7 int a , double b ; // wrong (compiler error) int a ; double b ; // correct (but not recommended) // correct and recommended (easier to read) int a ; double b ; [!TIP] \u6700\u4f73\u5b9e\u8df5 [[\u5c3d\u7ba1\u5728\u8bed\u8a00\u5c42\u9762\uff0c\u4f7f\u7528\u5355\u4e00\u8bed\u53e5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\u5e94\u5f53\u5c3d\u91cf\u907f\u514d\u8fd9\u6837\u53bb\u505a\uff08\u5373\u65f6\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff09\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\u4e00\u4e2a\u8bed\u53e5\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff08\u5e76\u4f7f\u7528\u5355\u884c\u6ce8\u91ca\u89e3\u91ca\u8be5\u53d8\u91cf\u7684\u7528\u9014\uff09\u3002]]","title":"\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.03%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8F%98%E9%87%8F/#_6","text":"\u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u53d8\u91cf\u6765\u8bbf\u95ee\u5185\u5b58\u3002\u53d8\u91cf\u5177\u6709\u6807\u8bc6\u7b26\u3001\u7c7b\u578b\u548c\u503c\uff08\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u4e0e\u6b64\u5904\u4e0d\u76f8\u5173\u7684\u5c5e\u6027\uff09\u3002[[\u53d8\u91cf\u7c7b\u578b\u7528\u4e8e\u786e\u5b9a\u5185\u5b58\u4e2d\u7684\u503c\u5e94\u8be5\u88ab\u5982\u4f55\u89e3\u6790]]\u3002 \u5728\u4e0b\u4e00\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4e3a\u53d8\u91cf\u8d4b\u503c\u5e76\u4f7f\u7528\u5b83\u4eec\u3002","title":"\u5c0f\u7ed3"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/","text":"1.4 \u53d8\u91cf\u8d4b\u503c\u548c\u521d\u59cb\u5316 \u5728\u4e0a\u4e00\u8282\u8bfe [[1.3 \u5bf9\u8c61\u548c\u53d8\u91cf]] \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u3002\u5728\u8fd9\u4e00\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4e3a\u53d8\u91cf\u8d4b\u503c\u5e76\u4f7f\u7528\u5b83\u5b58\u50a8\u7684\u503c\u3002 \u9996\u5148\u56de\u5fc6\u4e00\u4e0b\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u4e3a\u4e00\u4e2a\u540d\u4e3a x \u7684\u6574\u578b\u53d8\u91cf\u5206\u914d\u4e86\u5185\u5b58\uff0c\u7136\u540e\u7c7b\u4f3c\u5730\uff0c\u53c8\u521b\u5efa\u4e86\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5206\u522b\u53eb\u505a y \u548c z\uff1a 1 2 int x ; // define an integer variable named x int y , z ; // define two integer variables, named y and z \u53d8\u91cf\u8d4b\u503c \u53d8\u91cf\u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 = \u4e3a\u5176\u8d4b\u503c\uff08\u5728\u53e6\u5916\u4e00\u4e2a\u5355\u72ec\u7684\u8bed\u53e5\u4e2d\uff09\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e3a\u62f7\u8d1d\u8d4b\u503c\uff08\u6216\u8d4b\u503c\uff09\u3002 1 2 3 4 int width ; // define an integer variable named width width = 5 ; // copy assignment of value 5 into variable width // variable width now has value 5 \u62f7\u8d1d\u8d4b\u503c\u540d\u5b57\u7684\u6765\u5386\uff0c\u6e90\u4e8e\u4e0a\u8ff0\u64cd\u4f5c\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u4fa7\u7684\u503c\u62f7\u8d1d\u540e\u8d4b\u503c\u7ed9\u4e86\u5de6\u4fa7\u7684\u53d8\u91cf\u3002 = \u79f0\u4e3a\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5148\u540e\u4e24\u6b21\u4f7f\u7528\u4e86\u8d4b\u503c\u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int main () { int width ; width = 5 ; // copy assignment of value 5 into variable width // variable width now has value 5 width = 7 ; // change value stored in variable width to 7 // variable width now has value 7 return 0 ; } \u5728\u6211\u4eec\u628a 7 \u8d4b\u503c\u7ed9\u53d8\u91cf width \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u7684\u503c\uff085\uff09\u5c31\u88ab\u8986\u76d6\u6389\u4e86\u3002\u4e00\u822c\u7684\u53d8\u91cf\u53ea\u80fd\u591f\u5b58\u50a8\u4e00\u4e2a\u503c\u3002 [!Warning] \u6ce8\u610f \u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u72af\u7684\u9519\u8bef\u4e4b\u4e00\u5c31\u662f\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26( = )\u548c\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26( == )\u5f04\u6df7\u6dc6\u3002\u8d4b\u503c\u8fd0\u7b97\u7b26\u7528\u4e8e\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u800c\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26\u5219\u7528\u4e8e\u6821\u9a8c\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002 \u521d\u59cb\u5316 \u4e0a\u8ff0\u8d4b\u503c\u8fc7\u7a0b\u7684\u7f3a\u70b9\u4e4b\u4e00\uff0c\u662f\u5b83\u9700\u8981\u4e24\u6761\u8bed\u53e5\u624d\u80fd\u5b8c\u6210\uff1a\u9996\u5148\u5b9a\u4e49\u53d8\u91cf\uff0c\u7136\u540e\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002 \u8fd9\u4e24\u6b65\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684\u3002\u5728\u5b9a\u4e49\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u53d8\u91cf\u8bbe\u7f6e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u521d\u59cb\u5316\u3002\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf\u7684\u8fd9\u4e2a\u503c\uff0c\u79f0\u4e3a[[\u521d\u59cb\u5316\u503c(initializer)]]\u3002 C++ \u4e2d\u7684\u521d\u59cb\u5316\u662f\u51fa\u5947\u7684\u590d\u6742\uff0c\u8fd9\u91cc\u5411\u4f60\u5c55\u793a\u4e00\u4e2a\u7b80\u5316\u540e\u7684\u7248\u672c\u3002 \u5728 C++ \u4e2d\u67094\u79cd\u57fa\u672c\u7684\u53d8\u91cf\u521d\u59cb\u5316\u65b9\u6cd5\uff1a 1 2 3 4 int a ; // \u65e0\u521d\u59cb\u5316\u503c int b = 5 ; // \u5728\u7b49\u53f7\u540e\u653e\u7f6e\u521d\u59cb\u5316\u503c int c ( 6 ); // \u5728\u62ec\u53f7\u4e2d\u653e\u7f6e\u521d\u59cb\u5316\u503c int d { 7 }; // \u5728\u82b1\u62ec\u53f7\u4e2d\u653e\u7f6e\u521d\u59cb\u5316\u503c \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\u4e0a\u8ff0\u4ee3\u7801\u7247\u6bb5\u4e2d\u989d\u5916\u7684\u7a7a\u683c\uff08\u4f8b\u5982 int d{7}; \uff09\u3002\u662f\u5426\u4f7f\u7528\u8fd9\u4e9b\u7a7a\u683c\u6765\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u5c5e\u4e8e\u4e00\u79cd\u4e2a\u4eba\u504f\u597d\u3002 \u9ed8\u8ba4\u521d\u59cb\u5316 \u5728\u4e0d\u63d0\u4f9b\u4efb\u4f55\u521d\u59cb\u5316\u503c\u7684\u65f6\u5019\uff08\u4f8b\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u53d8\u91cf a \uff09\uff0c\u5c06\u8fdb\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4f1a\u5bfc\u81f4\u53d8\u91cf\u5b58\u653e\u4e00\u4e2a[[\u4e0d\u786e\u5b9a\u503c(indeterminate)]]\u3002\u76f8\u5173\u5185\u5bb9\u6211\u4eec\u4f1a\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002 \u62f7\u8d1d\u521d\u59cb\u5316 \u5982\u679c\u7b49\u53f7\u540e\u9762\u63d0\u4f9b\u4e86\u521d\u59cb\u5316\u503c\uff0c\u6b64\u65f6\u5c06\u8fdb\u884c\u62f7\u8d1d\u521d\u59cb\u5316\u3002\u62f7\u8d1d\u521d\u59cb\u5316\u7ee7\u627f\u81eaC\u8bed\u8a00\u3002 1 int width = 5 ; // copy initialization of value 5 into variable width \u548c\u62f7\u8d1d\u8d4b\u503c\u5f88\u7c7b\u4f3c\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u4f1a\u5c06\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u62f7\u8d1d\u5230\u5de6\u4fa7\u521b\u5efa\u7684\u53d8\u91cf\u3002 \u5bf9\u4e8e\u4e0a\u8ff0\u7b80\u5355\u7c7b\u578b int \u800c\u8a00\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u662f\u975e\u5e38\u9ad8\u6548\u7684\u3002\u7136\u800c\uff0c\u5728\u5904\u7406\u590d\u6742\u7c7b\u578b\u65f6\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u5219\u662f\u4f4e\u6548\u7684\u3002 \u76f4\u63a5\u521d\u59cb\u5316 \u5f53\u6211\u4eec\u5c06\u521d\u59cb\u5316\u503c\u7f6e\u4e8e\u62ec\u53f7\u5185\u65f6\uff0c\u5c06\u8fdb\u884c\u76f4\u63a5\u521d\u59cb\u5316\u3002 1 int width ( 5 ); // direct initialization of value 5 into variable width \u5bf9\u4e8e int \u8fd9\u6837\u7684\u7b80\u5355\u6570\u636e\u7c7b\u578b\u800c\u8a00\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u548c\u76f4\u63a5\u521d\u59cb\u5316\u672c\u8d28\u4e0a\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u5bf9\u4e8e\u590d\u6742\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u76f8\u5bf9\u4e8e\u62f7\u8d1d\u521d\u59cb\u5316\u5219\u66f4\u52a0\u9ad8\u6548\u3002 \u62ec\u53f7\u521d\u59cb\u5316 Brace initialization \u4e0d\u5e78\u7684\u662f\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u5e76\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u7c7b\u578b\uff08\u4f8b\u5982\u521d\u59cb\u5316\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5217\u8868\u7684\u5bf9\u8c61\uff09\u3002\u4e3a\u4e86\u63d0\u4f9b\u66f4\u4e3a\u4e00\u81f4\u7684\u521d\u59cb\u5316\u673a\u5236\uff0cC++ \u652f\u6301\u4e86\u57fa\u4e8e\u82b1\u62ec\u53f7\u7684\u62ec\u53f7\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u7edf\u4e00\u521d\u59cb\u5316\u6216\u5217\u8868\u521d\u59cb\u5316\uff09\u3002 \u62ec\u53f7\u521d\u59cb\u5316\u6709\u4e09\u79cd\u5f62\u5f0f\u3002 1 2 3 int width { 5 }; // \u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\uff08\u63a8\u8350\uff09 int height = { 6 }; // \u62f7\u8d1d\u62ec\u53f7\u521d\u59cb\u5316 int depth {}; // \u503c\u521d\u59cb\u5316\uff08\u8be6\u89c1\u4e0b\u8282\uff09 \u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\u548c\u62f7\u8d1d\u62ec\u53f7\u521d\u59cb\u5316\u51e0\u4e4e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u901a\u5e38\u66f4\u63a8\u8350\u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\u3002 \u62ec\u53f7\u521d\u59cb\u5316\u7684\u4e00\u4e2a\u989d\u5916\u4f18\u70b9\u662f\uff0c\u5b83\u4e0d\u5141\u8bb8[[\u7f29\u7a84\u8f6c\u6362(narrowing conversions)]]\u7684\u53d1\u751f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u62ec\u53f7\u521d\u59cb\u5316\u53bb\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u5982\u679c\u521d\u59cb\u5316\u503c\u5e76\u4e0d\u80fd\u88ab\u201d\u5b89\u5168\u7684\u201c\u5b58\u50a8\uff0c\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u544a\u8b66\u6216\u9519\u8bef\u3002\u4f8b\u5982\uff1a 1 int width { 4.5 }; // \u9519\u8bef: not all double values fit into an int \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u5305\u542b\u4e86\u5c0f\u6570\u90e8\u5206\u7684\u503c 4.5 \u8d4b\u503c\u7ed9\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff08\u53ea\u80fd\u5b58\u50a8\u6574\u6570\u90e8\u5206\uff09\u3002\u62f7\u8d1d\u548c\u76f4\u63a5\u521d\u59cb\u5316\u90fd\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u6b63\u6570\u90e8\u5206 4 \u88ab\u5b58\u50a8\u5728\u4e86\u53d8\u91cf width \u4e2d\u3002\u800c\u5bf9\u4e8e\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u62a5\u9519\uff08\u901a\u5e38\u6765\u8bb2\u8fd9\u662f\u4ef6\u597d\u4e8b\uff0c\u56e0\u4e3a\u5f88\u5c11\u6709\u6545\u610f\u4e22\u5931\u6570\u636e\u7cbe\u5ea6\u7684\u9700\u6c42\uff09\u3002\u4e0d\u4f1a\u9020\u6210\u6f5c\u5728\u6570\u636e\u4e22\u5931\u7684\u7c7b\u578b\u8f6c\u6362\u5219\u662f\u5141\u8bb8\u7684\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u53ea\u8981\u6761\u4ef6\u5141\u8bb8\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528\u62ec\u53f7\u521d\u59cb\u5316\u3002 [!INFO] Q&A Q\uff1bC++ \u63d0\u4f9b\u4e86\u62f7\u8d1d\u521d\u59cb\u5316\u3001\u76f4\u63a5\u521d\u59cb\u5316\u548c\u62ec\u53f7\u521d\u59cb\u5316\u3002\u90a3\u4e48\u662f\u5426\u5b58\u5728\u76f4\u63a5\u8d4b\u503c\u548c\u62ec\u53f7\u8d4b\u503c\u5462\uff1f A\uff1aC++ \u5e76\u4e0d\u652f\u6301\u76f4\u63a5\u8d4b\u503c\u548c\u62ec\u53f7\u8d4b\u503c\u8bed\u6cd5 \u503c\u521d\u59cb\u5316\u548c\u96f6\u521d\u59cb\u5316 \u5982\u679c\u4f7f\u7528\u7a7a\u7684\u82b1\u62ec\u53f7\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u5219\u4f1a\u8fdb\u884c\u503c\u521d\u59cb\u5316\uff0c\u503c\u521d\u59cb\u5316\u4f1a\u628a\u53d8\u91cf\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a0\uff08\u6216\u8005\u7a7a\uff0c\u5982\u679c\u7a7a\u503c\u5bf9\u4e8e\u7ed9\u5b9a\u7c7b\u578b\u662f\u5408\u9002\u7684\u521d\u503c\u7684\u8bdd\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u521d\u59cb\u5316\u4e3a\u51680\uff0c\u4e5f\u79f0\u4e4b\u4e3a\u96f6\u521d\u59cb\u5316\u3002 1 int width {}; // zero initialization to value 0 [!INFO] Q&A Q: \u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528 { 0 } \uff0c\u662f\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528 {}? \u5982\u679c\u4f60\u4f7f\u7528\u7684\u7684\u786e\u662f0\u8fd9\u4e2a\u5177\u4f53\u503c\uff0c\u90a3\u4e48\u5c31\u5e94\u5f53\u660e\u786e\u5730\u5c06\u5176\u521d\u59cb\u5316\u4e3a0 cpp int x { 0 }; // explicit initialization to value 0 std::cout << x; // we're using that zero value \u5982\u679c\u521d\u59cb\u5316\u7684\u503c\u53ea\u662f\u4e34\u65f6\u503c\u4e14\u5373\u5c06\u88ab\u66ff\u6362\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u503c\u521d\u59cb\u5316\u3002 cpp int x {}; // value initialization std::cin >> x; // we're immediately replacing that value \u4e60\u60ef\u6027\u5730\u521d\u59cb\u5316\u53d8\u91cf \u53d8\u91cf\u5728\u521b\u5efa\u65f6\uff0c\u5c31\u5e94\u8be5\u521d\u59cb\u5316\u3002\u4e5f\u8bb8\u4f60\u5c06\u6765\u4f1a\u9047\u5230\u67d0\u79cd\u7279\u4f8b\uff08\u4f8b\u5982\u67d0\u6bb5\u6027\u80fd\u53ca\u5176\u5173\u952e\u7684\u4ee3\u7801\u4e2d\u6240\u5305\u542b\u7684\u5927\u91cf\u53d8\u91cf\uff09\u5141\u8bb8\u4f60\u4e0d\u53bb\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u524d\u63d0\u662f\u4f60\u662f\u6709\u610f\u800c\u4e3a\u4e4b\u7684\uff08\u907f\u514d\u56e0\u4e3a\u5fd8\u8bb0\u4e86\u800c\u6ca1\u6709\u521d\u59cb\u5316\u53d8\u91cf\u7684\u8fd9\u79cd\u60c5\u51b5\uff09 \u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u7684\u8ba8\u8bba\uff0cBjarne Stroustrup (C++\u4e4b\u7236) \u548c Herb Sutter (C++ \u5927\u5e08) \u63d0\u4f9b\u4e86\u4ed6\u4eec\u7684\u89c1\u89e3\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \u8fd9\u91cc . \u6211\u4eec\u4f1a\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u5f53\u6211\u4eec\u8bd5\u56fe\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\u88ab\u201d\u6070\u5f53\u5b9a\u4e49\u201c\u7684\u53d8\u91cf\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 [!INFO] Q&A \u5728\u521b\u5efa\u53d8\u91cf\u65f6\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf \u5728\u4e0a\u4e00\u8282\u8bfe\u4e2d\u6211\u4eec\u63d0\u5230\uff0cC++\u652f\u6301\u4f7f\u7528\u4e00\u4e2a\u8bed\u53e5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff08\u901a\u8fc7\u9017\u53f7\u5206\u5272\u53d8\u91cf\u540d\uff09\uff1a 1 int a , b ; \u540c\u65f6\u6211\u4eec\u4e5f\u63d0\u5230\uff0c\u6700\u4f73\u5b9e\u8df5\u5176\u5b9e\u662f\u907f\u514d\u4f7f\u7528\u8be5\u8bed\u6cd5\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u6211\u4eec\u96be\u514d\u8fd8\u662f\u4f1a\u9047\u5230\u6b64\u7c7b\u98ce\u683c\u7684\u4ee3\u7801\uff0c\u5bf9\u5b83\u591a\u4e9b\u4e86\u89e3\u4e5f\u672a\u5c1d\u4e0d\u662f\u4ef6\u597d\u4e8b\u3002\u540c\u65f6\u4e5f\u80fd\u591f\u518d\u6b21\u63d0\u9192\u4f60\u907f\u514d\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\uff1a 1 2 3 int a = 5 , b = 6 ; // copy initialization int c ( 7 ), d ( 8 ); // direct initialization int e { 9 }, f { 10 }; // brace initialization (preferred) \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u5751\u3002\u5f53\u7a0b\u5e8f\u5458\u9519\u8bef\u5730\u4f7f\u7528\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\u5e76\u671f\u671b\u5b83\u80fd\u591f\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\u65f6\uff0c\u9519\u8bef\u4fbf\u53ef\u80fd\u53d1\u751f\uff1a 1 2 3 int a , b = 5 ; // wrong (a is not initialized!) int a = 5 , b = 5 ; // correct \u5728\u7b2c\u4e00\u884c\u8bed\u53e5\u4e2d\uff0c\u53d8\u91cf a \u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6b64\u53d1\u51fa\u63d0\u9192\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u3002\u5982\u679c\u7f16\u8bd1\u5668\u5ffd\u7565\u4e86\u8be5\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7a0b\u5e8f\u5c06\u53ef\u80fd\u56e0\u6b64\u95f4\u6b47\u6027\u5730\u5d29\u6e83\u6216\u8f93\u51fa\u9519\u8bef\u7ed3\u679c\u3002\u6211\u4eec\u7a0d\u540e\u5c31\u4f1a\u4ecb\u7ecd\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u4f1a\u5e26\u6765\u54ea\u4e9b\u95ee\u9898\u3002 \u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bb0\u5fc6\u5e76\u907f\u514d\u4e0a\u8ff0\u95ee\u9898\uff0c\u5982\u679c\u4f60\u8003\u8651\u4f7f\u7528\u76f4\u63a5\u521d\u59cb\u5316\u6216\u8005\u62ec\u53f7\u521d\u59cb\u5316\u7684\u573a\u666f\uff0c\u4e0a\u8ff0\u5199\u6cd5\u663e\u800c\u6613\u89c1\u662f\u6709\u95ee\u9898\u7684\uff1a 1 2 int a , b ( 5 ); int c , d { 5 }; \u770b\u4e0a\u53bb\u53ef\u80fd\u7a0d\u5fae\u6e05\u695a\u4e9b\uff0c5\u88ab\u7528\u4e8e\u521d\u59cb\u5316 b \u6216\u8005 d \uff0c\u800c\u4e0d\u662f a \u6216\u8005 c","title":"1.4 \u53d8\u91cf\u8d4b\u503c\u548c\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#14","text":"\u5728\u4e0a\u4e00\u8282\u8bfe [[1.3 \u5bf9\u8c61\u548c\u53d8\u91cf]] \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u3002\u5728\u8fd9\u4e00\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4e3a\u53d8\u91cf\u8d4b\u503c\u5e76\u4f7f\u7528\u5b83\u5b58\u50a8\u7684\u503c\u3002 \u9996\u5148\u56de\u5fc6\u4e00\u4e0b\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u4e3a\u4e00\u4e2a\u540d\u4e3a x \u7684\u6574\u578b\u53d8\u91cf\u5206\u914d\u4e86\u5185\u5b58\uff0c\u7136\u540e\u7c7b\u4f3c\u5730\uff0c\u53c8\u521b\u5efa\u4e86\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5206\u522b\u53eb\u505a y \u548c z\uff1a 1 2 int x ; // define an integer variable named x int y , z ; // define two integer variables, named y and z","title":"1.4 \u53d8\u91cf\u8d4b\u503c\u548c\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_1","text":"\u53d8\u91cf\u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26 = \u4e3a\u5176\u8d4b\u503c\uff08\u5728\u53e6\u5916\u4e00\u4e2a\u5355\u72ec\u7684\u8bed\u53e5\u4e2d\uff09\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e3a\u62f7\u8d1d\u8d4b\u503c\uff08\u6216\u8d4b\u503c\uff09\u3002 1 2 3 4 int width ; // define an integer variable named width width = 5 ; // copy assignment of value 5 into variable width // variable width now has value 5 \u62f7\u8d1d\u8d4b\u503c\u540d\u5b57\u7684\u6765\u5386\uff0c\u6e90\u4e8e\u4e0a\u8ff0\u64cd\u4f5c\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u4fa7\u7684\u503c\u62f7\u8d1d\u540e\u8d4b\u503c\u7ed9\u4e86\u5de6\u4fa7\u7684\u53d8\u91cf\u3002 = \u79f0\u4e3a\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5148\u540e\u4e24\u6b21\u4f7f\u7528\u4e86\u8d4b\u503c\u64cd\u4f5c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int main () { int width ; width = 5 ; // copy assignment of value 5 into variable width // variable width now has value 5 width = 7 ; // change value stored in variable width to 7 // variable width now has value 7 return 0 ; } \u5728\u6211\u4eec\u628a 7 \u8d4b\u503c\u7ed9\u53d8\u91cf width \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u7684\u503c\uff085\uff09\u5c31\u88ab\u8986\u76d6\u6389\u4e86\u3002\u4e00\u822c\u7684\u53d8\u91cf\u53ea\u80fd\u591f\u5b58\u50a8\u4e00\u4e2a\u503c\u3002 [!Warning] \u6ce8\u610f \u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u72af\u7684\u9519\u8bef\u4e4b\u4e00\u5c31\u662f\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26( = )\u548c\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26( == )\u5f04\u6df7\u6dc6\u3002\u8d4b\u503c\u8fd0\u7b97\u7b26\u7528\u4e8e\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u800c\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26\u5219\u7528\u4e8e\u6821\u9a8c\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002","title":"\u53d8\u91cf\u8d4b\u503c"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_2","text":"\u4e0a\u8ff0\u8d4b\u503c\u8fc7\u7a0b\u7684\u7f3a\u70b9\u4e4b\u4e00\uff0c\u662f\u5b83\u9700\u8981\u4e24\u6761\u8bed\u53e5\u624d\u80fd\u5b8c\u6210\uff1a\u9996\u5148\u5b9a\u4e49\u53d8\u91cf\uff0c\u7136\u540e\u4e3a\u53d8\u91cf\u8d4b\u503c\u3002 \u8fd9\u4e24\u6b65\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684\u3002\u5728\u5b9a\u4e49\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u53d8\u91cf\u8bbe\u7f6e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u521d\u59cb\u5316\u3002\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf\u7684\u8fd9\u4e2a\u503c\uff0c\u79f0\u4e3a[[\u521d\u59cb\u5316\u503c(initializer)]]\u3002 C++ \u4e2d\u7684\u521d\u59cb\u5316\u662f\u51fa\u5947\u7684\u590d\u6742\uff0c\u8fd9\u91cc\u5411\u4f60\u5c55\u793a\u4e00\u4e2a\u7b80\u5316\u540e\u7684\u7248\u672c\u3002 \u5728 C++ \u4e2d\u67094\u79cd\u57fa\u672c\u7684\u53d8\u91cf\u521d\u59cb\u5316\u65b9\u6cd5\uff1a 1 2 3 4 int a ; // \u65e0\u521d\u59cb\u5316\u503c int b = 5 ; // \u5728\u7b49\u53f7\u540e\u653e\u7f6e\u521d\u59cb\u5316\u503c int c ( 6 ); // \u5728\u62ec\u53f7\u4e2d\u653e\u7f6e\u521d\u59cb\u5316\u503c int d { 7 }; // \u5728\u82b1\u62ec\u53f7\u4e2d\u653e\u7f6e\u521d\u59cb\u5316\u503c \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\u4e0a\u8ff0\u4ee3\u7801\u7247\u6bb5\u4e2d\u989d\u5916\u7684\u7a7a\u683c\uff08\u4f8b\u5982 int d{7}; \uff09\u3002\u662f\u5426\u4f7f\u7528\u8fd9\u4e9b\u7a7a\u683c\u6765\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u5c5e\u4e8e\u4e00\u79cd\u4e2a\u4eba\u504f\u597d\u3002","title":"\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_3","text":"\u5728\u4e0d\u63d0\u4f9b\u4efb\u4f55\u521d\u59cb\u5316\u503c\u7684\u65f6\u5019\uff08\u4f8b\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u53d8\u91cf a \uff09\uff0c\u5c06\u8fdb\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4f1a\u5bfc\u81f4\u53d8\u91cf\u5b58\u653e\u4e00\u4e2a[[\u4e0d\u786e\u5b9a\u503c(indeterminate)]]\u3002\u76f8\u5173\u5185\u5bb9\u6211\u4eec\u4f1a\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u9ed8\u8ba4\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_4","text":"\u5982\u679c\u7b49\u53f7\u540e\u9762\u63d0\u4f9b\u4e86\u521d\u59cb\u5316\u503c\uff0c\u6b64\u65f6\u5c06\u8fdb\u884c\u62f7\u8d1d\u521d\u59cb\u5316\u3002\u62f7\u8d1d\u521d\u59cb\u5316\u7ee7\u627f\u81eaC\u8bed\u8a00\u3002 1 int width = 5 ; // copy initialization of value 5 into variable width \u548c\u62f7\u8d1d\u8d4b\u503c\u5f88\u7c7b\u4f3c\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u4f1a\u5c06\u7b49\u53f7\u53f3\u8fb9\u7684\u503c\u62f7\u8d1d\u5230\u5de6\u4fa7\u521b\u5efa\u7684\u53d8\u91cf\u3002 \u5bf9\u4e8e\u4e0a\u8ff0\u7b80\u5355\u7c7b\u578b int \u800c\u8a00\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u662f\u975e\u5e38\u9ad8\u6548\u7684\u3002\u7136\u800c\uff0c\u5728\u5904\u7406\u590d\u6742\u7c7b\u578b\u65f6\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u5219\u662f\u4f4e\u6548\u7684\u3002","title":"\u62f7\u8d1d\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_5","text":"\u5f53\u6211\u4eec\u5c06\u521d\u59cb\u5316\u503c\u7f6e\u4e8e\u62ec\u53f7\u5185\u65f6\uff0c\u5c06\u8fdb\u884c\u76f4\u63a5\u521d\u59cb\u5316\u3002 1 int width ( 5 ); // direct initialization of value 5 into variable width \u5bf9\u4e8e int \u8fd9\u6837\u7684\u7b80\u5355\u6570\u636e\u7c7b\u578b\u800c\u8a00\uff0c\u62f7\u8d1d\u521d\u59cb\u5316\u548c\u76f4\u63a5\u521d\u59cb\u5316\u672c\u8d28\u4e0a\u51e0\u4e4e\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u5bf9\u4e8e\u590d\u6742\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u76f8\u5bf9\u4e8e\u62f7\u8d1d\u521d\u59cb\u5316\u5219\u66f4\u52a0\u9ad8\u6548\u3002","title":"\u76f4\u63a5\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#brace-initialization","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u5e76\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u7c7b\u578b\uff08\u4f8b\u5982\u521d\u59cb\u5316\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5217\u8868\u7684\u5bf9\u8c61\uff09\u3002\u4e3a\u4e86\u63d0\u4f9b\u66f4\u4e3a\u4e00\u81f4\u7684\u521d\u59cb\u5316\u673a\u5236\uff0cC++ \u652f\u6301\u4e86\u57fa\u4e8e\u82b1\u62ec\u53f7\u7684\u62ec\u53f7\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u7edf\u4e00\u521d\u59cb\u5316\u6216\u5217\u8868\u521d\u59cb\u5316\uff09\u3002 \u62ec\u53f7\u521d\u59cb\u5316\u6709\u4e09\u79cd\u5f62\u5f0f\u3002 1 2 3 int width { 5 }; // \u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\uff08\u63a8\u8350\uff09 int height = { 6 }; // \u62f7\u8d1d\u62ec\u53f7\u521d\u59cb\u5316 int depth {}; // \u503c\u521d\u59cb\u5316\uff08\u8be6\u89c1\u4e0b\u8282\uff09 \u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\u548c\u62f7\u8d1d\u62ec\u53f7\u521d\u59cb\u5316\u51e0\u4e4e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u4f46\u901a\u5e38\u66f4\u63a8\u8350\u76f4\u63a5\u62ec\u53f7\u521d\u59cb\u5316\u3002 \u62ec\u53f7\u521d\u59cb\u5316\u7684\u4e00\u4e2a\u989d\u5916\u4f18\u70b9\u662f\uff0c\u5b83\u4e0d\u5141\u8bb8[[\u7f29\u7a84\u8f6c\u6362(narrowing conversions)]]\u7684\u53d1\u751f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u62ec\u53f7\u521d\u59cb\u5316\u53bb\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u5982\u679c\u521d\u59cb\u5316\u503c\u5e76\u4e0d\u80fd\u88ab\u201d\u5b89\u5168\u7684\u201c\u5b58\u50a8\uff0c\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u544a\u8b66\u6216\u9519\u8bef\u3002\u4f8b\u5982\uff1a 1 int width { 4.5 }; // \u9519\u8bef: not all double values fit into an int \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u5305\u542b\u4e86\u5c0f\u6570\u90e8\u5206\u7684\u503c 4.5 \u8d4b\u503c\u7ed9\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff08\u53ea\u80fd\u5b58\u50a8\u6574\u6570\u90e8\u5206\uff09\u3002\u62f7\u8d1d\u548c\u76f4\u63a5\u521d\u59cb\u5316\u90fd\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u6b63\u6570\u90e8\u5206 4 \u88ab\u5b58\u50a8\u5728\u4e86\u53d8\u91cf width \u4e2d\u3002\u800c\u5bf9\u4e8e\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u62a5\u9519\uff08\u901a\u5e38\u6765\u8bb2\u8fd9\u662f\u4ef6\u597d\u4e8b\uff0c\u56e0\u4e3a\u5f88\u5c11\u6709\u6545\u610f\u4e22\u5931\u6570\u636e\u7cbe\u5ea6\u7684\u9700\u6c42\uff09\u3002\u4e0d\u4f1a\u9020\u6210\u6f5c\u5728\u6570\u636e\u4e22\u5931\u7684\u7c7b\u578b\u8f6c\u6362\u5219\u662f\u5141\u8bb8\u7684\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u53ea\u8981\u6761\u4ef6\u5141\u8bb8\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528\u62ec\u53f7\u521d\u59cb\u5316\u3002 [!INFO] Q&A Q\uff1bC++ \u63d0\u4f9b\u4e86\u62f7\u8d1d\u521d\u59cb\u5316\u3001\u76f4\u63a5\u521d\u59cb\u5316\u548c\u62ec\u53f7\u521d\u59cb\u5316\u3002\u90a3\u4e48\u662f\u5426\u5b58\u5728\u76f4\u63a5\u8d4b\u503c\u548c\u62ec\u53f7\u8d4b\u503c\u5462\uff1f A\uff1aC++ \u5e76\u4e0d\u652f\u6301\u76f4\u63a5\u8d4b\u503c\u548c\u62ec\u53f7\u8d4b\u503c\u8bed\u6cd5","title":"\u62ec\u53f7\u521d\u59cb\u5316 Brace initialization"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_6","text":"\u5982\u679c\u4f7f\u7528\u7a7a\u7684\u82b1\u62ec\u53f7\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u5219\u4f1a\u8fdb\u884c\u503c\u521d\u59cb\u5316\uff0c\u503c\u521d\u59cb\u5316\u4f1a\u628a\u53d8\u91cf\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a0\uff08\u6216\u8005\u7a7a\uff0c\u5982\u679c\u7a7a\u503c\u5bf9\u4e8e\u7ed9\u5b9a\u7c7b\u578b\u662f\u5408\u9002\u7684\u521d\u503c\u7684\u8bdd\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u521d\u59cb\u5316\u4e3a\u51680\uff0c\u4e5f\u79f0\u4e4b\u4e3a\u96f6\u521d\u59cb\u5316\u3002 1 int width {}; // zero initialization to value 0 [!INFO] Q&A Q: \u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528 { 0 } \uff0c\u662f\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528 {}? \u5982\u679c\u4f60\u4f7f\u7528\u7684\u7684\u786e\u662f0\u8fd9\u4e2a\u5177\u4f53\u503c\uff0c\u90a3\u4e48\u5c31\u5e94\u5f53\u660e\u786e\u5730\u5c06\u5176\u521d\u59cb\u5316\u4e3a0 cpp int x { 0 }; // explicit initialization to value 0 std::cout << x; // we're using that zero value \u5982\u679c\u521d\u59cb\u5316\u7684\u503c\u53ea\u662f\u4e34\u65f6\u503c\u4e14\u5373\u5c06\u88ab\u66ff\u6362\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u503c\u521d\u59cb\u5316\u3002 cpp int x {}; // value initialization std::cin >> x; // we're immediately replacing that value","title":"\u503c\u521d\u59cb\u5316\u548c\u96f6\u521d\u59cb\u5316"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_7","text":"\u53d8\u91cf\u5728\u521b\u5efa\u65f6\uff0c\u5c31\u5e94\u8be5\u521d\u59cb\u5316\u3002\u4e5f\u8bb8\u4f60\u5c06\u6765\u4f1a\u9047\u5230\u67d0\u79cd\u7279\u4f8b\uff08\u4f8b\u5982\u67d0\u6bb5\u6027\u80fd\u53ca\u5176\u5173\u952e\u7684\u4ee3\u7801\u4e2d\u6240\u5305\u542b\u7684\u5927\u91cf\u53d8\u91cf\uff09\u5141\u8bb8\u4f60\u4e0d\u53bb\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u524d\u63d0\u662f\u4f60\u662f\u6709\u610f\u800c\u4e3a\u4e4b\u7684\uff08\u907f\u514d\u56e0\u4e3a\u5fd8\u8bb0\u4e86\u800c\u6ca1\u6709\u521d\u59cb\u5316\u53d8\u91cf\u7684\u8fd9\u79cd\u60c5\u51b5\uff09 \u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u7684\u8ba8\u8bba\uff0cBjarne Stroustrup (C++\u4e4b\u7236) \u548c Herb Sutter (C++ \u5927\u5e08) \u63d0\u4f9b\u4e86\u4ed6\u4eec\u7684\u89c1\u89e3\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 \u8fd9\u91cc . \u6211\u4eec\u4f1a\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u5f53\u6211\u4eec\u8bd5\u56fe\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\u88ab\u201d\u6070\u5f53\u5b9a\u4e49\u201c\u7684\u53d8\u91cf\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 [!INFO] Q&A \u5728\u521b\u5efa\u53d8\u91cf\u65f6\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\u3002","title":"\u4e60\u60ef\u6027\u5730\u521d\u59cb\u5316\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.04%20%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/#_8","text":"\u5728\u4e0a\u4e00\u8282\u8bfe\u4e2d\u6211\u4eec\u63d0\u5230\uff0cC++\u652f\u6301\u4f7f\u7528\u4e00\u4e2a\u8bed\u53e5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff08\u901a\u8fc7\u9017\u53f7\u5206\u5272\u53d8\u91cf\u540d\uff09\uff1a 1 int a , b ; \u540c\u65f6\u6211\u4eec\u4e5f\u63d0\u5230\uff0c\u6700\u4f73\u5b9e\u8df5\u5176\u5b9e\u662f\u907f\u514d\u4f7f\u7528\u8be5\u8bed\u6cd5\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u6211\u4eec\u96be\u514d\u8fd8\u662f\u4f1a\u9047\u5230\u6b64\u7c7b\u98ce\u683c\u7684\u4ee3\u7801\uff0c\u5bf9\u5b83\u591a\u4e9b\u4e86\u89e3\u4e5f\u672a\u5c1d\u4e0d\u662f\u4ef6\u597d\u4e8b\u3002\u540c\u65f6\u4e5f\u80fd\u591f\u518d\u6b21\u63d0\u9192\u4f60\u907f\u514d\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\uff1a 1 2 3 int a = 5 , b = 6 ; // copy initialization int c ( 7 ), d ( 8 ); // direct initialization int e { 9 }, f { 10 }; // brace initialization (preferred) \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u5751\u3002\u5f53\u7a0b\u5e8f\u5458\u9519\u8bef\u5730\u4f7f\u7528\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\u5e76\u671f\u671b\u5b83\u80fd\u591f\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\u65f6\uff0c\u9519\u8bef\u4fbf\u53ef\u80fd\u53d1\u751f\uff1a 1 2 3 int a , b = 5 ; // wrong (a is not initialized!) int a = 5 , b = 5 ; // correct \u5728\u7b2c\u4e00\u884c\u8bed\u53e5\u4e2d\uff0c\u53d8\u91cf a \u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5bf9\u6b64\u53d1\u51fa\u63d0\u9192\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u3002\u5982\u679c\u7f16\u8bd1\u5668\u5ffd\u7565\u4e86\u8be5\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7a0b\u5e8f\u5c06\u53ef\u80fd\u56e0\u6b64\u95f4\u6b47\u6027\u5730\u5d29\u6e83\u6216\u8f93\u51fa\u9519\u8bef\u7ed3\u679c\u3002\u6211\u4eec\u7a0d\u540e\u5c31\u4f1a\u4ecb\u7ecd\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u4f1a\u5e26\u6765\u54ea\u4e9b\u95ee\u9898\u3002 \u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bb0\u5fc6\u5e76\u907f\u514d\u4e0a\u8ff0\u95ee\u9898\uff0c\u5982\u679c\u4f60\u8003\u8651\u4f7f\u7528\u76f4\u63a5\u521d\u59cb\u5316\u6216\u8005\u62ec\u53f7\u521d\u59cb\u5316\u7684\u573a\u666f\uff0c\u4e0a\u8ff0\u5199\u6cd5\u663e\u800c\u6613\u89c1\u662f\u6709\u95ee\u9898\u7684\uff1a 1 2 int a , b ( 5 ); int c , d { 5 }; \u770b\u4e0a\u53bb\u53ef\u80fd\u7a0d\u5fae\u6e05\u695a\u4e9b\uff0c5\u88ab\u7528\u4e8e\u521d\u59cb\u5316 b \u6216\u8005 d \uff0c\u800c\u4e0d\u662f a \u6216\u8005 c","title":"\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/","text":"1.5 iostream \u7b80\u4ecb\uff1a cout\uff0ccin \u548c endl \u672c\u8282\u5c06\u91cd\u70b9\u4ecb\u7ecd std::cout \u3002\u6211\u4eec\u5728 Hello world! \u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u4f7f\u7528\u5b83\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u8fc7\u6587\u672c Hello world! \u3002\u6211\u4eec\u8fd8\u5c06\u4ecb\u7ecd\u5982\u4f55\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff0c\u4f7f\u7a0b\u5e8f\u5177\u5907\u4e0e\u7528\u6237\u4ea4\u4e92\u7684\u80fd\u529b\u3002 \u8f93\u5165\u8f93\u51fa\u5e93 \u8f93\u5165\u8f93\u51fa\u5e93 (io \u5e93) \u662f C++ \u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5904\u7406\u57fa\u672c\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u6211\u4eec\u4f1a\u4f7f\u7528\u8be5\u5e93\u63d0\u4f9b\u7684\u529f\u80fd\u4ece\u952e\u76d8\u83b7\u53d6\u8f93\u5165\u5e76\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u6570\u636e\u3002 iostream \u4e2d\u7684io \u6307\u4ee3\u7684\u662f\u8f93\u5165\u8f93\u51fa\uff08 input/output \uff09\u3002 \u4e3a\u4e86\u4f7f\u7528 iostream \u5e93\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u5728\u4efb\u4f55\u9700\u8981\u4f7f\u7528\u8be5\u5e93\u7684\u6e90\u6587\u4ef6\u7684\u9876\u90e8\u5305\u542b iostream \u7684\u5934\u6587\u4ef6\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 #include <iostream> // rest of code that uses iostream functionality here std::cout iostream \u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u53d8\u91cf\u4f9b\u6211\u4eec\u4f7f\u7528\uff0c\u5176\u4e2d\u6700\u6709\u7528\u7684\u5f53\u5c5e std::cout \uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5411\u63a7\u5236\u53f0\u6253\u5370\u6587\u672c\uff0c cout \u4ee3\u8868\u7684\u542b\u4e49\u5c31\u662f\u5b57\u7b26\u8f93\u51fa\uff08character output\uff09\u3002 \u63d0\u9192\u4e00\u4e0b\uff0c\u4e0b\u9762\u65e2\u662f\u4e4b\u524d\u7684 Hello world \u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << \"Hello world!\" ; // print Hello world! to console return 0 ; } \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c iostream \u5df2\u7ecf\u88ab\u5305\u542b\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee _std::cout_ \u3002\u5728\u4e3b\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 _std::cout_ \uff0c\u5e76\u914d\u5408\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5c06\u6587\u672c Hello world!\u53d1\u9001\u5230\u63a7\u5236\u53f0\u5e76\u6253\u5370\u51fa\u6765\u3002 _std::cout_ \u4e0d\u4ec5\u53ef\u4ee5\u6253\u5370\u6587\u672c\uff0c\u8fd8\u53ef\u4ee5\u6253\u5370\u6570\u5b57\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << 4 ; // print 4 to console return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 4 \u5b83\u8fd8\u53ef\u4ee5\u7528\u6765\u6253\u5370\u53d8\u91cf\u7684\u503c\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { int x { 5 }; // define integer variable x, initialized with value 5 std :: cout << x ; // print value of x (5) to console return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 5 \u4e3a\u4e86\u5728\u4e00\u884c\u4e2d\u6253\u5370\u591a\u4e2a\u5185\u5bb9\uff0c\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\u63d2\u5165\u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u8fde\u63a5\u8d77\u6765\u5e76\u8f93\u51fa\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 #include <iostream> // for std::cout int main () { std :: cout << \"Hello\" << \" world!\" ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 Hello world! \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\u540c\u65f6\u6253\u5370\u4e86\u6587\u672c\u548c\u53d8\u91cf\u503c\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 x is equal to: 5 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u4f1a\u5728[[2.9 \u540d\u79f0\u51b2\u7a81\u548c\u547d\u540d\u7a7a\u95f4\u7b80\u4ecb]] \u8ba8\u8bba std:: \u524d\u7f00\u7684\u4f5c\u7528 std::endl \u4f60\u89c9\u5f97\u4e0b\u9762\u7684\u4ee3\u7801\u6253\u5370\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u5462\uff1f 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << \"Hi!\" ; std :: cout << \"My name is Alex.\" ; return 0 ; } \u770b\u5230\u4e0b\u9762\u7684\u7ed3\u679c\u4f60\u4f1a\u89c9\u5f97\u5403\u60ca\u5417\uff1a 1 Hi!My name is Alex. \u663e\u7136\uff0c\u5c06\u4e00\u6761\u8bed\u53e5\u62c6\u5206\u4e3a\u4e24\u884c\uff0c\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u5206\u884c\u6253\u5370\uff0c\u5219\u5fc5\u987b\u8981\u544a\u77e5\u63a7\u5236\u53f0\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 \u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528 std::endl \u3002\u5f53\u4f7f\u7528 std::cout \u8fdb\u884c\u8f93\u51fa\u65f6\uff0c std::endl \u4f1a\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\uff08\u4fc3\u4f7f\u5149\u6807\u88ab\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7684\u5f00\u5934\uff09\u3002\u56e0\u6b64\uff0c endl \u8868\u793a\u7684\u662f\u7ed3\u675f\u8be5\u884c\uff08end line\uff09\u3002 \u4f8b\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 #include <iostream> // for std::cout and std::endl int main () { std :: cout << \"Hi!\" << std :: endl ; // std::endl will cause the cursor to move to the next line of the console std :: cout << \"My name is Alex.\" << std :: endl ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 2 Hi! My name is Alex. [!TIP] \u5c0f\u8d34\u58eb \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7b2c\u4e8c\u4e2a std::endl \u4ece\u6280\u672f\u4e0a\u8bb2\u5e76\u65e0\u5fc5\u8981\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b8c\u8fd9\u884c\u4ee3\u7801\u540e\u7a0b\u5e8f\u4f1a\u7acb\u5373\u505c\u6b62\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e48\u505a\u5176\u5b9e\u8fd8\u6709\u4e24\u4e2a\u6709\u7528\u7684\u76ee\u7684\uff1a\u9996\u5148\uff0c\u5b83\u53ef\u4ee5\u8868\u660e\u8be5\u884c\u7684\u5185\u5bb9\u5df2\u7ecf\u88ab\u201d\u5b8c\u6574\u8f93\u51fa\u201c \uff08\u4e0e\u4e4b\u76f8\u5bf9\u7684\u662f\u90e8\u5206\u8f93\u51fa\uff0c\u5373\u540e\u7eed\u4ee3\u7801\u4e2d\u8fd8\u6709\u9700\u8981\u8f93\u51fa\u7684\u90e8\u5206\uff09\u3002\u5176\u6b21\uff0c\u5982\u679c\u5c06\u6765\u6211\u4eec\u5728\u540e\u9762\u6dfb\u52a0\u5176\u4ed6\u989d\u5916\u7684\u8f93\u51fa\uff0c\u5c31\u4e0d\u9700\u8981\u4fee\u6539\u5df2\u6709\u7684\u4ee3\u7801\u4e86\u3002\u56e0\u6b64\u4e0d\u59a8\u52a0\u4e0a\u5b83\u3002 std::endl vs \u2018\\n\u2019 \u4f7f\u7528 std::endl \u6362\u884c\u7684\u6548\u7387\u7a0d\u5fae\u6709\u70b9\u4f4e\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u9700\u8981\u5b8c\u6210\u4e24\u4ef6\u4e8b\uff1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u7136\u540e\u786e\u4fdd\u8f93\u51fa\u7ed3\u679c\u9a6c\u4e0a\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff08\u79f0\u4e3a\u5237\u65b0\u8f93\u51fa\uff09\u3002\u5f53\u4f7f\u7528 std::cout \u8fdb\u884c\u8f93\u51fa\u65f6\uff0c std::cout \u672c\u6765\u5c31\u4f1a\u5237\u65b0\u8f93\u51fa\uff08\u5373\u4f7f\u6ca1\u6709\u5237\u65b0\uff0c\u901a\u5e38\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u4ec0\u4e48\u95ee\u9898\uff09\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 std::endl \u6765\u5237\u65b0\u8f93\u51fa\u5c31\u6709\u4e9b\u591a\u4f59\u4e86\u3002 \u56e0\u6b64\uff0c\u4f7f\u7528\u6362\u884c\u5b57\u7b26( \\n )\u4e00\u822c\u6765\u8bb2\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002\u2018\\n\u2019 \u7b26\u53f7\u4f1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u4f1a\u8bf7\u6c42\u5237\u65b0\uff0c\u56e0\u6b64\u5728\u65e0\u9700\u7279\u522b\u5237\u65b0\u65f6\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u2018\\n\u2019 \u5b57\u7b26\u8fd8\u66f4\u6613\u8bfb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u66f4\u7b80\u6d01\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5d4c\u5165\u5728\u5df2\u6709\u7684\u6587\u672c\u4e2d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c55\u73b0\u4e86\u4f7f\u7528 \u2018\\n\u2019 \u7684\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x << '\\n' ; // Using '\\n' standalone std :: cout << \"And that's all, folks! \\n \" ; // Using '\\n' embedded into a double-quoted piece of text (note: no single quotes when used this way) return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 2 x is equal to: 5 And that's all, folks! \u6ce8\u610f\uff0c\u5728\u5355\u72ec\u4f7f\u7528\u6362\u884c\u7b26 \u2018\\n\u2019 \u7684\u65f6\u5019\uff0c\u5355\u5f15\u53f7\u662f\u5fc5\u987b\u7684\u3002\u5f53\u5d4c\u5165\u5728\u5176\u4ed6\u5df2\u7ecf\u88ab\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u6587\u672c\u4e2d\u65f6\uff0c\u5219\u65e0\u9700\u518d\u4f7f\u7528\u5355\u5f15\u53f7\u3002 \u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u66f4\u8be6\u7ec6\u7684\u4ecb\u7ecd\u6362\u884c\u7b26 \u2018\\n\u2019 [[4.11 -- Chars]]\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5728\u8f93\u51fa\u65f6\u4f18\u5148\u4f7f\u7528 \u2018\\n\u2019 \u800c\u4e0d\u662f std::endl [!Warning] \u6ce8\u610f \u2018\\n\u2019 \u4f7f\u7528\u7684\u662f\u53cd\u659c\u6760\uff08\u548c\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u4e00\u6837\uff09\uff0c\u800c\u4e0d\u662f\u659c\u6760\u3002\u4f7f\u7528\u659c\u6760\uff08\u4f8b\u5982 '/n'\uff09\u53ef\u80fd\u4f1a\u5e26\u6765\u65e0\u6cd5\u9884\u6599\u7684\u7ed3\u679c\u3002 std::cin std::cin \u662f isstream \u4e2d\u9884\u5b9a\u4e49\u7684\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u3002\u4e0e\u7528\u4e8e\u8f93\u51fa\u7684 std::cout \u4e0d\u540c\uff0c std::cin (\u8868\u793a\u5b57\u7b26\u8f93\u5165\uff0c\u201ccharacter input\u201d) \u914d\u5408\u63d0\u53d6\u8fd0\u7b97\u7b26( >> )\uff0c\u53ef\u4ee5\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7136\uff0c\u8f93\u5165\u7684\u7ed3\u679c\u5fc5\u987b\u5b58\u653e\u5728\u53d8\u91cf\u4e2d\u624d\u53ef\u4ee5\u88ab\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> // for std::cout and std::cin int main () { std :: cout << \"Enter a number: \" ; // ask user for a number int x { }; // define variable x to hold user input (and zero-initialize it) std :: cin >> x ; // get number from keyboard and store it in variable x std :: cout << \"You entered \" << x << '\\n' ; return 0 ; } \u8bf7\u5c1d\u8bd5\u81ea\u884c\u7f16\u8bd1\u548c\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\u3002\u5728\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u7b2c\u4e94\u884c\u4ee3\u7801\u4f1a\u6253\u5370\u201cEnter a number: \u201c\uff0c\u5f53\u6267\u884c\u5230\u7b2c\u516b\u884c\u662f\uff0c\u7a0b\u5e8f\u4f1a\u7b49\u5f85\u7528\u6237\u8f93\u5165\u3002\u5f53\u4f60\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff08\u5e76\u6309\u4e0b\u56de\u8f66\uff09\u540e\uff0c\u5b83\u4f1a\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf x\u3002\u6700\u540e\uff0c\u7b2c\u5341\u884c\u4ee3\u7801\u4f1a\u6253\u5370 \u201cYou entered \u201d \u4ee5\u53ca\u4f60\u521a\u624d\u8f93\u5165\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff1a 1 2 Enter a number: 4 You entered 4 \u8fd9\u79cd\u65b9\u5f0f\u80fd\u591f\u6bd4\u8f83\u7b80\u5355\u5730\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u5185\u5bb9\u4e2d\u5927\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\u6ce8\u610f\uff0c\u5728\u83b7\u53d6\u8f93\u5165\u65f6\u5e76\u4e0d\u9700\u8981\u6362\u884c\u7b26\uff0c\u56e0\u4e3a\u7528\u6237\u4f1a\u81ea\u884c\u6309\u4e0b\u56de\u8f66\u952e\uff0c\u6b64\u65f6\u5149\u6807\u4fbf\u4f1a\u88ab\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 \u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u754c\u9762\u5728\u8f93\u5165\u6570\u5b57\u540e\u9a6c\u4e0a\u5c31\u5173\u95ed\u4e86\uff0c\u8bf7\u53c2\u8003 0.8 -- A few common C++ problems \u6765\u83b7\u53d6\u5e2e\u52a9\u3002 \u4e0e\u8f93\u51fa\u7c7b\u4f3c\uff0c\u4e00\u884c\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5b8c\u6210\u591a\u4e2a\u503c\u7684\u8f93\u5165\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> // for std::cout and std::cin int main () { std :: cout << \"Enter two numbers separated by a space: \" ; int x { }; // define variable x to hold user input (and zero-initialize it) int y { }; // define variable y to hold user input (and zero-initialize it) std :: cin >> x >> y ; // get two numbers and store in variable x and y respectively std :: cout << \"You entered \" << x << \" and \" << y << '\\n' ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 Enter two numbers separated by a space: 5 6 You entered 5 and 6 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5c3d\u7ba1\uff0c\u5173\u4e8e\u4e00\u4e2a\u53d8\u91cf\u5728\u7528\u4e8e\u63a5\u6536\u7528\u6237\u8f93\u5165\uff08\u4f8b\u5982\u901a\u8fc7 std::cin \uff09\u7684\u6570\u636e\u4e4b\u524d\uff0c\u662f\u5426\u5e94\u8be5\u8fdb\u884c\u521d\u59cb\u5316\u8fd9\u4e2a\u95ee\u9898\u6709\u5f88\u591a\u4e89\u8bba\uff0c\u6bd5\u7adf\u7528\u6237\u7684\u8f93\u5165\u4f1a\u8986\u76d6\u521d\u59cb\u5316\u7684\u503c\u3002\u4e0e\u6211\u4eec\u4e4b\u524d\u7684\u5efa\u8bae\u7c7b\u4f3c\uff0c\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8981\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u6700\u4f73\u5b9e\u8df5\u4ecd\u7136\u662f\uff0c\u53d8\u91cf\u8981\u5148\u8fdb\u884c\u521d\u59cb\u5316\u518d\u7528\u4e8e\u63a5\u6536\u7528\u6237\u8f93\u5165\u3002 \u6211\u4eec\u4f1a\u5728 [[7.16 -- std::cin and handling invalid input]] \u4e2d\u8ba8\u8bba std::cin \u5982\u4f55\u5e94\u5bf9\u975e\u6cd5\u8f93\u5165\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb C++ \u7684\u8f93\u5165\u8f93\u51fa\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u79cd\u65e0\u9700\u6309\u4e0b\u56de\u8f66\u5c31\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u7ed3\u679c\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u6765\u5b8c\u6210\u3002\u5982\u679c\u662f\u5f00\u53d1\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u63a8\u8350\u5c1d\u8bd5 pdcurses \u8fd9\u4e2a\u5e93\u3002\u53e6\u5916\uff0c\u5f88\u591a\u56fe\u5f62\u7528\u6237\u5e93\u754c\u9762\u5e93\u4e5f\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\u3002 \u5c0f\u7ed3 \u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u5e38\u4f1a\u6df7\u6dc6 std::cin \u3001 std::cout \u3001\u63d2\u5165\u8fd0\u7b97\u7b26 ( << ) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 ( >> )\u3002\u4e0b\u9762\u8fd9\u4e9b\u6280\u5de7\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bb0\u5fc6\uff1a std::cin \u548c std::cout \u603b\u662f\u4f4d\u4e8e\u8bed\u53e5\u7684\u5de6\u4fa7\u3002 std::cout \u7528\u4e8e\u8f93\u51fa (cout = character output) std::cin \u7528\u4e8e\u8f93\u5165 (cin = character input) << \u914d\u5408 std::cout \u4f7f\u7528\uff0c\u540c\u65f6\u4e5f\u8868\u660e\u4e86\u6570\u636e\u7684\u6d41\u52a8\u65b9\u5411 (\u5047\u8bbe std::cout \u8868\u793a\u7684\u662f\u63a7\u5236\u53f0\uff0c\u5219\u8f93\u51fa\u7684\u6570\u636e\u4ece\u53d8\u91cf\u6d41\u5411\u63a7\u5236\u53f0\uff09\u3002 std::cout << 4 \u5c31\u8868\u793a\u5c064\u53d1\u9001\u5230\u63a7\u5236\u53f0\u3002 >> \u914d\u5408 std::cin \u4f7f\u7528\uff0c\u540c\u65f6\u4e5f\u8868\u660e\u4e86\u6570\u636e\u7684\u6d41\u52a8\u65b9\u5411 (\u5047\u8bbe std::cin \u8868\u793a\u7684\u662f\u952e\u76d8\uff0c\u5219\u8f93\u5165\u7684\u6570\u636e\u662f\u4ece\u952e\u76d8\u6d41\u5411\u53d8\u91cf\uff09\u3002 std::cin >> x \u5c31\u8868\u793a\u4ece\u952e\u76d8\u83b7\u53d6\u7684\u7528\u6237\u8f93\u5165\u88ab\u5b58\u653e\u5230\u53d8\u91cf x \u4e2d \u66f4\u591a\u5173\u4e8e\u8fd0\u7b97\u7b26\u7684\u8be6\u7ec6\u5185\u5bb9\uff0c\u5c06\u5728 [[1.9 \u5b57\u9762\u91cf\u548c\u8fd0\u7b97\u7b26]] \u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"1.5 iostream \u7b80\u4ecb\uff1a cout\uff0ccin \u548c endl"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#15-iostream-coutcin-endl","text":"\u672c\u8282\u5c06\u91cd\u70b9\u4ecb\u7ecd std::cout \u3002\u6211\u4eec\u5728 Hello world! \u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u4f7f\u7528\u5b83\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u8fc7\u6587\u672c Hello world! \u3002\u6211\u4eec\u8fd8\u5c06\u4ecb\u7ecd\u5982\u4f55\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff0c\u4f7f\u7a0b\u5e8f\u5177\u5907\u4e0e\u7528\u6237\u4ea4\u4e92\u7684\u80fd\u529b\u3002","title":"1.5 iostream \u7b80\u4ecb\uff1a cout\uff0ccin \u548c endl"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#_1","text":"\u8f93\u5165\u8f93\u51fa\u5e93 (io \u5e93) \u662f C++ \u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5904\u7406\u57fa\u672c\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u6211\u4eec\u4f1a\u4f7f\u7528\u8be5\u5e93\u63d0\u4f9b\u7684\u529f\u80fd\u4ece\u952e\u76d8\u83b7\u53d6\u8f93\u5165\u5e76\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u6570\u636e\u3002 iostream \u4e2d\u7684io \u6307\u4ee3\u7684\u662f\u8f93\u5165\u8f93\u51fa\uff08 input/output \uff09\u3002 \u4e3a\u4e86\u4f7f\u7528 iostream \u5e93\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u5728\u4efb\u4f55\u9700\u8981\u4f7f\u7528\u8be5\u5e93\u7684\u6e90\u6587\u4ef6\u7684\u9876\u90e8\u5305\u542b iostream \u7684\u5934\u6587\u4ef6\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 #include <iostream> // rest of code that uses iostream functionality here","title":"\u8f93\u5165\u8f93\u51fa\u5e93"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#stdcout","text":"iostream \u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u53d8\u91cf\u4f9b\u6211\u4eec\u4f7f\u7528\uff0c\u5176\u4e2d\u6700\u6709\u7528\u7684\u5f53\u5c5e std::cout \uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5411\u63a7\u5236\u53f0\u6253\u5370\u6587\u672c\uff0c cout \u4ee3\u8868\u7684\u542b\u4e49\u5c31\u662f\u5b57\u7b26\u8f93\u51fa\uff08character output\uff09\u3002 \u63d0\u9192\u4e00\u4e0b\uff0c\u4e0b\u9762\u65e2\u662f\u4e4b\u524d\u7684 Hello world \u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << \"Hello world!\" ; // print Hello world! to console return 0 ; } \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c iostream \u5df2\u7ecf\u88ab\u5305\u542b\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee _std::cout_ \u3002\u5728\u4e3b\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 _std::cout_ \uff0c\u5e76\u914d\u5408\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5c06\u6587\u672c Hello world!\u53d1\u9001\u5230\u63a7\u5236\u53f0\u5e76\u6253\u5370\u51fa\u6765\u3002 _std::cout_ \u4e0d\u4ec5\u53ef\u4ee5\u6253\u5370\u6587\u672c\uff0c\u8fd8\u53ef\u4ee5\u6253\u5370\u6570\u5b57\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << 4 ; // print 4 to console return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 4 \u5b83\u8fd8\u53ef\u4ee5\u7528\u6765\u6253\u5370\u53d8\u91cf\u7684\u503c\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { int x { 5 }; // define integer variable x, initialized with value 5 std :: cout << x ; // print value of x (5) to console return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 5 \u4e3a\u4e86\u5728\u4e00\u884c\u4e2d\u6253\u5370\u591a\u4e2a\u5185\u5bb9\uff0c\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\u63d2\u5165\u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u8fde\u63a5\u8d77\u6765\u5e76\u8f93\u51fa\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 #include <iostream> // for std::cout int main () { std :: cout << \"Hello\" << \" world!\" ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 Hello world! \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\u540c\u65f6\u6253\u5370\u4e86\u6587\u672c\u548c\u53d8\u91cf\u503c\uff1a 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 x is equal to: 5 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u4f1a\u5728[[2.9 \u540d\u79f0\u51b2\u7a81\u548c\u547d\u540d\u7a7a\u95f4\u7b80\u4ecb]] \u8ba8\u8bba std:: \u524d\u7f00\u7684\u4f5c\u7528","title":"std::cout"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#stdendl","text":"\u4f60\u89c9\u5f97\u4e0b\u9762\u7684\u4ee3\u7801\u6253\u5370\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u5462\uff1f 1 2 3 4 5 6 7 8 #include <iostream> // for std::cout int main () { std :: cout << \"Hi!\" ; std :: cout << \"My name is Alex.\" ; return 0 ; } \u770b\u5230\u4e0b\u9762\u7684\u7ed3\u679c\u4f60\u4f1a\u89c9\u5f97\u5403\u60ca\u5417\uff1a 1 Hi!My name is Alex. \u663e\u7136\uff0c\u5c06\u4e00\u6761\u8bed\u53e5\u62c6\u5206\u4e3a\u4e24\u884c\uff0c\u5e76\u4e0d\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u5206\u884c\u6253\u5370\uff0c\u5219\u5fc5\u987b\u8981\u544a\u77e5\u63a7\u5236\u53f0\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 \u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528 std::endl \u3002\u5f53\u4f7f\u7528 std::cout \u8fdb\u884c\u8f93\u51fa\u65f6\uff0c std::endl \u4f1a\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\uff08\u4fc3\u4f7f\u5149\u6807\u88ab\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7684\u5f00\u5934\uff09\u3002\u56e0\u6b64\uff0c endl \u8868\u793a\u7684\u662f\u7ed3\u675f\u8be5\u884c\uff08end line\uff09\u3002 \u4f8b\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 #include <iostream> // for std::cout and std::endl int main () { std :: cout << \"Hi!\" << std :: endl ; // std::endl will cause the cursor to move to the next line of the console std :: cout << \"My name is Alex.\" << std :: endl ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 2 Hi! My name is Alex. [!TIP] \u5c0f\u8d34\u58eb \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7b2c\u4e8c\u4e2a std::endl \u4ece\u6280\u672f\u4e0a\u8bb2\u5e76\u65e0\u5fc5\u8981\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b8c\u8fd9\u884c\u4ee3\u7801\u540e\u7a0b\u5e8f\u4f1a\u7acb\u5373\u505c\u6b62\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e48\u505a\u5176\u5b9e\u8fd8\u6709\u4e24\u4e2a\u6709\u7528\u7684\u76ee\u7684\uff1a\u9996\u5148\uff0c\u5b83\u53ef\u4ee5\u8868\u660e\u8be5\u884c\u7684\u5185\u5bb9\u5df2\u7ecf\u88ab\u201d\u5b8c\u6574\u8f93\u51fa\u201c \uff08\u4e0e\u4e4b\u76f8\u5bf9\u7684\u662f\u90e8\u5206\u8f93\u51fa\uff0c\u5373\u540e\u7eed\u4ee3\u7801\u4e2d\u8fd8\u6709\u9700\u8981\u8f93\u51fa\u7684\u90e8\u5206\uff09\u3002\u5176\u6b21\uff0c\u5982\u679c\u5c06\u6765\u6211\u4eec\u5728\u540e\u9762\u6dfb\u52a0\u5176\u4ed6\u989d\u5916\u7684\u8f93\u51fa\uff0c\u5c31\u4e0d\u9700\u8981\u4fee\u6539\u5df2\u6709\u7684\u4ee3\u7801\u4e86\u3002\u56e0\u6b64\u4e0d\u59a8\u52a0\u4e0a\u5b83\u3002","title":"std::endl"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#stdendl-vs-n","text":"\u4f7f\u7528 std::endl \u6362\u884c\u7684\u6548\u7387\u7a0d\u5fae\u6709\u70b9\u4f4e\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u9700\u8981\u5b8c\u6210\u4e24\u4ef6\u4e8b\uff1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u7136\u540e\u786e\u4fdd\u8f93\u51fa\u7ed3\u679c\u9a6c\u4e0a\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\uff08\u79f0\u4e3a\u5237\u65b0\u8f93\u51fa\uff09\u3002\u5f53\u4f7f\u7528 std::cout \u8fdb\u884c\u8f93\u51fa\u65f6\uff0c std::cout \u672c\u6765\u5c31\u4f1a\u5237\u65b0\u8f93\u51fa\uff08\u5373\u4f7f\u6ca1\u6709\u5237\u65b0\uff0c\u901a\u5e38\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u4ec0\u4e48\u95ee\u9898\uff09\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 std::endl \u6765\u5237\u65b0\u8f93\u51fa\u5c31\u6709\u4e9b\u591a\u4f59\u4e86\u3002 \u56e0\u6b64\uff0c\u4f7f\u7528\u6362\u884c\u5b57\u7b26( \\n )\u4e00\u822c\u6765\u8bb2\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002\u2018\\n\u2019 \u7b26\u53f7\u4f1a\u5c06\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u4f1a\u8bf7\u6c42\u5237\u65b0\uff0c\u56e0\u6b64\u5728\u65e0\u9700\u7279\u522b\u5237\u65b0\u65f6\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u2018\\n\u2019 \u5b57\u7b26\u8fd8\u66f4\u6613\u8bfb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u66f4\u7b80\u6d01\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5d4c\u5165\u5728\u5df2\u6709\u7684\u6587\u672c\u4e2d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c55\u73b0\u4e86\u4f7f\u7528 \u2018\\n\u2019 \u7684\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <iostream> // for std::cout int main () { int x { 5 }; std :: cout << \"x is equal to: \" << x << '\\n' ; // Using '\\n' standalone std :: cout << \"And that's all, folks! \\n \" ; // Using '\\n' embedded into a double-quoted piece of text (note: no single quotes when used this way) return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a 1 2 x is equal to: 5 And that's all, folks! \u6ce8\u610f\uff0c\u5728\u5355\u72ec\u4f7f\u7528\u6362\u884c\u7b26 \u2018\\n\u2019 \u7684\u65f6\u5019\uff0c\u5355\u5f15\u53f7\u662f\u5fc5\u987b\u7684\u3002\u5f53\u5d4c\u5165\u5728\u5176\u4ed6\u5df2\u7ecf\u88ab\u53cc\u5f15\u53f7\u5305\u88f9\u7684\u6587\u672c\u4e2d\u65f6\uff0c\u5219\u65e0\u9700\u518d\u4f7f\u7528\u5355\u5f15\u53f7\u3002 \u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u66f4\u8be6\u7ec6\u7684\u4ecb\u7ecd\u6362\u884c\u7b26 \u2018\\n\u2019 [[4.11 -- Chars]]\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5728\u8f93\u51fa\u65f6\u4f18\u5148\u4f7f\u7528 \u2018\\n\u2019 \u800c\u4e0d\u662f std::endl [!Warning] \u6ce8\u610f \u2018\\n\u2019 \u4f7f\u7528\u7684\u662f\u53cd\u659c\u6760\uff08\u548c\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u4e00\u6837\uff09\uff0c\u800c\u4e0d\u662f\u659c\u6760\u3002\u4f7f\u7528\u659c\u6760\uff08\u4f8b\u5982 '/n'\uff09\u53ef\u80fd\u4f1a\u5e26\u6765\u65e0\u6cd5\u9884\u6599\u7684\u7ed3\u679c\u3002","title":"std::endl vs \u2018\\n\u2019"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#stdcin","text":"std::cin \u662f isstream \u4e2d\u9884\u5b9a\u4e49\u7684\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u3002\u4e0e\u7528\u4e8e\u8f93\u51fa\u7684 std::cout \u4e0d\u540c\uff0c std::cin (\u8868\u793a\u5b57\u7b26\u8f93\u5165\uff0c\u201ccharacter input\u201d) \u914d\u5408\u63d0\u53d6\u8fd0\u7b97\u7b26( >> )\uff0c\u53ef\u4ee5\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7136\uff0c\u8f93\u5165\u7684\u7ed3\u679c\u5fc5\u987b\u5b58\u653e\u5728\u53d8\u91cf\u4e2d\u624d\u53ef\u4ee5\u88ab\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> // for std::cout and std::cin int main () { std :: cout << \"Enter a number: \" ; // ask user for a number int x { }; // define variable x to hold user input (and zero-initialize it) std :: cin >> x ; // get number from keyboard and store it in variable x std :: cout << \"You entered \" << x << '\\n' ; return 0 ; } \u8bf7\u5c1d\u8bd5\u81ea\u884c\u7f16\u8bd1\u548c\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\u3002\u5728\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u7b2c\u4e94\u884c\u4ee3\u7801\u4f1a\u6253\u5370\u201cEnter a number: \u201c\uff0c\u5f53\u6267\u884c\u5230\u7b2c\u516b\u884c\u662f\uff0c\u7a0b\u5e8f\u4f1a\u7b49\u5f85\u7528\u6237\u8f93\u5165\u3002\u5f53\u4f60\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff08\u5e76\u6309\u4e0b\u56de\u8f66\uff09\u540e\uff0c\u5b83\u4f1a\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf x\u3002\u6700\u540e\uff0c\u7b2c\u5341\u884c\u4ee3\u7801\u4f1a\u6253\u5370 \u201cYou entered \u201d \u4ee5\u53ca\u4f60\u521a\u624d\u8f93\u5165\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff1a 1 2 Enter a number: 4 You entered 4 \u8fd9\u79cd\u65b9\u5f0f\u80fd\u591f\u6bd4\u8f83\u7b80\u5355\u5730\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u5185\u5bb9\u4e2d\u5927\u91cf\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\u6ce8\u610f\uff0c\u5728\u83b7\u53d6\u8f93\u5165\u65f6\u5e76\u4e0d\u9700\u8981\u6362\u884c\u7b26\uff0c\u56e0\u4e3a\u7528\u6237\u4f1a\u81ea\u884c\u6309\u4e0b\u56de\u8f66\u952e\uff0c\u6b64\u65f6\u5149\u6807\u4fbf\u4f1a\u88ab\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 \u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u754c\u9762\u5728\u8f93\u5165\u6570\u5b57\u540e\u9a6c\u4e0a\u5c31\u5173\u95ed\u4e86\uff0c\u8bf7\u53c2\u8003 0.8 -- A few common C++ problems \u6765\u83b7\u53d6\u5e2e\u52a9\u3002 \u4e0e\u8f93\u51fa\u7c7b\u4f3c\uff0c\u4e00\u884c\u4ee3\u7801\u4e5f\u53ef\u4ee5\u5b8c\u6210\u591a\u4e2a\u503c\u7684\u8f93\u5165\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> // for std::cout and std::cin int main () { std :: cout << \"Enter two numbers separated by a space: \" ; int x { }; // define variable x to hold user input (and zero-initialize it) int y { }; // define variable y to hold user input (and zero-initialize it) std :: cin >> x >> y ; // get two numbers and store in variable x and y respectively std :: cout << \"You entered \" << x << \" and \" << y << '\\n' ; return 0 ; } \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 Enter two numbers separated by a space: 5 6 You entered 5 and 6 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5c3d\u7ba1\uff0c\u5173\u4e8e\u4e00\u4e2a\u53d8\u91cf\u5728\u7528\u4e8e\u63a5\u6536\u7528\u6237\u8f93\u5165\uff08\u4f8b\u5982\u901a\u8fc7 std::cin \uff09\u7684\u6570\u636e\u4e4b\u524d\uff0c\u662f\u5426\u5e94\u8be5\u8fdb\u884c\u521d\u59cb\u5316\u8fd9\u4e2a\u95ee\u9898\u6709\u5f88\u591a\u4e89\u8bba\uff0c\u6bd5\u7adf\u7528\u6237\u7684\u8f93\u5165\u4f1a\u8986\u76d6\u521d\u59cb\u5316\u7684\u503c\u3002\u4e0e\u6211\u4eec\u4e4b\u524d\u7684\u5efa\u8bae\u7c7b\u4f3c\uff0c\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u90fd\u5fc5\u987b\u8981\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u6700\u4f73\u5b9e\u8df5\u4ecd\u7136\u662f\uff0c\u53d8\u91cf\u8981\u5148\u8fdb\u884c\u521d\u59cb\u5316\u518d\u7528\u4e8e\u63a5\u6536\u7528\u6237\u8f93\u5165\u3002 \u6211\u4eec\u4f1a\u5728 [[7.16 -- std::cin and handling invalid input]] \u4e2d\u8ba8\u8bba std::cin \u5982\u4f55\u5e94\u5bf9\u975e\u6cd5\u8f93\u5165\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb C++ \u7684\u8f93\u5165\u8f93\u51fa\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u79cd\u65e0\u9700\u6309\u4e0b\u56de\u8f66\u5c31\u53ef\u4ee5\u83b7\u53d6\u8f93\u5165\u7ed3\u679c\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u6765\u5b8c\u6210\u3002\u5982\u679c\u662f\u5f00\u53d1\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u63a8\u8350\u5c1d\u8bd5 pdcurses \u8fd9\u4e2a\u5e93\u3002\u53e6\u5916\uff0c\u5f88\u591a\u56fe\u5f62\u7528\u6237\u5e93\u754c\u9762\u5e93\u4e5f\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\u3002","title":"std::cin"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.05%20iostream%20%E7%AE%80%E4%BB%8B%EF%BC%9A%20cout%EF%BC%8Ccin%20%E5%92%8C%20endl/#_2","text":"\u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u5e38\u4f1a\u6df7\u6dc6 std::cin \u3001 std::cout \u3001\u63d2\u5165\u8fd0\u7b97\u7b26 ( << ) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 ( >> )\u3002\u4e0b\u9762\u8fd9\u4e9b\u6280\u5de7\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8bb0\u5fc6\uff1a std::cin \u548c std::cout \u603b\u662f\u4f4d\u4e8e\u8bed\u53e5\u7684\u5de6\u4fa7\u3002 std::cout \u7528\u4e8e\u8f93\u51fa (cout = character output) std::cin \u7528\u4e8e\u8f93\u5165 (cin = character input) << \u914d\u5408 std::cout \u4f7f\u7528\uff0c\u540c\u65f6\u4e5f\u8868\u660e\u4e86\u6570\u636e\u7684\u6d41\u52a8\u65b9\u5411 (\u5047\u8bbe std::cout \u8868\u793a\u7684\u662f\u63a7\u5236\u53f0\uff0c\u5219\u8f93\u51fa\u7684\u6570\u636e\u4ece\u53d8\u91cf\u6d41\u5411\u63a7\u5236\u53f0\uff09\u3002 std::cout << 4 \u5c31\u8868\u793a\u5c064\u53d1\u9001\u5230\u63a7\u5236\u53f0\u3002 >> \u914d\u5408 std::cin \u4f7f\u7528\uff0c\u540c\u65f6\u4e5f\u8868\u660e\u4e86\u6570\u636e\u7684\u6d41\u52a8\u65b9\u5411 (\u5047\u8bbe std::cin \u8868\u793a\u7684\u662f\u952e\u76d8\uff0c\u5219\u8f93\u5165\u7684\u6570\u636e\u662f\u4ece\u952e\u76d8\u6d41\u5411\u53d8\u91cf\uff09\u3002 std::cin >> x \u5c31\u8868\u793a\u4ece\u952e\u76d8\u83b7\u53d6\u7684\u7528\u6237\u8f93\u5165\u88ab\u5b58\u653e\u5230\u53d8\u91cf x \u4e2d \u66f4\u591a\u5173\u4e8e\u8fd0\u7b97\u7b26\u7684\u8be6\u7ec6\u5185\u5bb9\uff0c\u5c06\u5728 [[1.9 \u5b57\u9762\u91cf\u548c\u8fd0\u7b97\u7b26]] \u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u5c0f\u7ed3"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.06%20%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/","text":"1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf \u4e0d\u540c\u4e8e\u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\uff0cC/C++ \u5e76\u4e0d\u4f1a\u81ea\u52a8\u5730\u5c06\u5927\u90e8\u5206\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u67d0\u4e2a\u7ed9\u5b9a\u503c\uff08\u4f8b\u59820\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u7f16\u8bd1\u5668\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u5730\u5740\u65f6\uff0c\u9ed8\u8ba4\u7684\u521d\u503c\u5c06\u4f1a\u662f\u4efb\u4f55\u6070\u597d\u4f4d\u4e8e\u8be5\u5730\u5740\u7684\u503c\uff08\u5783\u573e\u503c\uff09\u3002\u4e00\u4e2a\u6ca1\u6709\u88ab\u660e\u786e\u8d4b\u4e88\u6307\u5b9a\u521d\u503c\uff08\u901a\u8fc7\u521d\u59cb\u5316\u6216\u8d4b\u503c\uff09\u7684\u53d8\u91cf\u79f0\u4e3a\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u5f88\u591a\u8bfb\u8005\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a\uff0c\u201d\u521d\u59cb\u5316\u7684\u201c\u548c\"\u672a\u521d\u59cb\u5316\u7684\"\u662f\u4e00\u5bf9\u4e25\u683c\u7684\u53cd\u4e49\u8bcd\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u3002\u521d\u59cb\u5316\u610f\u5473\u7740\u5bf9\u8c61\u5728\u88ab\u5b9a\u4e49\u7684\u65f6\u5019\u5373\u83b7\u5f97\u4e86\u4e00\u4e2a\u7ed9\u5b9a\u7684\u521d\u59cb\u503c\u3002\u800c\u672a\u521d\u59cb\u5316\u5219\u8868\u793a\uff0c\u5bf9\u8c61\u6ca1\u6709\u88ab\u660e\u786e\u5730\u6307\u5b9a\u4efb\u4f55\u503c\uff08\u901a\u8fc7\u5404\u79cd\u9014\u5f84\uff0c\u5305\u62ec\u8d4b\u503c\uff09\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5982\u679c\u6ca1\u6709\u88ab\u201d\u521d\u59cb\u5316\u201c\uff0c\u4f46\u901a\u8fc7\u8d4b\u503c\u5f97\u5230\u4e86\u4e00\u4e2a\u521d\u503c\uff0c\u5b83\u4e5f\u4e0d\u518d\u662f\u201d\u672a\u521d\u59cb\u5316\u201c\u72b6\u6001\uff08\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u4e2a\u503c\uff09 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff1a - \u521d\u59cb\u5316\uff1a\u5bf9\u8c61\u5728\u88ab\u5b9a\u4e49\u7684\u540c\u65f6\u4e5f\u88ab\u8d4b\u4e88\u4e86\u521d\u503c - \u8d4b\u503c\uff1a\u5bf9\u8c61\u5728\u5b9a\u4e49\u540e\uff0c\u88ab\u8d4b\u4e88\u4e86\u4e00\u4e2a\u503c - \u672a\u521d\u59cb\u5316\uff1a\u5bf9\u8c61\u59cb\u7ec8\u6ca1\u6709\u80fd\u591f\u83b7\u5f97\u4e00\u4e2a\u660e\u786e\u6307\u5b9a\u7684\u521d\u503c\u3002 [!INFO] \u9898\u5916\u8bdd \u4e0d\u8fdb\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u8fd9\u4e00\u7b56\u7565\u662f\u4eceC\u8bed\u8a00\u7ee7\u627f\u800c\u6765\uff0c\u4e3b\u8981\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u8003\u8651\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u8ba1\u7b97\u673a\u8fd0\u884c\u901f\u5ea6\u8fd8\u5f88\u6162\u3002\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u4ece\u6587\u4ef6\u8bfb\u53d6100000\u6761\u6570\u636e\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u9700\u8981\u521b\u5efa100000\u4e2a\u53d8\u91cf\u5e76\u4f7f\u7528\u8bfb\u53d6\u7684\u6570\u636e\u6765\u586b\u5145\u5b83\u4eec\u3002 \u5982\u679c C++ \u9700\u8981\u5728\u521b\u5efa\u8fd9\u4e9b\u53d8\u91cf\u65f6\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u9700\u8981\u6267\u884c100000\u6b21\u521d\u59cb\u5316\uff08\u521d\u59cb\u5316\u901f\u5ea6\u5f88\u6162\uff09\uff0c\u5176\u5e26\u6765\u7684\u597d\u5904\u4e5f\u5e76\u4e0d\u5927\uff08\u6bd5\u7adf\u8fd9\u4e9b\u521d\u59cb\u5316\u5f88\u5feb\u5c06\u4f1a\u88ab\u771f\u5b9e\u503c\u8986\u76d6\uff09\u3002 \u73b0\u5982\u4eca\uff0c\u6211\u4eec\u5219\u5e94\u8be5\u7262\u8bb0\u5bf9\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5176\u5e26\u6765\u7684\u597d\u5904\u5df2\u7ecf\u8fdc\u5927\u4e8e\u5176\u5f00\u9500\u3002\u5f53\u4f60\u719f\u7ec3\u638c\u63e1\u8fd9\u95e8\u8bed\u8a00\u540e\uff0c\u4e5f\u8bb8\u4e5f\u4f1a\u9047\u5230\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\u800c\u653e\u5f03\u521d\u59cb\u5316\u7684\u60c5\u51b5\u3002\u4f46\u8fd9\u6837\u7684\u64cd\u4f5c\u4e00\u5b9a\u662f\u4f60\u6df1\u601d\u719f\u8651\u540e\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u3002 \u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u7684\u503c\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u96be\u4ee5\u9884\u6599\u7684\u7ed3\u679c\u3002\u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { // define an integer variable named x int x ; // this variable is uninitialized because we haven't given it a value // print the value of x to the screen std :: cout << x ; // who knows what we'll get, because x is uninitialized return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8ba1\u7b97\u673a\u4f1a\u4e3ax\u5206\u914d\u67d0\u7a7a\u95f2\u7684\u5185\u5b58\u3002\u8be5\u5185\u5b58\u4e2d\u5b58\u653e\u7684\u503c\u4f1a\u901a\u8fc7 std::cout \u8f93\u51fa\u5230\u63a7\u5236\u53f0\u5e76\u6253\u5370\uff0c\u5176\u6253\u5370\u51fa\u7684\u7ed3\u679c\u53ef\u80fd\u662f\u67d0\u4e2a\u503c\uff08\u88ab\u5f53\u505a\u6574\u578b\u6765\u89e3\u6790\uff09\u3002\u4f46\u7a76\u7adf\u662f\u4ec0\u4e48\u503c\u5462\uff1f\u7b54\u6848\u662f\uff1a\u201d\u6ca1\u6709\u4eba\u77e5\u9053\u201c\uff0c\u6216\u8005\u8bf4\uff0c\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u7b54\u6848\u90fd\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f5c\u8005\u5728\u4f7f\u7528 Visual Studio \u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6253\u5370\u51fa\u7684\u503c\u662f 7177728 \uff0c\u518d\u6b21\u8fd0\u884c\u65f6\u6253\u5370\u7684\u503c\u5c31\u7f16\u7a0b\u4e86 5277592 \u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u5e76\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff08\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u635f\u574f\u4f60\u7684\u7535\u8111\uff09\u3002 [!Warning] \u6ce8\u610f \u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\uff0c\u4f8b\u5982 Visual Studio\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fdebug\u7248\u672c\u914d\u7f6e\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u5c06\u5185\u5b58\u521d\u59cb\u5316\u4e3a\u67d0\u4e9b\u9884\u8bbe\u503c\u3002\u4f46\u662f\u5f53\u4f60\u4f7f\u7528release\u7248\u672c\u914d\u7f6e\u65f6\uff0c\u5219\u4e0d\u4f1a\u6709\u4e0a\u8ff0\u884c\u4e3a\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u60f3\u8981\u81ea\u884c\u5c1d\u8bd5\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u8bf7\u786e\u4fdd\u81ea\u5df1\u4f7f\u7528\u7684\u662frelease\u7248\u672c\u7684\u6784\u5efa\u914d\u7f6e (\u53c2\u8003 0.9 -- Configuring your compiler: Build configurations ). \u4f8b\u5982\uff0c\u5f53\u4f60\u5728Visual Studio\u4e2d\u4f7f\u7528debug\u914d\u7f6e\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6\uff0c\u8f93\u51fa\u7ed3\u679c\u59cb\u7ec8\u4f1a\u662f -858993460\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u503c\uff08\u88ab\u89e3\u91ca\u4e3a\u6574\u578b\uff09\u662f Visual Studio \u5728 debug \u914d\u7f6e\u4e0b\u521d\u59cb\u5316\u5185\u5b58\u4f7f\u7528\u7684\u503c\u3002 \u5927\u591a\u6570\u7684\u73b0\u4ee3\u7f16\u8bd1\u5668\u90fd\u80fd\u591f\u68c0\u6d4b\u5230\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u88ab\u8d4b\u4e88\u4e86\u521d\u503c\u3002\u5982\u679c\u80fd\u591f\u68c0\u6d4b\u5230\uff0c\u5219\u5728\u7f16\u8bd1\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5728 Visual Studio \u4e2d\u7f16\u8bd1\u4e0a\u8ff0\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u8f93\u51fa\u5982\u4e0b\u7684\u544a\u8b66\u4fe1\u606f\uff1a c:\\VCprojects\\test\\test.cpp(11) : warning C4700: uninitialized local variable 'x' used \u5982\u679c\u4f60\u7684\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u4f60\u7f16\u8bd1\u4e0a\u8ff0\u4ee3\u7801\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u7ed5\u8fc7\u9650\u5236\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> void doNothing ( int & ) // Don't worry about what & is for now, we're just using it to trick the compiler into thinking variable x is used { } int main () { // define an integer variable named x int x ; // this variable is uninitialized doNothing ( x ); // make the compiler think we're assigning a value to this variable // print the value of x to the screen (who knows what we'll get, because x is uninitialized) std :: cout << x ; return 0 ; } \u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u662f\u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u72af\u7684\u9519\u8bef\u4e4b\u4e00\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u8be5\u9519\u8bef\u4e5f\u5e38\u5e38\u4f1a\u57cb\u4e0b\u6700\u96be\u4ee5\u8c03\u8bd5\u7684\u95ee\u9898\uff08\u56e0\u4e3a\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\uff0c\u5982\u679c\u8be5\u5185\u5b58\u4e2d\u6070\u597d\u5305\u542b\u4e86\u4e00\u4e2a\u5408\u7406\u7684\u503c\uff0c\u4f8b\u59820\uff09\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u6700\u4f73\u5b9e\u8df5\u4e2d\u6211\u4eec\u5f3a\u8c03\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u521d\u59cb\u5316\u53d8\u91cf\u3002 \u672a\u5b9a\u4e49\u884c\u4e3a \u4f7f\u7528\u672a\u5b9a\u4e49\u53d8\u91cf\u4e2d\u7684\u503c\uff0c\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u79cd\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4f8b\u5b50\u3002\u672a\u5b9a\u4e49\u884c\u4e3a\uff08\u5e38\u5e38\u7f29\u5199\u4e3a UB\uff09\u6307\u7684\u662f\u6267\u884c\u4ee3\u7801\u7684\u884c\u4e3a\u6ca1\u6709\u88ab C++ \u8bed\u8a00\u660e\u786e\u5b9a\u4e49\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++ \u8bed\u8a00\u5e76\u6ca1\u6709\u660e\u786e\u7684\u89c4\u5219\u80fd\u591f\u7528\u4e8e\u786e\u5b9a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u4ece\u7ed3\u679c\u4e0a\u6765\u770b\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u5219\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4ee3\u7801\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u53ef\u80fd\u8868\u73b0\u51fa\u5982\u4e0b\u75c7\u72b6\uff1a \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u90fd\u53ef\u80fd\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff1b \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u90fd\u8f93\u51fa\u76f8\u540c\u7684\u9519\u8bef\u7ed3\u679c\uff1b \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u7684\u884c\u4e3a\u90fd\u4e0d\u4e00\u81f4 (\u6709\u65f6\u5019\u7ed3\u679c\u6b63\u786e\uff0c\u6709\u65f6\u5019\u4e0d\u6b63\u786e)\uff1b \u7a0b\u5e8f\u770b\u8d77\u6765\u80fd\u591f\u6b63\u786e\u8fd0\u884c\uff0c\u4f46\u662f\u4e00\u6bb5\u65f6\u95f4\u540e\u53c8\u4f1a\u8f93\u51fa\u9519\u8bef\u7684\u7ed3\u679c\uff1b \u7a0b\u5e8f\u5d29\u6e83\u9000\u51fa\uff0c\u8fd9\u79cd\u5d29\u6e83\u53ef\u80fd\u5728\u7a0b\u5e8f\u542f\u52a8\u540e\u7acb\u5373\u53d1\u751f\uff0c\u4e5f\u53ef\u80fd\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u53d1\u751f\uff1b \u7a0b\u5e8f\u7ecf\u67d0\u4e9b\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u6709\u4e9b\u7f16\u8bd1\u5668\u5219\u4e0d\u884c\uff1b \u7a0b\u5e8f\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u76f4\u5230\u4f60\u4fee\u6539\u4e86\u67d0\u4e9b\u770b\u4e0a\u6beb\u4e0d\u76f8\u5e72\u7684\u4ee3\u7801\u3002 \u6216\u8005\uff0c\u7a0b\u5e8f\u751a\u81f3\u80fd\u591f\u6b63\u786e\u8fd0\u884c\u5e76\u5f97\u5230\u6b63\u786e\u7ed3\u679c\u3002\u6240\u8c13\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5c31\u662f\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u4f60\u80fd\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff0c\u65e0\u6cd5\u9884\u6d4b\u6bcf\u6b21\u8fd0\u884c\u7684\u884c\u4e3a\uff0c\u4e5f\u65e0\u6cd5\u9884\u6d4b\u4f60\u505a\u51fa\u67d0\u4e9b\u4fee\u6539\u540e\u7684\u5f71\u54cd\u3002 \u5728 C++ \u4e2d\uff0c\u5982\u679c\u4f60\u4e0d\u591f\u6d88\u606f\uff0c\u90a3\u4e48\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u9014\u5f84\u6709\u5f88\u591a\u3002\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u9047\u5230\u5177\u4f53\u95ee\u9898\u65f6\u8fdb\u884c\u8bb2\u89e3\u3002\u8bf7\u6ce8\u610f\u8bb0\u5f55\u8fd9\u4e9b\u6848\u4f8b\u5e76\u5207\u8bb0\u8981\u907f\u514d\u5b83\u4eec\u3002 [!TIP] \u6cd5\u5219 \u6ce8\u610f\u907f\u514d\u53ef\u80fd\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u5404\u79cd\u60c5\u51b5\uff0c\u4f8b\u5982\u4f7f\u7528\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u8bfb\u8005\u8bc4\u8bba\u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u4fbf\u662f\uff1a\u201d\u4f60\u8bf4\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u4f46\u6211\u504f\u504f\u8fd9\u6837\u505a\u4e86\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e5f\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff01\u4e3a\u4ec0\u4e48\uff1f\u201c \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u901a\u5e38\u6709\u4e24\u4e2a\u7b54\u6848\u3002\u6700\u5e38\u89c1\u7684\u7b54\u6848\u662f\uff0c\u4f60\u7684\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u8868\u73b0\u51fa\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u53ea\u4e0d\u8fc7\u8be5\u672a\u5b9a\u4e49\u884c\u4e3a\u6070\u5de7\uff08\u6682\u65f6\uff09\u8f93\u51fa\u4e86\u4f60\u671f\u671b\u7684\u7ed3\u679c\u3002\u6539\u5929\uff08\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7f16\u8bd1\u5668\u3001\u4f7f\u7528\u5176\u4ed6\u8ba1\u7b97\u673a\uff09\u518d\u8fd0\u884c\u65f6\uff0c\u53ef\u80fd\u672a\u5fc5\u5982\u6b64\u3002 \u8fd9\u4e2a\u95ee\u9898\u8fd8\u53ef\u4ee5\u8fd9\u6837\u56de\u7b54\uff1a\u6709\u4e9b\u7f16\u8bd1\u5668\u7684\u4f5c\u8005\uff0c\u5728\u5b9e\u73b0\u7279\u5b9a\u8bed\u8a00\u7684\u9700\u6c42\u65f6\uff0c\u8ba4\u4e3a\u67d0\u4e9b\u89c4\u5219\u8fc7\u4e8e\u4e25\u683c\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u6807\u51c6\u53ef\u80fd\u4f1a\u8bf4\uff0cX \u5fc5\u987b\u4f4d\u4e8e Y \u4e4b\u524d\u53d1\u751f\u3002\u4f46\u662f\u7f16\u8bd1\u5668\u4f5c\u8005\u786e\u8ba4\u4e3a\u8fd9\u4e48\u505a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u5e76\u4e14\u4f7f\u5f97 Y \u80fd\u591f\u5728\u6ca1\u6709\u6267\u884cX\u7684\u524d\u63d0\u4e0b\u6b63\u786e\u5de5\u4f5c\u3002\u8fd9\u4e48\u505a\u4e0d\u4f1a\u5f71\u54cd\u5230\u6b63\u786e\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u4ee3\u7801\u80fd\u591f\u6b63\u786e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\uff1a\u4f60\u4f7f\u7528\u7684\u7f16\u8bd1\u5668\u53ef\u80fd\u5e76\u6ca1\u6709\u5b8c\u5168\u9075\u5b88\u6807\u51c6\u3002\u8fd9\u79cd\u60c5\u51b5\u662f\u5b58\u5728\u7684\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u7f16\u8bd1\u5668\u7684\u6269\u5c55\u529f\u80fd\u6765\u907f\u514d\u8fd9\u4e9b\u95ee\u9898\uff0c\u5177\u4f53\u5185\u5bb9\u8bf7\u53c2\u8003 0.10 -- Configuring your compiler: Compiler extensions .","title":"1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.06%20%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/#16","text":"","title":"1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.06%20%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/#_1","text":"\u4e0d\u540c\u4e8e\u6709\u4e9b\u7f16\u7a0b\u8bed\u8a00\uff0cC/C++ \u5e76\u4e0d\u4f1a\u81ea\u52a8\u5730\u5c06\u5927\u90e8\u5206\u53d8\u91cf\u521d\u59cb\u5316\u4e3a\u67d0\u4e2a\u7ed9\u5b9a\u503c\uff08\u4f8b\u59820\uff09\u3002\u56e0\u6b64\uff0c\u5f53\u7f16\u8bd1\u5668\u4e3a\u53d8\u91cf\u5206\u914d\u5185\u5b58\u5730\u5740\u65f6\uff0c\u9ed8\u8ba4\u7684\u521d\u503c\u5c06\u4f1a\u662f\u4efb\u4f55\u6070\u597d\u4f4d\u4e8e\u8be5\u5730\u5740\u7684\u503c\uff08\u5783\u573e\u503c\uff09\u3002\u4e00\u4e2a\u6ca1\u6709\u88ab\u660e\u786e\u8d4b\u4e88\u6307\u5b9a\u521d\u503c\uff08\u901a\u8fc7\u521d\u59cb\u5316\u6216\u8d4b\u503c\uff09\u7684\u53d8\u91cf\u79f0\u4e3a\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u5f88\u591a\u8bfb\u8005\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a\uff0c\u201d\u521d\u59cb\u5316\u7684\u201c\u548c\"\u672a\u521d\u59cb\u5316\u7684\"\u662f\u4e00\u5bf9\u4e25\u683c\u7684\u53cd\u4e49\u8bcd\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u3002\u521d\u59cb\u5316\u610f\u5473\u7740\u5bf9\u8c61\u5728\u88ab\u5b9a\u4e49\u7684\u65f6\u5019\u5373\u83b7\u5f97\u4e86\u4e00\u4e2a\u7ed9\u5b9a\u7684\u521d\u59cb\u503c\u3002\u800c\u672a\u521d\u59cb\u5316\u5219\u8868\u793a\uff0c\u5bf9\u8c61\u6ca1\u6709\u88ab\u660e\u786e\u5730\u6307\u5b9a\u4efb\u4f55\u503c\uff08\u901a\u8fc7\u5404\u79cd\u9014\u5f84\uff0c\u5305\u62ec\u8d4b\u503c\uff09\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5982\u679c\u6ca1\u6709\u88ab\u201d\u521d\u59cb\u5316\u201c\uff0c\u4f46\u901a\u8fc7\u8d4b\u503c\u5f97\u5230\u4e86\u4e00\u4e2a\u521d\u503c\uff0c\u5b83\u4e5f\u4e0d\u518d\u662f\u201d\u672a\u521d\u59cb\u5316\u201c\u72b6\u6001\uff08\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u4e2a\u503c\uff09 \u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff1a - \u521d\u59cb\u5316\uff1a\u5bf9\u8c61\u5728\u88ab\u5b9a\u4e49\u7684\u540c\u65f6\u4e5f\u88ab\u8d4b\u4e88\u4e86\u521d\u503c - \u8d4b\u503c\uff1a\u5bf9\u8c61\u5728\u5b9a\u4e49\u540e\uff0c\u88ab\u8d4b\u4e88\u4e86\u4e00\u4e2a\u503c - \u672a\u521d\u59cb\u5316\uff1a\u5bf9\u8c61\u59cb\u7ec8\u6ca1\u6709\u80fd\u591f\u83b7\u5f97\u4e00\u4e2a\u660e\u786e\u6307\u5b9a\u7684\u521d\u503c\u3002 [!INFO] \u9898\u5916\u8bdd \u4e0d\u8fdb\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u8fd9\u4e00\u7b56\u7565\u662f\u4eceC\u8bed\u8a00\u7ee7\u627f\u800c\u6765\uff0c\u4e3b\u8981\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u8003\u8651\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u8ba1\u7b97\u673a\u8fd0\u884c\u901f\u5ea6\u8fd8\u5f88\u6162\u3002\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u4ece\u6587\u4ef6\u8bfb\u53d6100000\u6761\u6570\u636e\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u9700\u8981\u521b\u5efa100000\u4e2a\u53d8\u91cf\u5e76\u4f7f\u7528\u8bfb\u53d6\u7684\u6570\u636e\u6765\u586b\u5145\u5b83\u4eec\u3002 \u5982\u679c C++ \u9700\u8981\u5728\u521b\u5efa\u8fd9\u4e9b\u53d8\u91cf\u65f6\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u5bf9\u5176\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u9700\u8981\u6267\u884c100000\u6b21\u521d\u59cb\u5316\uff08\u521d\u59cb\u5316\u901f\u5ea6\u5f88\u6162\uff09\uff0c\u5176\u5e26\u6765\u7684\u597d\u5904\u4e5f\u5e76\u4e0d\u5927\uff08\u6bd5\u7adf\u8fd9\u4e9b\u521d\u59cb\u5316\u5f88\u5feb\u5c06\u4f1a\u88ab\u771f\u5b9e\u503c\u8986\u76d6\uff09\u3002 \u73b0\u5982\u4eca\uff0c\u6211\u4eec\u5219\u5e94\u8be5\u7262\u8bb0\u5bf9\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5176\u5e26\u6765\u7684\u597d\u5904\u5df2\u7ecf\u8fdc\u5927\u4e8e\u5176\u5f00\u9500\u3002\u5f53\u4f60\u719f\u7ec3\u638c\u63e1\u8fd9\u95e8\u8bed\u8a00\u540e\uff0c\u4e5f\u8bb8\u4e5f\u4f1a\u9047\u5230\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\u800c\u653e\u5f03\u521d\u59cb\u5316\u7684\u60c5\u51b5\u3002\u4f46\u8fd9\u6837\u7684\u64cd\u4f5c\u4e00\u5b9a\u662f\u4f60\u6df1\u601d\u719f\u8651\u540e\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u3002 \u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u7684\u503c\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u96be\u4ee5\u9884\u6599\u7684\u7ed3\u679c\u3002\u4ee5\u5982\u4e0b\u4ee3\u7801\u4e3a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { // define an integer variable named x int x ; // this variable is uninitialized because we haven't given it a value // print the value of x to the screen std :: cout << x ; // who knows what we'll get, because x is uninitialized return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8ba1\u7b97\u673a\u4f1a\u4e3ax\u5206\u914d\u67d0\u7a7a\u95f2\u7684\u5185\u5b58\u3002\u8be5\u5185\u5b58\u4e2d\u5b58\u653e\u7684\u503c\u4f1a\u901a\u8fc7 std::cout \u8f93\u51fa\u5230\u63a7\u5236\u53f0\u5e76\u6253\u5370\uff0c\u5176\u6253\u5370\u51fa\u7684\u7ed3\u679c\u53ef\u80fd\u662f\u67d0\u4e2a\u503c\uff08\u88ab\u5f53\u505a\u6574\u578b\u6765\u89e3\u6790\uff09\u3002\u4f46\u7a76\u7adf\u662f\u4ec0\u4e48\u503c\u5462\uff1f\u7b54\u6848\u662f\uff1a\u201d\u6ca1\u6709\u4eba\u77e5\u9053\u201c\uff0c\u6216\u8005\u8bf4\uff0c\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\uff0c\u7b54\u6848\u90fd\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f5c\u8005\u5728\u4f7f\u7528 Visual Studio \u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6253\u5370\u51fa\u7684\u503c\u662f 7177728 \uff0c\u518d\u6b21\u8fd0\u884c\u65f6\u6253\u5370\u7684\u503c\u5c31\u7f16\u7a0b\u4e86 5277592 \u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u5e76\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff08\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u635f\u574f\u4f60\u7684\u7535\u8111\uff09\u3002 [!Warning] \u6ce8\u610f \u6709\u4e00\u4e9b\u7f16\u8bd1\u5668\uff0c\u4f8b\u5982 Visual Studio\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fdebug\u7248\u672c\u914d\u7f6e\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u5c06\u5185\u5b58\u521d\u59cb\u5316\u4e3a\u67d0\u4e9b\u9884\u8bbe\u503c\u3002\u4f46\u662f\u5f53\u4f60\u4f7f\u7528release\u7248\u672c\u914d\u7f6e\u65f6\uff0c\u5219\u4e0d\u4f1a\u6709\u4e0a\u8ff0\u884c\u4e3a\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u60f3\u8981\u81ea\u884c\u5c1d\u8bd5\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u8bf7\u786e\u4fdd\u81ea\u5df1\u4f7f\u7528\u7684\u662frelease\u7248\u672c\u7684\u6784\u5efa\u914d\u7f6e (\u53c2\u8003 0.9 -- Configuring your compiler: Build configurations ). \u4f8b\u5982\uff0c\u5f53\u4f60\u5728Visual Studio\u4e2d\u4f7f\u7528debug\u914d\u7f6e\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\u65f6\uff0c\u8f93\u51fa\u7ed3\u679c\u59cb\u7ec8\u4f1a\u662f -858993460\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u503c\uff08\u88ab\u89e3\u91ca\u4e3a\u6574\u578b\uff09\u662f Visual Studio \u5728 debug \u914d\u7f6e\u4e0b\u521d\u59cb\u5316\u5185\u5b58\u4f7f\u7528\u7684\u503c\u3002 \u5927\u591a\u6570\u7684\u73b0\u4ee3\u7f16\u8bd1\u5668\u90fd\u80fd\u591f\u68c0\u6d4b\u5230\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u88ab\u8d4b\u4e88\u4e86\u521d\u503c\u3002\u5982\u679c\u80fd\u591f\u68c0\u6d4b\u5230\uff0c\u5219\u5728\u7f16\u8bd1\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5728 Visual Studio \u4e2d\u7f16\u8bd1\u4e0a\u8ff0\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u8f93\u51fa\u5982\u4e0b\u7684\u544a\u8b66\u4fe1\u606f\uff1a c:\\VCprojects\\test\\test.cpp(11) : warning C4700: uninitialized local variable 'x' used \u5982\u679c\u4f60\u7684\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u4f60\u7f16\u8bd1\u4e0a\u8ff0\u4ee3\u7801\uff0c\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u7ed5\u8fc7\u9650\u5236\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> void doNothing ( int & ) // Don't worry about what & is for now, we're just using it to trick the compiler into thinking variable x is used { } int main () { // define an integer variable named x int x ; // this variable is uninitialized doNothing ( x ); // make the compiler think we're assigning a value to this variable // print the value of x to the screen (who knows what we'll get, because x is uninitialized) std :: cout << x ; return 0 ; } \u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u662f\u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u72af\u7684\u9519\u8bef\u4e4b\u4e00\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u8be5\u9519\u8bef\u4e5f\u5e38\u5e38\u4f1a\u57cb\u4e0b\u6700\u96be\u4ee5\u8c03\u8bd5\u7684\u95ee\u9898\uff08\u56e0\u4e3a\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\uff0c\u5982\u679c\u8be5\u5185\u5b58\u4e2d\u6070\u597d\u5305\u542b\u4e86\u4e00\u4e2a\u5408\u7406\u7684\u503c\uff0c\u4f8b\u59820\uff09\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u6700\u4f73\u5b9e\u8df5\u4e2d\u6211\u4eec\u5f3a\u8c03\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u521d\u59cb\u5316\u53d8\u91cf\u3002","title":"\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.06%20%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/#_2","text":"\u4f7f\u7528\u672a\u5b9a\u4e49\u53d8\u91cf\u4e2d\u7684\u503c\uff0c\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u79cd\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4f8b\u5b50\u3002\u672a\u5b9a\u4e49\u884c\u4e3a\uff08\u5e38\u5e38\u7f29\u5199\u4e3a UB\uff09\u6307\u7684\u662f\u6267\u884c\u4ee3\u7801\u7684\u884c\u4e3a\u6ca1\u6709\u88ab C++ \u8bed\u8a00\u660e\u786e\u5b9a\u4e49\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cC++ \u8bed\u8a00\u5e76\u6ca1\u6709\u660e\u786e\u7684\u89c4\u5219\u80fd\u591f\u7528\u4e8e\u786e\u5b9a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u4ece\u7ed3\u679c\u4e0a\u6765\u770b\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u5219\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4ee3\u7801\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u53ef\u80fd\u8868\u73b0\u51fa\u5982\u4e0b\u75c7\u72b6\uff1a \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u90fd\u53ef\u80fd\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff1b \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u90fd\u8f93\u51fa\u76f8\u540c\u7684\u9519\u8bef\u7ed3\u679c\uff1b \u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u7684\u884c\u4e3a\u90fd\u4e0d\u4e00\u81f4 (\u6709\u65f6\u5019\u7ed3\u679c\u6b63\u786e\uff0c\u6709\u65f6\u5019\u4e0d\u6b63\u786e)\uff1b \u7a0b\u5e8f\u770b\u8d77\u6765\u80fd\u591f\u6b63\u786e\u8fd0\u884c\uff0c\u4f46\u662f\u4e00\u6bb5\u65f6\u95f4\u540e\u53c8\u4f1a\u8f93\u51fa\u9519\u8bef\u7684\u7ed3\u679c\uff1b \u7a0b\u5e8f\u5d29\u6e83\u9000\u51fa\uff0c\u8fd9\u79cd\u5d29\u6e83\u53ef\u80fd\u5728\u7a0b\u5e8f\u542f\u52a8\u540e\u7acb\u5373\u53d1\u751f\uff0c\u4e5f\u53ef\u80fd\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u53d1\u751f\uff1b \u7a0b\u5e8f\u7ecf\u67d0\u4e9b\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u6709\u4e9b\u7f16\u8bd1\u5668\u5219\u4e0d\u884c\uff1b \u7a0b\u5e8f\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u76f4\u5230\u4f60\u4fee\u6539\u4e86\u67d0\u4e9b\u770b\u4e0a\u6beb\u4e0d\u76f8\u5e72\u7684\u4ee3\u7801\u3002 \u6216\u8005\uff0c\u7a0b\u5e8f\u751a\u81f3\u80fd\u591f\u6b63\u786e\u8fd0\u884c\u5e76\u5f97\u5230\u6b63\u786e\u7ed3\u679c\u3002\u6240\u8c13\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5c31\u662f\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u4f60\u80fd\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff0c\u65e0\u6cd5\u9884\u6d4b\u6bcf\u6b21\u8fd0\u884c\u7684\u884c\u4e3a\uff0c\u4e5f\u65e0\u6cd5\u9884\u6d4b\u4f60\u505a\u51fa\u67d0\u4e9b\u4fee\u6539\u540e\u7684\u5f71\u54cd\u3002 \u5728 C++ \u4e2d\uff0c\u5982\u679c\u4f60\u4e0d\u591f\u6d88\u606f\uff0c\u90a3\u4e48\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u9014\u5f84\u6709\u5f88\u591a\u3002\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u9047\u5230\u5177\u4f53\u95ee\u9898\u65f6\u8fdb\u884c\u8bb2\u89e3\u3002\u8bf7\u6ce8\u610f\u8bb0\u5f55\u8fd9\u4e9b\u6848\u4f8b\u5e76\u5207\u8bb0\u8981\u907f\u514d\u5b83\u4eec\u3002 [!TIP] \u6cd5\u5219 \u6ce8\u610f\u907f\u514d\u53ef\u80fd\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u5404\u79cd\u60c5\u51b5\uff0c\u4f8b\u5982\u4f7f\u7528\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u8bfb\u8005\u8bc4\u8bba\u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u4fbf\u662f\uff1a\u201d\u4f60\u8bf4\u4e0d\u80fd\u8fd9\u6837\u505a\uff0c\u4f46\u6211\u504f\u504f\u8fd9\u6837\u505a\u4e86\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e5f\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff01\u4e3a\u4ec0\u4e48\uff1f\u201c \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u901a\u5e38\u6709\u4e24\u4e2a\u7b54\u6848\u3002\u6700\u5e38\u89c1\u7684\u7b54\u6848\u662f\uff0c\u4f60\u7684\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u8868\u73b0\u51fa\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u53ea\u4e0d\u8fc7\u8be5\u672a\u5b9a\u4e49\u884c\u4e3a\u6070\u5de7\uff08\u6682\u65f6\uff09\u8f93\u51fa\u4e86\u4f60\u671f\u671b\u7684\u7ed3\u679c\u3002\u6539\u5929\uff08\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u7f16\u8bd1\u5668\u3001\u4f7f\u7528\u5176\u4ed6\u8ba1\u7b97\u673a\uff09\u518d\u8fd0\u884c\u65f6\uff0c\u53ef\u80fd\u672a\u5fc5\u5982\u6b64\u3002 \u8fd9\u4e2a\u95ee\u9898\u8fd8\u53ef\u4ee5\u8fd9\u6837\u56de\u7b54\uff1a\u6709\u4e9b\u7f16\u8bd1\u5668\u7684\u4f5c\u8005\uff0c\u5728\u5b9e\u73b0\u7279\u5b9a\u8bed\u8a00\u7684\u9700\u6c42\u65f6\uff0c\u8ba4\u4e3a\u67d0\u4e9b\u89c4\u5219\u8fc7\u4e8e\u4e25\u683c\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u6807\u51c6\u53ef\u80fd\u4f1a\u8bf4\uff0cX \u5fc5\u987b\u4f4d\u4e8e Y \u4e4b\u524d\u53d1\u751f\u3002\u4f46\u662f\u7f16\u8bd1\u5668\u4f5c\u8005\u786e\u8ba4\u4e3a\u8fd9\u4e48\u505a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u5e76\u4e14\u4f7f\u5f97 Y \u80fd\u591f\u5728\u6ca1\u6709\u6267\u884cX\u7684\u524d\u63d0\u4e0b\u6b63\u786e\u5de5\u4f5c\u3002\u8fd9\u4e48\u505a\u4e0d\u4f1a\u5f71\u54cd\u5230\u6b63\u786e\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u4ee3\u7801\u80fd\u591f\u6b63\u786e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\uff1a\u4f60\u4f7f\u7528\u7684\u7f16\u8bd1\u5668\u53ef\u80fd\u5e76\u6ca1\u6709\u5b8c\u5168\u9075\u5b88\u6807\u51c6\u3002\u8fd9\u79cd\u60c5\u51b5\u662f\u5b58\u5728\u7684\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u7f16\u8bd1\u5668\u7684\u6269\u5c55\u529f\u80fd\u6765\u907f\u514d\u8fd9\u4e9b\u95ee\u9898\uff0c\u5177\u4f53\u5185\u5bb9\u8bf7\u53c2\u8003 0.10 -- Configuring your compiler: Compiler extensions .","title":"\u672a\u5b9a\u4e49\u884c\u4e3a"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.07%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%91%BD%E5%90%8D%E6%A0%87%E8%AF%86%E7%AC%A6/","text":"1.7 \u5173\u952e\u5b57\u548c\u547d\u540d\u6807\u8bc6\u7b26 \u5173\u952e\u5b57 C++ \u9884\u7559\u4e86 92 \u4e2a\u8bcd\u81ea\u7528(\u5bf9\u4e8e C++20 \u800c\u8a00) \u3002\u8fd9\u4e9b\u8bcd\u79f0\u4e3a \u5173\u952e\u5b57 (\u6216\u4fdd\u7559\u5b57)\uff0c\u6bcf\u4e2a\u5173\u952e\u5b57\u5728C++\u4e2d\u90fd\u6709\u5176\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u4e0b\u8868\u5217\u4e3e\u4e86 C++ 20 \u4e2d\u7684\u5168\u90e8\u5173\u952e\u5b57\uff1a ![[keyword.png]] \u5173\u952e\u5b57\u540e\u6709\u6807\u8bc6 C++20 \u7684\uff0c\u5c5e\u4e8e C++20 \u65b0\u589e\u7684\u5173\u952e\u5b57\u3002\u5982\u679c\u4f60\u7684\u7f16\u8bd1\u5668\u4e0d\u652f\u6301 C++ 20\uff08\u6216\u8005\u5176\u5177\u5907 C++20 \u529f\u80fd\u4f46\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff09\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u5c06\u4e0d\u5177\u5907\u5b9e\u9645\u7528\u9014\u3002 C++ \u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff1a override \u3001 final \u3001 import \u548c module \u3002\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5728\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662fC++\u4fdd\u7559\u5b57\u3002 \u4f60\u5df2\u7ecf\u63a5\u89e6\u8fc7\u5176\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u5305\u62ec int \u548c return \u3002\u8fd9\u4e9b\u5173\u952e\u5b57\u3001\u6807\u8bc6\u7b26\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u7b97\u7b26\u5c31\u6784\u6210\u4e86 C++ \u8bed\u8a00\u7684\u5168\u90e8\uff08\u9884\u5904\u7406\u5668\u6307\u4ee4\u9664\u5916\uff09\u3002\u7531\u4e8e\u5173\u952e\u5b57\u548c\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u56e0\u6b64\u4f60\u7684 IDE \u901a\u5e38\u4f1a\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u540c\u7684\u989c\u8272\u4ee5\u4f7f\u5176\u66f4\u52a0\u9192\u76ee\u3002 \u5728\u5b8c\u6210\u4e86\u672c\u6559\u7a0b\u7684\u5b66\u4e60\u540e\uff0c\u4f60\u4f1a\u7406\u89e3\u4e0a\u8ff0\u5173\u952e\u5b57\u4e2d\u51e0\u4e4e\u5168\u90e8\u7684\u529f\u80fd\uff01 \u547d\u540d\u89c4\u5219 \u63d0\u9192\u4e00\u4e0b\uff0c\u53d8\u91cf\uff08\u6216\u51fd\u6570\u3001\u7c7b\u578b\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\uff09\u7684\u540d\u79f0\u90fd\u79f0\u4e3a\u6807\u8bc6\u7b26\u3002C++ \u5141\u8bb8\u4f60\u7075\u6d3b\u5730\u9009\u62e9\u6807\u8bc6\u7b26\u3002\u4e0d\u8fc7\uff0c\u5728\u9009\u62e9\u547d\u540d\u6807\u8bc6\u7b26\u65f6\uff0c\u4f60\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u6807\u8bc6\u7b26\u4e0d\u80fd\u662f\u5173\u952e\u5b57\uff0c\u5173\u952e\u5b57\u662f\u8bed\u8a00\u7684\u4fdd\u7559\u5b57\uff1b \u6807\u8bc6\u7b26\u53ea\u80fd\u4f7f\u7528\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6807\u8bc6\u7b26\u4e2d\u4e0d\u80fd\u5305\u542b\u7b26\u53f7\uff08\u9664\u4e86\u4e0b\u5212\u7ebf\uff09\u6216\u8005\u7a7a\u767d\u7b26\uff08\u7a7a\u683c\u6216\u5236\u8868\u7b26\uff09\uff1b \u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\u5747\u53ef\uff09\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u591f\u4ee5\u6570\u5b57\u5f00\u5934\uff1b C++ \u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u56e0\u6b64\u5b83\u4f1a\u533a\u5206\u5927\u5c0f\u5199\u5b57\u6bcd\u3002 nvalue \u548c nValue \u662f\u4e0d\u540c\u7684\uff0c\u548c NVALUE \u4e5f\u4e0d\u540c\uff0c \u547d\u540d\u6700\u4f73\u5b9e\u8df5 \u73b0\u5728\uff0c\u60f3\u5fc5\u4f60\u5df2\u7ecf\u77e5\u9053 \u5982\u4f55 \u4e3a\u53d8\u91cf\u547d\u540d\u4e86\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u804a\u804a\uff0c\u4f60 \u5e94\u8be5\u5982\u4f55 \u4e3a\u53d8\u91cf\uff08\u6216\u51fd\u6570\uff09\u547d\u540d\u3002 \u9996\u5148\uff0cC++ \u4e2d\u7ea6\u5b9a\u4fd7\u6210\u7684\u662f\uff0c\u53d8\u91cf\u540d\u5e94\u8be5\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u3002\u5982\u679c\u53d8\u91cf\u540d\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u6574\u4e2a\u5355\u8bcd\u90fd\u5e94\u8be5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u3002 1 2 3 4 5 int value ; // correct int Value ; // incorrect (should start with lower case letter) int VALUE ; // incorrect (should start with lower case letter) int VaLuE ; // incorrect (see your psychiatrist) ;) \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u540d\u540c\u6837\u4e5f\u662f\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\uff08\u5c3d\u7ba1\u5728\u8fd9\u4e00\u70b9\u4e0a\u6709\u5f88\u591a\u4e0d\u540c\u610f\u89c1\uff09\u3002\u6211\u4eec\u4f1a\u9075\u5faa\u8fd9\u4e00\u60ef\u4f8b\uff0c\u56e0\u4e3a main \u51fd\u6570\u5c31\u662f\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\uff08\u800c\u4e14 main \u51fd\u6570\u662f\u4efb\u4f55\u7a0b\u5e8f\u90fd\u9700\u8981\u6709\u7684\uff09\u3002\u6b64\u5916\uff0cC++\u6807\u51c6\u5e93\u4e2d\u7684\u6240\u6709\u51fd\u6570\u4e5f\u90fd\u9075\u5faa\u8fd9\u4e00\u539f\u5219\u3002 \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u547d\u540d\u6807\u8bc6\u7b26\u901a\u5e38\u7528\u4e8e\u547d\u540d\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u679a\u4e3e\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u8fd9\u4e9b\u7c7b\u578b\uff09\u3002 \u5982\u679c\u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\u7531\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u5e38\u89c1\u7684\u547d\u540d\u60ef\u4f8b\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u5272\u5355\u8bcd\uff0c\u79f0\u4e3a[[\u86c7\u5f62\u547d\u540d\u6cd5(snake_case)]]\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u4f7f\u7528\u5927\u5c0f\u5199\u95f4\u9694\u7684\u65b9\u6cd5\uff08\u6709\u65f6\u5019\u79f0\u4e3a\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5927\u5199\u5b57\u6bcd\u6bd4\u8f83\u7a81\u51fa\uff0c\u5c31\u50cf\u9a86\u9a7c\u7684\u9a7c\u5cf0\u4e00\u6837\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 int my_variable_name ; // correct (separated by underscores/snake_case) int my_function_name (); // correct (separated by underscores/snake_case) int myVariableName ; // correct (intercapped/CamelCase) int myFunctionName (); // correct (intercapped/CamelCase) int my variable name ; // invalid (whitespace not allowed) int my function name (); // invalid (whitespace not allowed) int MyVariableName ; // valid but incorrect (should start with lower case letter) int MyFunctionName (); // valid but incorrect (should start with lower case letter) \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u8bfb\u6027\u66f4\u597d\uff08\u5bf9\u4e8e\u86c7\u5f62\u547d\u540d\u6cd5\u6765\u8bf4\uff0c\u6709\u65f6\u4e0b\u5212\u7ebf\u5bb9\u6613\u548c\u7a7a\u683c\u6df7\u6dc6\uff09\u3002\u4f46\u662f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u5f88\u5e38\u89c1\uff0cC++ \u7684\u6807\u51c6\u5e93\u5728\u547d\u540d\u53d8\u91cf\u548c\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u7684\u5c31\u662f\u57fa\u4e8e\u4e0b\u5212\u7ebf\u7684\u86c7\u5f62\u547d\u540d\u6cd5\u3002\u6709\u65f6\u5019\uff0c\u4f60\u751a\u81f3\u4f1a\u9047\u5230\u6df7\u7528\u4e24\u79cd\u547d\u540d\u6cd5\u7684\u60c5\u51b5\uff0c\u86c7\u5f62\u547d\u540d\u6cd5\u7528\u4e8e\u53d8\u91cf\u540d\u800c\u9a7c\u5cf0\u547d\u540d\u6cd5\u5219\u7528\u4e8e\u51fd\u6570\u540d\u3002 \u5982\u679c\u4f60\u7684\u5de5\u4f5c\u662f\u5728\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5c31\u4e0d\u91cd\u8981\u4e86\u3002\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\u9075\u5faa\u4ed6\u4eba\u7684\u547d\u540d\u89c4\u5219\u800c\u4e0d\u662f\u6b7b\u677f\u7684\u9075\u5faa\u4e0a\u8ff0\u539f\u5219\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5f53\u57fa\u4e8e\u5df2\u6709\u7684\u4ee3\u7801\u8fdb\u884c\u5f00\u53d1\u65f6\uff0c\u8bf7\u4f7f\u7528\u8be5\u4ee3\u7801\u7684\u547d\u540d\u7ea6\u5b9a\uff08\u65e2\u662f\u5b83\u7684\u98ce\u683c\u4e0d\u7b26\u5408\u6700\u4f73\u5b9e\u8df5\uff09\u3002\u5f53\u4f60\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u8bf7\u9075\u5faa\u6700\u4f73\u5b9e\u8df5\u3002 \u5176\u6b21\uff0c\u547d\u540d\u65f6\u5e94\u5f53\u907f\u514d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u5e38\u5e38\u88ab\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e93\u6216\u7f16\u8bd1\u5668\u9884\u7559\u4f7f\u7528\u3002 \u7b2c\u4e09\uff0c\u547d\u540d\u5e94\u5f53\u80fd\u591f\u8868\u660e\u8be5\u53d8\u91cf\u5b58\u50a8\u6570\u636e\u7684\u542b\u4e49\uff08\u5c24\u5176\u662f\u5f53\u8ba1\u91cf\u5355\u4f4d\u4e0d\u660e\u663e\u7684\u65f6\u5019\uff09\u3002\u53d8\u91cf\u540d\u5e94\u8be5\u80fd\u591f\u5e2e\u52a9\u5176\u4ed6\u5bf9\u4f60\u4ee3\u7801\u4e0d\u751a\u4e86\u89e3\u7684\u5f00\u53d1\u8005\u5feb\u901f\u7406\u89e3\u5176\u7528\u9014\u3002\u751a\u81f3\uff0c\u5f53\u4f60\u5728\u4e09\u4e2a\u6708\u4e4b\u540e\u518d\u770b\u81ea\u5df1\u7684\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u6709\u53ef\u80fd\u770b\u4e0d\u61c2\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u90a3\u65f6\u5019\u4f60\u5c31\u4f1a\u5e86\u5e78\u81ea\u5df1\u8d77\u4e86\u6613\u4e8e\u7406\u89e3\u3001\u542b\u4e49\u6e05\u6670\u7684\u53d8\u91cf\u540d\u3002 \u4e0d\u8fc7\uff0c\u4e3a\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u53d8\u91cf\u53d6\u4e00\u4e2a\u8fc7\u5206\u590d\u6742\u7684\u540d\u79f0\u53cd\u5012\u6709\u788d\u4e8e\u7406\u89e3\uff0c\u5176\u5371\u5bb3\u4e0d\u4e9a\u4e8e\u7ed9\u91cd\u8981\u7684\u53d8\u91cf\u53d6\u4e00\u4e2a\u610f\u4e49\u6a21\u7cca\u7684\u540d\u5b57\u3002\u56e0\u6b64\uff0c\u547d\u540d\u7684\u4e00\u4e2a\u539f\u5219\u53ef\u4ee5\u662f\uff0c\u8ba9\u53d8\u91cf\u540d\u7684\u957f\u5ea6\u7b26\u5408\u5176\u88ab\u4f7f\u7528\u7684\u9891\u5ea6\u3002\u65e0\u5173\u7d27\u8981\u7684\u53d8\u91cf\u540d\u5e94\u8be5\u4f7f\u7528\u66f4\u77ed\u7684\u53d8\u91cf\u540d\uff08\u4f8b\u5982 i \uff09\u3002\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u53d8\u91cf\uff08\u4f8b\u5982\u67d0\u4e2a\u5728\u591a\u5904\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff09\u5219\u503c\u5f97\u62e5\u6709\u4e00\u4e2a\u66f4\u957f\u3001\u66f4\u5177\u89e3\u91ca\u6027\u7684\u53d8\u91cf\u540d\uff08\u4f8b\u5982\uff0c openFileOnDisk \u4f1a\u6bd4 open \u66f4\u5408\u9002\uff09\u3002 ![[naming.png]] \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u90fd\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u7f29\u5199\u3002\u5c3d\u7ba1\u4f7f\u7528\u7f29\u5199\u53ef\u4ee5\u7a0d\u5fae\u63d0\u9ad8\u4f60\u6572\u4ee3\u7801\u7684\u901f\u5ea6\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4f60\u7684\u4ee3\u7801\u96be\u4ee5\u88ab\u7406\u89e3\u3002\u65e2\u662f\u6709\u4e9b\u7f29\u5199\u5177\u6709\u660e\u786e\u7684\u542b\u4e49\uff0c\u4f46\u8bfb\u8005\u5728\u9047\u5230\u5b83\u7684\u65f6\u5019\u4ecd\u7136\u9700\u8981\u82b1\u4e9b\u65f6\u95f4\u6765\u641e\u6e05\u695a\u5b83\u7684\u542b\u4e49\u3002\u4ee3\u7801\u88ab\u9605\u8bfb\u7684\u65f6\u95f4\u8fdc\u957f\u4e8e\u5b83\u88ab\u7f16\u5199\u7684\u65f6\u95f4\uff0c\u4f60\u5728\u5199\u4ee3\u7801\u4e0a\u8282\u7701\u4e0b\u4e86\u7684\u65f6\u95f4\uff0c\u5c06\u6765\u90fd\u4f1a\u6d6a\u8d39\u5728\u5176\u4ed6\u9605\u8bfb\u8005\uff08\u751a\u81f3\u662f\u4f60\u81ea\u5df1\uff09\u7684\u8eab\u4e0a\u3002\u5982\u679c\u4f60\u5e0c\u671b\u52a0\u5feb\u7f16\u5199\u4ee3\u7801\u7684\u901f\u5ea6\uff0c\u8bf7\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002 \u6700\u540e\uff0c\u6e05\u6670\u660e\u786e\u7684\u6ce8\u91ca\u4e5f\u5927\u6709\u52a9\u76ca\u3002\u4f8b\u5982\uff0c\u53d8\u91cf numberOfChars \u7528\u4e8e\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\u3002\u4f46\u662f\uff0c\u5b57\u7b26\u4e32\u201cHello World!\u201d\u4e2d\u7a76\u7adf\u5305\u542b\u51e0\u4e2a\u5b57\u7b26\u5462\uff1f10\u4e2a\uff0c11\u4e2a\u8fd8\u662f12\u4e2a\uff1f\u8fd9\u53d6\u51b3\u4e8e\u4f60\u662f\u5426\u8003\u8651\u7a7a\u683c\u548c\u6807\u70b9\u7b26\u53f7\u3002\u4f46\u662f\uff0c\u5c06\u8be5\u53d8\u91cf\u547d\u540d\u4e3a numberOfCharsIncludingWhitespaceAndPunctuation \u5c31\u592a\u957f\u4e86\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5728\u5b9a\u4e49\u53d8\u91cf\u65f6\u4f7f\u7528\u6ce8\u91ca\u7684\u65b9\u5f0f\u5e2e\u52a9\u8bfb\u8005\u53bb\u7406\u89e3\u3002 1 2 // holds number of chars in a piece of text -- including whitespace and punctuation! int numberOfChars ;","title":"1.7 \u5173\u952e\u5b57\u548c\u547d\u540d\u6807\u8bc6\u7b26"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.07%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%91%BD%E5%90%8D%E6%A0%87%E8%AF%86%E7%AC%A6/#17","text":"","title":"1.7 \u5173\u952e\u5b57\u548c\u547d\u540d\u6807\u8bc6\u7b26"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.07%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%91%BD%E5%90%8D%E6%A0%87%E8%AF%86%E7%AC%A6/#_1","text":"C++ \u9884\u7559\u4e86 92 \u4e2a\u8bcd\u81ea\u7528(\u5bf9\u4e8e C++20 \u800c\u8a00) \u3002\u8fd9\u4e9b\u8bcd\u79f0\u4e3a \u5173\u952e\u5b57 (\u6216\u4fdd\u7559\u5b57)\uff0c\u6bcf\u4e2a\u5173\u952e\u5b57\u5728C++\u4e2d\u90fd\u6709\u5176\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u4e0b\u8868\u5217\u4e3e\u4e86 C++ 20 \u4e2d\u7684\u5168\u90e8\u5173\u952e\u5b57\uff1a ![[keyword.png]] \u5173\u952e\u5b57\u540e\u6709\u6807\u8bc6 C++20 \u7684\uff0c\u5c5e\u4e8e C++20 \u65b0\u589e\u7684\u5173\u952e\u5b57\u3002\u5982\u679c\u4f60\u7684\u7f16\u8bd1\u5668\u4e0d\u652f\u6301 C++ 20\uff08\u6216\u8005\u5176\u5177\u5907 C++20 \u529f\u80fd\u4f46\u9ed8\u8ba4\u662f\u5173\u95ed\u7684\uff09\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u5c06\u4e0d\u5177\u5907\u5b9e\u9645\u7528\u9014\u3002 C++ \u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff1a override \u3001 final \u3001 import \u548c module \u3002\u8fd9\u4e9b\u6807\u8bc6\u7b26\u5728\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662fC++\u4fdd\u7559\u5b57\u3002 \u4f60\u5df2\u7ecf\u63a5\u89e6\u8fc7\u5176\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u5b57\uff0c\u5305\u62ec int \u548c return \u3002\u8fd9\u4e9b\u5173\u952e\u5b57\u3001\u6807\u8bc6\u7b26\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u7b97\u7b26\u5c31\u6784\u6210\u4e86 C++ \u8bed\u8a00\u7684\u5168\u90e8\uff08\u9884\u5904\u7406\u5668\u6307\u4ee4\u9664\u5916\uff09\u3002\u7531\u4e8e\u5173\u952e\u5b57\u548c\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u56e0\u6b64\u4f60\u7684 IDE \u901a\u5e38\u4f1a\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u540c\u7684\u989c\u8272\u4ee5\u4f7f\u5176\u66f4\u52a0\u9192\u76ee\u3002 \u5728\u5b8c\u6210\u4e86\u672c\u6559\u7a0b\u7684\u5b66\u4e60\u540e\uff0c\u4f60\u4f1a\u7406\u89e3\u4e0a\u8ff0\u5173\u952e\u5b57\u4e2d\u51e0\u4e4e\u5168\u90e8\u7684\u529f\u80fd\uff01","title":"\u5173\u952e\u5b57"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.07%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%91%BD%E5%90%8D%E6%A0%87%E8%AF%86%E7%AC%A6/#_2","text":"\u63d0\u9192\u4e00\u4e0b\uff0c\u53d8\u91cf\uff08\u6216\u51fd\u6570\u3001\u7c7b\u578b\u4ee5\u53ca\u5176\u4ed6\u4efb\u4f55\u5143\u7d20\uff09\u7684\u540d\u79f0\u90fd\u79f0\u4e3a\u6807\u8bc6\u7b26\u3002C++ \u5141\u8bb8\u4f60\u7075\u6d3b\u5730\u9009\u62e9\u6807\u8bc6\u7b26\u3002\u4e0d\u8fc7\uff0c\u5728\u9009\u62e9\u547d\u540d\u6807\u8bc6\u7b26\u65f6\uff0c\u4f60\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a \u6807\u8bc6\u7b26\u4e0d\u80fd\u662f\u5173\u952e\u5b57\uff0c\u5173\u952e\u5b57\u662f\u8bed\u8a00\u7684\u4fdd\u7559\u5b57\uff1b \u6807\u8bc6\u7b26\u53ea\u80fd\u4f7f\u7528\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6807\u8bc6\u7b26\u4e2d\u4e0d\u80fd\u5305\u542b\u7b26\u53f7\uff08\u9664\u4e86\u4e0b\u5212\u7ebf\uff09\u6216\u8005\u7a7a\u767d\u7b26\uff08\u7a7a\u683c\u6216\u5236\u8868\u7b26\uff09\uff1b \u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\u5747\u53ef\uff09\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u591f\u4ee5\u6570\u5b57\u5f00\u5934\uff1b C++ \u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u56e0\u6b64\u5b83\u4f1a\u533a\u5206\u5927\u5c0f\u5199\u5b57\u6bcd\u3002 nvalue \u548c nValue \u662f\u4e0d\u540c\u7684\uff0c\u548c NVALUE \u4e5f\u4e0d\u540c\uff0c","title":"\u547d\u540d\u89c4\u5219"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.07%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%91%BD%E5%90%8D%E6%A0%87%E8%AF%86%E7%AC%A6/#_3","text":"\u73b0\u5728\uff0c\u60f3\u5fc5\u4f60\u5df2\u7ecf\u77e5\u9053 \u5982\u4f55 \u4e3a\u53d8\u91cf\u547d\u540d\u4e86\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u804a\u804a\uff0c\u4f60 \u5e94\u8be5\u5982\u4f55 \u4e3a\u53d8\u91cf\uff08\u6216\u51fd\u6570\uff09\u547d\u540d\u3002 \u9996\u5148\uff0cC++ \u4e2d\u7ea6\u5b9a\u4fd7\u6210\u7684\u662f\uff0c\u53d8\u91cf\u540d\u5e94\u8be5\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u3002\u5982\u679c\u53d8\u91cf\u540d\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u6574\u4e2a\u5355\u8bcd\u90fd\u5e94\u8be5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u3002 1 2 3 4 5 int value ; // correct int Value ; // incorrect (should start with lower case letter) int VALUE ; // incorrect (should start with lower case letter) int VaLuE ; // incorrect (see your psychiatrist) ;) \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u540d\u540c\u6837\u4e5f\u662f\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\uff08\u5c3d\u7ba1\u5728\u8fd9\u4e00\u70b9\u4e0a\u6709\u5f88\u591a\u4e0d\u540c\u610f\u89c1\uff09\u3002\u6211\u4eec\u4f1a\u9075\u5faa\u8fd9\u4e00\u60ef\u4f8b\uff0c\u56e0\u4e3a main \u51fd\u6570\u5c31\u662f\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\uff08\u800c\u4e14 main \u51fd\u6570\u662f\u4efb\u4f55\u7a0b\u5e8f\u90fd\u9700\u8981\u6709\u7684\uff09\u3002\u6b64\u5916\uff0cC++\u6807\u51c6\u5e93\u4e2d\u7684\u6240\u6709\u51fd\u6570\u4e5f\u90fd\u9075\u5faa\u8fd9\u4e00\u539f\u5219\u3002 \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u547d\u540d\u6807\u8bc6\u7b26\u901a\u5e38\u7528\u4e8e\u547d\u540d\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u679a\u4e3e\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u8fd9\u4e9b\u7c7b\u578b\uff09\u3002 \u5982\u679c\u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\u7531\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u5e38\u89c1\u7684\u547d\u540d\u60ef\u4f8b\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u5272\u5355\u8bcd\uff0c\u79f0\u4e3a[[\u86c7\u5f62\u547d\u540d\u6cd5(snake_case)]]\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u4f7f\u7528\u5927\u5c0f\u5199\u95f4\u9694\u7684\u65b9\u6cd5\uff08\u6709\u65f6\u5019\u79f0\u4e3a\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5927\u5199\u5b57\u6bcd\u6bd4\u8f83\u7a81\u51fa\uff0c\u5c31\u50cf\u9a86\u9a7c\u7684\u9a7c\u5cf0\u4e00\u6837\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 int my_variable_name ; // correct (separated by underscores/snake_case) int my_function_name (); // correct (separated by underscores/snake_case) int myVariableName ; // correct (intercapped/CamelCase) int myFunctionName (); // correct (intercapped/CamelCase) int my variable name ; // invalid (whitespace not allowed) int my function name (); // invalid (whitespace not allowed) int MyVariableName ; // valid but incorrect (should start with lower case letter) int MyFunctionName (); // valid but incorrect (should start with lower case letter) \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u8bfb\u6027\u66f4\u597d\uff08\u5bf9\u4e8e\u86c7\u5f62\u547d\u540d\u6cd5\u6765\u8bf4\uff0c\u6709\u65f6\u4e0b\u5212\u7ebf\u5bb9\u6613\u548c\u7a7a\u683c\u6df7\u6dc6\uff09\u3002\u4f46\u662f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u5f88\u5e38\u89c1\uff0cC++ \u7684\u6807\u51c6\u5e93\u5728\u547d\u540d\u53d8\u91cf\u548c\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u7684\u5c31\u662f\u57fa\u4e8e\u4e0b\u5212\u7ebf\u7684\u86c7\u5f62\u547d\u540d\u6cd5\u3002\u6709\u65f6\u5019\uff0c\u4f60\u751a\u81f3\u4f1a\u9047\u5230\u6df7\u7528\u4e24\u79cd\u547d\u540d\u6cd5\u7684\u60c5\u51b5\uff0c\u86c7\u5f62\u547d\u540d\u6cd5\u7528\u4e8e\u53d8\u91cf\u540d\u800c\u9a7c\u5cf0\u547d\u540d\u6cd5\u5219\u7528\u4e8e\u51fd\u6570\u540d\u3002 \u5982\u679c\u4f60\u7684\u5de5\u4f5c\u662f\u5728\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5c31\u4e0d\u91cd\u8981\u4e86\u3002\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\u9075\u5faa\u4ed6\u4eba\u7684\u547d\u540d\u89c4\u5219\u800c\u4e0d\u662f\u6b7b\u677f\u7684\u9075\u5faa\u4e0a\u8ff0\u539f\u5219\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5f53\u57fa\u4e8e\u5df2\u6709\u7684\u4ee3\u7801\u8fdb\u884c\u5f00\u53d1\u65f6\uff0c\u8bf7\u4f7f\u7528\u8be5\u4ee3\u7801\u7684\u547d\u540d\u7ea6\u5b9a\uff08\u65e2\u662f\u5b83\u7684\u98ce\u683c\u4e0d\u7b26\u5408\u6700\u4f73\u5b9e\u8df5\uff09\u3002\u5f53\u4f60\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u8bf7\u9075\u5faa\u6700\u4f73\u5b9e\u8df5\u3002 \u5176\u6b21\uff0c\u547d\u540d\u65f6\u5e94\u5f53\u907f\u514d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u5e38\u5e38\u88ab\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e93\u6216\u7f16\u8bd1\u5668\u9884\u7559\u4f7f\u7528\u3002 \u7b2c\u4e09\uff0c\u547d\u540d\u5e94\u5f53\u80fd\u591f\u8868\u660e\u8be5\u53d8\u91cf\u5b58\u50a8\u6570\u636e\u7684\u542b\u4e49\uff08\u5c24\u5176\u662f\u5f53\u8ba1\u91cf\u5355\u4f4d\u4e0d\u660e\u663e\u7684\u65f6\u5019\uff09\u3002\u53d8\u91cf\u540d\u5e94\u8be5\u80fd\u591f\u5e2e\u52a9\u5176\u4ed6\u5bf9\u4f60\u4ee3\u7801\u4e0d\u751a\u4e86\u89e3\u7684\u5f00\u53d1\u8005\u5feb\u901f\u7406\u89e3\u5176\u7528\u9014\u3002\u751a\u81f3\uff0c\u5f53\u4f60\u5728\u4e09\u4e2a\u6708\u4e4b\u540e\u518d\u770b\u81ea\u5df1\u7684\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u6709\u53ef\u80fd\u770b\u4e0d\u61c2\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u90a3\u65f6\u5019\u4f60\u5c31\u4f1a\u5e86\u5e78\u81ea\u5df1\u8d77\u4e86\u6613\u4e8e\u7406\u89e3\u3001\u542b\u4e49\u6e05\u6670\u7684\u53d8\u91cf\u540d\u3002 \u4e0d\u8fc7\uff0c\u4e3a\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u53d8\u91cf\u53d6\u4e00\u4e2a\u8fc7\u5206\u590d\u6742\u7684\u540d\u79f0\u53cd\u5012\u6709\u788d\u4e8e\u7406\u89e3\uff0c\u5176\u5371\u5bb3\u4e0d\u4e9a\u4e8e\u7ed9\u91cd\u8981\u7684\u53d8\u91cf\u53d6\u4e00\u4e2a\u610f\u4e49\u6a21\u7cca\u7684\u540d\u5b57\u3002\u56e0\u6b64\uff0c\u547d\u540d\u7684\u4e00\u4e2a\u539f\u5219\u53ef\u4ee5\u662f\uff0c\u8ba9\u53d8\u91cf\u540d\u7684\u957f\u5ea6\u7b26\u5408\u5176\u88ab\u4f7f\u7528\u7684\u9891\u5ea6\u3002\u65e0\u5173\u7d27\u8981\u7684\u53d8\u91cf\u540d\u5e94\u8be5\u4f7f\u7528\u66f4\u77ed\u7684\u53d8\u91cf\u540d\uff08\u4f8b\u5982 i \uff09\u3002\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u53d8\u91cf\uff08\u4f8b\u5982\u67d0\u4e2a\u5728\u591a\u5904\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff09\u5219\u503c\u5f97\u62e5\u6709\u4e00\u4e2a\u66f4\u957f\u3001\u66f4\u5177\u89e3\u91ca\u6027\u7684\u53d8\u91cf\u540d\uff08\u4f8b\u5982\uff0c openFileOnDisk \u4f1a\u6bd4 open \u66f4\u5408\u9002\uff09\u3002 ![[naming.png]] \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u90fd\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u7f29\u5199\u3002\u5c3d\u7ba1\u4f7f\u7528\u7f29\u5199\u53ef\u4ee5\u7a0d\u5fae\u63d0\u9ad8\u4f60\u6572\u4ee3\u7801\u7684\u901f\u5ea6\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4f60\u7684\u4ee3\u7801\u96be\u4ee5\u88ab\u7406\u89e3\u3002\u65e2\u662f\u6709\u4e9b\u7f29\u5199\u5177\u6709\u660e\u786e\u7684\u542b\u4e49\uff0c\u4f46\u8bfb\u8005\u5728\u9047\u5230\u5b83\u7684\u65f6\u5019\u4ecd\u7136\u9700\u8981\u82b1\u4e9b\u65f6\u95f4\u6765\u641e\u6e05\u695a\u5b83\u7684\u542b\u4e49\u3002\u4ee3\u7801\u88ab\u9605\u8bfb\u7684\u65f6\u95f4\u8fdc\u957f\u4e8e\u5b83\u88ab\u7f16\u5199\u7684\u65f6\u95f4\uff0c\u4f60\u5728\u5199\u4ee3\u7801\u4e0a\u8282\u7701\u4e0b\u4e86\u7684\u65f6\u95f4\uff0c\u5c06\u6765\u90fd\u4f1a\u6d6a\u8d39\u5728\u5176\u4ed6\u9605\u8bfb\u8005\uff08\u751a\u81f3\u662f\u4f60\u81ea\u5df1\uff09\u7684\u8eab\u4e0a\u3002\u5982\u679c\u4f60\u5e0c\u671b\u52a0\u5feb\u7f16\u5199\u4ee3\u7801\u7684\u901f\u5ea6\uff0c\u8bf7\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u3002 \u6700\u540e\uff0c\u6e05\u6670\u660e\u786e\u7684\u6ce8\u91ca\u4e5f\u5927\u6709\u52a9\u76ca\u3002\u4f8b\u5982\uff0c\u53d8\u91cf numberOfChars \u7528\u4e8e\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u7684\u4e2a\u6570\u3002\u4f46\u662f\uff0c\u5b57\u7b26\u4e32\u201cHello World!\u201d\u4e2d\u7a76\u7adf\u5305\u542b\u51e0\u4e2a\u5b57\u7b26\u5462\uff1f10\u4e2a\uff0c11\u4e2a\u8fd8\u662f12\u4e2a\uff1f\u8fd9\u53d6\u51b3\u4e8e\u4f60\u662f\u5426\u8003\u8651\u7a7a\u683c\u548c\u6807\u70b9\u7b26\u53f7\u3002\u4f46\u662f\uff0c\u5c06\u8be5\u53d8\u91cf\u547d\u540d\u4e3a numberOfCharsIncludingWhitespaceAndPunctuation \u5c31\u592a\u957f\u4e86\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5728\u5b9a\u4e49\u53d8\u91cf\u65f6\u4f7f\u7528\u6ce8\u91ca\u7684\u65b9\u5f0f\u5e2e\u52a9\u8bfb\u8005\u53bb\u7406\u89e3\u3002 1 2 // holds number of chars in a piece of text -- including whitespace and punctuation! int numberOfChars ;","title":"\u547d\u540d\u6700\u4f73\u5b9e\u8df5"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.8 \u2014 Whitespace and basic formatting - \u4f5c\u8005\uff1a ALEX - 2021-10-28 1.8 \u7a7a\u767d\u548c\u4ee3\u7801\u57fa\u672c\u683c\u5f0f [[\u7a7a\u767d(Whitespace)]]\u8fd9\u4e2a\u672f\u8bed\uff0c\u6307\u7684\u662f\u90a3\u4e9b\u51fa\u4e8e\u6392\u7248\u76ee\u7684\u800c\u4f7f\u7528\u7684\u7a7a\u767d\u5b57\u7b26\u3002\u5728 C++ \u4e2d\uff0c\u7a7a\u767d\u6307\u7684\u662f\u7a7a\u683c\u7b26\u3001\u5236\u8868\u7b26\u548c\u6362\u884c\u7b26\u3002C++ \u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u5ffd\u7565\u7a7a\u767d\uff08\u5904\u7406\u6587\u672c\u5b57\u9762\u91cf\u65f6\u662f\u4e00\u4e2a\u7279\u4f8b\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4 C++ \u662f\u4e00\u4e2a\u7a7a\u683c\u65e0\u5173\uff08whitespace-independent\uff09\u7684\u8bed\u8a00\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u51e0\u884c\u4ee3\u7801\u7684\u6548\u679c\u5176\u5b9e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; \u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u5373\u4f7f\u88ab\u5206\u5272\u4e3a\u4e24\u884c\uff0c\u5b83\u4e5f\u80fd\u591f\u6b63\u5e38\u7f16\u8bd1\u3002 \u4e0b\u9762\u7684\u51fd\u6570\u6548\u679c\u4e5f\u5b8c\u5168\u4e00\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } \u4e00\u4e2a\u4f8b\u5916\u662f\uff0cC++\u7f16\u8bd1\u5668\u5e76\u4e0d\u4f1a\u5ffd\u7565\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u767d\uff0c\u4f8b\u5982 \"Hello world!\" \u3002 1 \"Hello world!\" \u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u548c\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u4e00\u6837\u7684\u3002 1 \"Hello world!\" \u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u4f1a\u88ab\u539f\u5c01\u4e0d\u52a8\u7684\u6253\u5370\u5904\u7406\u3002 \u5728\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6362\u884c\u662f\u4e0d\u5408\u6cd5\u7684\uff1a 1 2 std :: cout << \"Hello world ! \"; // Not allowed! \u53ea\u4f7f\u7528\u7a7a\u767d\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u6362\u884c\u548c\u56de\u8f66\uff09\u5206\u5272\u7684\u6587\u672c\uff0c\u6700\u7ec8\u5c06\u4f1a\u88ab\u8fde\u63a5\u5728\u4e00\u8d77\uff1a 1 2 std :: cout << \"Hello \" \"world!\" ; // prints \"Hello world!\" \u53e6\u5916\u4e00\u4e2a\u7279\u4f8b\u662f\uff0cC++ \u7684\u7f16\u8bd1\u5668\u4f1a\u5173\u6ce8\u5355\u884c\u6ce8\u91ca\uff08 // \uff09\u4e2d\u7684\u7a7a\u767d\u7b26\u3002\u5355\u884c\u6ce8\u91ca\u53ea\u4f1a\u5230\u8be5\u884c\u672b\u5c3e\u622a\u6b62\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u6709\u95ee\u9898\u7684\uff1a 1 2 std :: cout << \"Hello world!\" ; // Here is a single-line comment this is not part of the comment \u57fa\u672c\u4ee3\u7801\u683c\u5f0f \u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0cC++ \u5e76\u4e0d\u4f1a\u5f3a\u5236\u7a0b\u5e8f\u5458\u4f7f\u7528\u67d0\u79cd\u6392\u7248\u98ce\u683c\uff08\u8fd8\u8bb0\u5f97\u5417\uff1f\u76f8\u4fe1\u7a0b\u5e8f\u5458\uff01\uff09\u3002C++ \u4e2d\u6709\u5f88\u591a\u53ef\u4ee5\u4f7f\u7528\u7684\u6392\u7248\u65b9\u5f0f\uff0c\u5173\u4e8e\u54ea\u4e00\u79cd\u624d\u662f\u6700\u4f73\u7684\u65b9\u5f0f\uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u770b\u6cd5\u3002\u6211\u4eec\u7684\u57fa\u672c\u539f\u5219\u662f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u6700\u5f3a\u3001\u4e00\u6267\u884c\u6700\u597d\u7684\u90a3\u79cd\u6392\u7248\u98ce\u683c\uff0c\u5c31\u662f\u6700\u597d\u7684\u3002 \u672c\u6559\u7a0b\u5efa\u8bae\u7684\u6392\u7248\u89c4\u8303\u5982\u4e0b\uff1a 1.\u4f7f\u7528\u5236\u8868\u7b26\u548c\u7a7a\u683c\u8fdb\u884c\u7f29\u8fdb\u90fd\u662f\u5141\u8bb8\u7684 (\u5927\u591a\u6570\u7684 IDE \u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u52a8\u5c06\u5236\u8868\u7b26\u8f6c\u6362\u4e3a\u89c4\u5b9a\u4e2a\u6570\u7684\u7a7a\u683c\uff09\u3002\u5f00\u53d1\u8005\u4f7f\u7528\u7a7a\u683c\u8fdb\u884c\u6392\u7248\u5c24\u5176\u5185\u5728\u7684\u903b\u8f91\uff0c\u6bd5\u7adf\u4f7f\u7528\u201d\u7a7a\u683c\u201c\u6765\u521b\u5efa\u4ee3\u7801\u4e4b\u95f4\u7684\u201d\u7a7a\u767d\u201c\u662f\u5929\u7ecf\u5730\u4e49\u7684\u3002\u4f7f\u7528\u7a7a\u683c\u6dfb\u52a0\u7684\u7a7a\u767d\uff0c\u4e0d\u8bba\u5728\u4ec0\u4e48\u7f16\u8f91\u5668\u4e0b\uff0c\u770b\u8d77\u6765\u90fd\u662f\u4e00\u81f4\u7684\u3002\u800c\u4f7f\u7528\u5236\u8868\u7b26\u8fdb\u884c\u7f29\u8fdb\u7684\u7a0b\u5e8f\u5458\u4f1a\u5bf9\u4e0a\u8ff0\u884c\u4e3a\u611f\u5230\u56f0\u60d1\uff0c\u5236\u8868\u7b26\u5c31\u662f\u4e3a\u4e86\u7f29\u8fdb\u800c\u5b58\u5728\u7684\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5462\uff1f\u66f4\u4f55\u51b5\u4f60\u8fd8\u53ef\u4ee5\u81ea\u7531\u63a7\u5236\u5176\u7f29\u8fdb\u7684\u5bbd\u5ea6\u3002\u8fd9\u4e2a\u95ee\u9898\u6ca1\u6709\u6240\u8c13\u201d\u6b63\u786e\u201c\u7684\u7b54\u6848\uff0c\u4e89\u8bba\u5b83\u7684\u5bf9\u9519\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5c31\u597d\u6bd4\u4e89\u8bba\u7cbd\u5b50\u5e94\u8be5\u662f\u751c\u7684\u8fd8\u662f\u54b8\u7684\uff0c\u56e0\u4e3a\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\u7684\u53e3\u5473\u3002 \u4e0d\u8bba\u90a3\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u5bbd\u5ea6\u4f5c\u4e3a\u7f29\u8fdb\u7684\u5bbd\u5ea6\u3002\u6709\u4e9bIDE\u9ed8\u8ba4\u7684\u7f29\u8fdb\u5bbd\u5ea6\u662f3\u4e2a\u7a7a\u683c\uff0c\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 2.\u51fd\u6570\u62ec\u53f7\u7684\u6392\u7248\u6709\u4e24\u79cd\u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u5f0f\u3002 Google C++ \u98ce\u683c\u6307\u5357\u5efa\u8bae\u7684\u98ce\u683c\u662f\u82b1\u62ec\u53f7\u4e0d\u6362\u884c\uff1a 1 2 int main () { } \u8fd9\u4e48\u505a\u7684\u4f9d\u636e\u662f\uff0c\u5b83\u80fd\u591f\u51cf\u5c11\u7eb5\u5411\u7a7a\u767d\u7684\u4ea7\u751f\uff08\u62ec\u53f7\u5355\u72ec\u5360\u7528\u4e00\u884c\u662f\u4e0d\u5212\u7b97\u7684\uff09\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u6709\u9650\u7684\u5c4f\u5e55\u4e2d\u663e\u793a\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u8fd9\u80fd\u591f\u5e2e\u52a9\u4f60\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u503e\u5411\u4e8e\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u5373\u82b1\u62ec\u53f7\u53e6\u8d77\u4e00\u884c\uff1a 1 2 3 int main () { } \u8fd9\u4e48\u505a\u53ef\u4ee5\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u56e0\u4e3a\u4e00\u5bf9\u82b1\u62ec\u53f7\u603b\u662f\u5177\u6709\u76f8\u540c\u7684\u7f29\u8fdb\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u51cf\u5c11\u72af\u9519\u7684\u51e0\u7387\u3002\u5982\u679c\u7f16\u8bd1\u5668\u62a5\u544a\u4e86\u62ec\u53f7\u4e0d\u5339\u914d\u7684\u9519\u8bef\uff0c\u90a3\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u627e\u5230\u95ee\u9898\u6240\u5728\u3002 3.\u6bcf\u4e00\u5c42\u82b1\u62ec\u53f7\u4e2d\u7684\u8bed\u53e5\u90fd\u5fc5\u987b\u8fdb\u884c\u7f29\u8fdb\u4e00\u7ea7\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 int main () { std :: cout << \"Hello world! \\n \" ; // tabbed in one tab (4 spaces) std :: cout << \"Nice to meet you. \\n \" ; // tabbed in one tab (4 spaces) } 4.\u6bcf\u4e00\u884c\u4ee3\u7801\u90fd\u4e0d\u5e94\u8be5\u592a\u957f\u3002\u5e38\u89c1\u7684\u89c4\u5219\u662f\uff1a\u5355\u884c\u4e0d\u80fd\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u4e00\u884c\u4ee3\u7801\u592a\u957f\uff0c\u5b83\u5c31\u5e94\u5f53\u88ab\u5206\u5272\u4e3a\u591a\u884c\uff08\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u5206\u5272\uff09\u3002\u5177\u4f53\u64cd\u4f5c\u65f6\u53ef\u4ee5\u5c06\u5404\u4e2a\u5b50\u884c\u989d\u5916\u7f29\u8fdb\u4e00\u7ea7\uff0c\u6216\u8005\uff0c\u5982\u679c\u5b50\u884c\u4e4b\u95f4\u975e\u5e38\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u90fd\u5bf9\u9f50\u5230\u4e0a\u9762\u7684\u884c\uff08\u53ef\u8bfb\u6027\u66f4\u597d\uff09\u3002 1 2 3 4 5 6 7 8 9 10 int main () { std :: cout << \"This is a really, really, really, really, really, really, really, \" \"really long line \\n \" ; // one extra indentation for continuation line std :: cout << \"This is another really, really, really, really, really, really, really, \" \"really long line \\n \" ; // text aligned with the previous line for continuation line std :: cout << \"This one is short \\n \" ; } \u8fd9\u4e48\u505a\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u884c\u4ee3\u7801\u90fd\u5177\u6709\u5f88\u597d\u7684\u53ef\u8bfb\u6027\u3002\u5728\u5bbd\u5c4f\u663e\u793a\u5668\u4e0a\uff0c\u8fd9\u4e48\u505a\u8fd8\u53ef\u4ee5\u5141\u8bb8\u4f60\u5c06\u4e24\u4e2a\u4ee3\u7801\u7a97\u53e3\u5e76\u6392\u663e\u793a\uff0c\u8f7b\u677e\u5730\u5bf9\u6bd4\u5b83\u4eec\u7684\u5dee\u5f02\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5355\u884c\u4ee3\u7801\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002 [!TIP] \u5c0f\u8d34\u58eb \u5f88\u591a\u7f16\u8f91\u5668\u90fd\u96c6\u6210\uff08\u6216\u901a\u8fc7\u63d2\u4ef6/\u6269\u5c55\uff09\u4e86 \u5217\u6307\u793a\u5668 \uff0c\u80fd\u591f\u663e\u793a\u51fa\u7279\u5b9a\u5217\u7684\u4f4d\u7f6e\uff08\u4f8b\u598280\u4e2a\u5b57\u7b26\u5904\uff09\u3002\u56e0\u6b64\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5224\u65ad\u4f60\u7684\u4ee3\u7801\u884c\u662f\u4e0d\u662f\u8d85\u957f\u4e86\u3002\u641c\u7d22\u7f16\u8f91\u5668\u540d+\u201cColumn guide\u201d\u6765\u67e5\u8be2\u4f60\u7684\u7f16\u8f91\u5668\u662f\u5426\u652f\u6301\u8be5\u7279\u6027\u3002 \u8bd1\u6ce8\uff1a\u5728 VS Code \u4e2d\uff0c\u8fd9\u4e00\u7279\u6027\u53eb\u505a editor.rulers \uff0c\u53ef\u4ee5\u5728\u8bbe\u7f6e\u4e2d\u914d\u7f6e\u5176\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982 editor.rulers=[80] 5.\u5982\u679c\u4e00\u4e2a\u8f83\u957f\u7684\u884c\u88ab\u57fa\u4e8e\u8fd0\u7b97\u7b26\u5206\u5272\u4e3a\u4e86\u591a\u4e2a\u77ed\u884c\uff0c\u90a3\u4e48\u8fd0\u7b97\u7b26\u5e94\u8be5\u653e\u7f6e\u5728\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u800c\u4e0d\u662f\u4e0a\u4e00\u884c\u7684\u7ed3\u5c3e\uff1a 1 2 3 std :: cout << 3 + 4 + 5 + 6 * 7 * 8 ; \u8fd9\u4e48\u505a\u53ef\u4ee5\u660e\u786e\u7684\u8868\u660e\u4e0b\u4e00\u884c\u662f\u627f\u63a5\u81ea\u4e0a\u4e00\u884c\u7684\uff0c\u800c\u4e14\u4f60\u53ef\u4ee5\u5c06\u8fd0\u7b97\u7b26\u5de6\u5bf9\u9f50\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002 6.\u4f7f\u7528\u7a7a\u683c\u5c06\u503c\u3001\u6ce8\u91ca\u5bf9\u9f50\uff0c\u6216\u5728\u4ee3\u7801\u6bb5\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002 \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 4 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 4 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments make the code hard to read std :: cout << \"Yeah! \\n \" ; // especially when lines are different lengths \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments are easier to read std :: cout << \"Yeah! \\n \" ; // especially when all lined up \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 4 5 6 // cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // these comments make the code hard to read std :: cout << \"It is very nice to meet you! \\n \" ; // especially when all bunched together std :: cout << \"Yeah! \\n \" ; \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 4 5 6 7 8 // cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // these comments are easier to read std :: cout << \"It is very nice to meet you! \\n \" ; // when separated by whitespace std :: cout << \"Yeah! \\n \" ; \u672c\u6559\u7a0b\u5c06\u59cb\u7ec8\u8d2f\u5f7b\u4e0a\u8ff0\u6392\u7248\u7ea6\u5b9a\uff0c\u5b83\u4eec\u7ec8\u5c06\u4f1a\u79f0\u4e3a\u4f60\u4e60\u60ef\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u4ecb\u7ecd\u4fe1\u7684\u8bed\u8a00\u7279\u6027\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5bf9\u5e94\u5730\u4ecb\u7ecd\u5176\u9002\u7528\u7684\u4ee3\u7801\u6392\u7248\u98ce\u683c\u3002 C++ \u7ed9\u4e0e\u4e86\u4f60\u9009\u62e9\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u98ce\u683c\u7684\u6743\u5229\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u4ecd\u7136\u5f3a\u70c8\u63a8\u8350\u4f60\u4f7f\u7528\u4e0e\u6211\u4eec\u76f8\u540c\u7684\u4ee3\u7801\u98ce\u683c\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5343\u9524\u767e\u70bc\uff0c\u88ab\u65e0\u6570\u4eba\u6d4b\u8bd5\u540e\u5f97\u5230\u7684\u7ecf\u9a8c\uff0c\u5b83\u4eec\u80fd\u591f\u5728\u7f16\u7a0b\u8def\u4e0a\u52a9\u4f60\u4e00\u81c2\u4e4b\u529b\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u5728\u57fa\u4e8e\u4ed6\u4eba\u7684\u4ee3\u7801\u8fdb\u884c\u5de5\u4f5c\uff0c\u8bf7\u9002\u5e94\u5e76\u4f7f\u7528\u4ed6\u4eec\u7684\u4ee3\u7801\u98ce\u683c\uff0c\u98ce\u683c\u4e00\u81f4\u6027\u7684\u4f18\u5148\u7ea7\u8981\u9ad8\u4e8e\u5176\u4ed6\u3002 \u81ea\u52a8\u6392\u7248 \u5927\u591a\u6570\u7684\u73b0\u4ee3 IDE \u90fd\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6392\u7248\u4f60\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u5728\u4f60\u521b\u5efa\u51fd\u6570\u7684\u65f6\u5019\uff0cIDE\u5c31\u4f1a\u81ea\u52a8\u5e2e\u4f60\u7f29\u8fdb\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\uff09\u3002 \u7136\u800c\uff0c\u5f53\u4f60\u6dfb\u52a0\u3001\u5220\u9664\u4ee3\u7801\uff0c\u6216\u8005\u4fee\u6539\u4e86IDE\u7684\u9ed8\u8ba4\u6392\u7248\u89c4\u5219\u540e\uff0c\u53c8\u6216\u8005\u4f60\u4ece\u5176\u4ed6\u5730\u65b9\u62f7\u8d1d\u4e86\u4ee3\u7801\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6392\u7248\u53ef\u80fd\u4f1a\u53d8\u5f97\u4e00\u56e2\u7cdf\u3002\u4fee\u590d\u90e8\u5206\u6216\u6574\u4e2a\u6587\u4ef6\u4e2d\u7684\u6392\u7248\u95ee\u9898\u662f\u975e\u5e38\u5934\u75bc\u7684\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u73b0\u4ee3DIE\u901a\u5e38\u90fd\u63d0\u4f9b\u4e86\u81ea\u52a8\u6392\u7248\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5bf9\u4f60\u9009\u62e9\u7684\u90e8\u5206\u6216\u8005\u6574\u4e2a\u6587\u4ef6\u8fdb\u884c\u91cd\u65b0\u6392\u7248\u3002 [!TIP] \u5c0f\u8d34\u58eb For Visual Studio users \u5728 Visual Studio \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 Edit > Advanced > Format Document and Edit > Advanced > Format Selection \u6765\u914d\u7f6e\u81ea\u52a8\u6392\u7248\u3002 [!TIP] \u5c0f\u8d34\u58eb For Code::Blocks users \u5728 Code::Blocks \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u9f20\u6807\u53f3\u952e\uff0c\u9009\u62e9 Format use AStyle \u6765\u4f7f\u7528\u3002 \u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u63a8\u8350\u4e3a\u81ea\u52a8\u6392\u7248\u529f\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u952e\u76d8\u5feb\u6377\u952e\u3002 [!TIP] \u5c0f\u8d34\u58eb \u4f7f\u7528\u81ea\u52a8\u6392\u7248\u529f\u80fd\uff0c\u662f\u4fdd\u6301\u4ee3\u7801\u98ce\u683c\u4e00\u81f4\u6027\u7684\u597d\u529e\u6cd5\u3002","title":"1.08 \u7a7a\u767d\u548c\u4ee3\u7801\u6392\u7248"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/#18","text":"[[\u7a7a\u767d(Whitespace)]]\u8fd9\u4e2a\u672f\u8bed\uff0c\u6307\u7684\u662f\u90a3\u4e9b\u51fa\u4e8e\u6392\u7248\u76ee\u7684\u800c\u4f7f\u7528\u7684\u7a7a\u767d\u5b57\u7b26\u3002\u5728 C++ \u4e2d\uff0c\u7a7a\u767d\u6307\u7684\u662f\u7a7a\u683c\u7b26\u3001\u5236\u8868\u7b26\u548c\u6362\u884c\u7b26\u3002C++ \u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u5ffd\u7565\u7a7a\u767d\uff08\u5904\u7406\u6587\u672c\u5b57\u9762\u91cf\u65f6\u662f\u4e00\u4e2a\u7279\u4f8b\uff09\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4 C++ \u662f\u4e00\u4e2a\u7a7a\u683c\u65e0\u5173\uff08whitespace-independent\uff09\u7684\u8bed\u8a00\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u51e0\u884c\u4ee3\u7801\u7684\u6548\u679c\u5176\u5b9e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; std :: cout << \"Hello world!\" ; \u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u5373\u4f7f\u88ab\u5206\u5272\u4e3a\u4e24\u884c\uff0c\u5b83\u4e5f\u80fd\u591f\u6b63\u5e38\u7f16\u8bd1\u3002 \u4e0b\u9762\u7684\u51fd\u6570\u6548\u679c\u4e5f\u5b8c\u5168\u4e00\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) { return x + y ; } \u4e00\u4e2a\u4f8b\u5916\u662f\uff0cC++\u7f16\u8bd1\u5668\u5e76\u4e0d\u4f1a\u5ffd\u7565\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u767d\uff0c\u4f8b\u5982 \"Hello world!\" \u3002 1 \"Hello world!\" \u4e0a\u9762\u7684\u5b57\u7b26\u4e32\u548c\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u4e00\u6837\u7684\u3002 1 \"Hello world!\" \u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u4f1a\u88ab\u539f\u5c01\u4e0d\u52a8\u7684\u6253\u5370\u5904\u7406\u3002 \u5728\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u6362\u884c\u662f\u4e0d\u5408\u6cd5\u7684\uff1a 1 2 std :: cout << \"Hello world ! \"; // Not allowed! \u53ea\u4f7f\u7528\u7a7a\u767d\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u6362\u884c\u548c\u56de\u8f66\uff09\u5206\u5272\u7684\u6587\u672c\uff0c\u6700\u7ec8\u5c06\u4f1a\u88ab\u8fde\u63a5\u5728\u4e00\u8d77\uff1a 1 2 std :: cout << \"Hello \" \"world!\" ; // prints \"Hello world!\" \u53e6\u5916\u4e00\u4e2a\u7279\u4f8b\u662f\uff0cC++ \u7684\u7f16\u8bd1\u5668\u4f1a\u5173\u6ce8\u5355\u884c\u6ce8\u91ca\uff08 // \uff09\u4e2d\u7684\u7a7a\u767d\u7b26\u3002\u5355\u884c\u6ce8\u91ca\u53ea\u4f1a\u5230\u8be5\u884c\u672b\u5c3e\u622a\u6b62\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u6709\u95ee\u9898\u7684\uff1a 1 2 std :: cout << \"Hello world!\" ; // Here is a single-line comment this is not part of the comment","title":"1.8 \u7a7a\u767d\u548c\u4ee3\u7801\u57fa\u672c\u683c\u5f0f"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/#_1","text":"\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0cC++ \u5e76\u4e0d\u4f1a\u5f3a\u5236\u7a0b\u5e8f\u5458\u4f7f\u7528\u67d0\u79cd\u6392\u7248\u98ce\u683c\uff08\u8fd8\u8bb0\u5f97\u5417\uff1f\u76f8\u4fe1\u7a0b\u5e8f\u5458\uff01\uff09\u3002C++ \u4e2d\u6709\u5f88\u591a\u53ef\u4ee5\u4f7f\u7528\u7684\u6392\u7248\u65b9\u5f0f\uff0c\u5173\u4e8e\u54ea\u4e00\u79cd\u624d\u662f\u6700\u4f73\u7684\u65b9\u5f0f\uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u770b\u6cd5\u3002\u6211\u4eec\u7684\u57fa\u672c\u539f\u5219\u662f\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u6700\u5f3a\u3001\u4e00\u6267\u884c\u6700\u597d\u7684\u90a3\u79cd\u6392\u7248\u98ce\u683c\uff0c\u5c31\u662f\u6700\u597d\u7684\u3002 \u672c\u6559\u7a0b\u5efa\u8bae\u7684\u6392\u7248\u89c4\u8303\u5982\u4e0b\uff1a 1.\u4f7f\u7528\u5236\u8868\u7b26\u548c\u7a7a\u683c\u8fdb\u884c\u7f29\u8fdb\u90fd\u662f\u5141\u8bb8\u7684 (\u5927\u591a\u6570\u7684 IDE \u90fd\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u52a8\u5c06\u5236\u8868\u7b26\u8f6c\u6362\u4e3a\u89c4\u5b9a\u4e2a\u6570\u7684\u7a7a\u683c\uff09\u3002\u5f00\u53d1\u8005\u4f7f\u7528\u7a7a\u683c\u8fdb\u884c\u6392\u7248\u5c24\u5176\u5185\u5728\u7684\u903b\u8f91\uff0c\u6bd5\u7adf\u4f7f\u7528\u201d\u7a7a\u683c\u201c\u6765\u521b\u5efa\u4ee3\u7801\u4e4b\u95f4\u7684\u201d\u7a7a\u767d\u201c\u662f\u5929\u7ecf\u5730\u4e49\u7684\u3002\u4f7f\u7528\u7a7a\u683c\u6dfb\u52a0\u7684\u7a7a\u767d\uff0c\u4e0d\u8bba\u5728\u4ec0\u4e48\u7f16\u8f91\u5668\u4e0b\uff0c\u770b\u8d77\u6765\u90fd\u662f\u4e00\u81f4\u7684\u3002\u800c\u4f7f\u7528\u5236\u8868\u7b26\u8fdb\u884c\u7f29\u8fdb\u7684\u7a0b\u5e8f\u5458\u4f1a\u5bf9\u4e0a\u8ff0\u884c\u4e3a\u611f\u5230\u56f0\u60d1\uff0c\u5236\u8868\u7b26\u5c31\u662f\u4e3a\u4e86\u7f29\u8fdb\u800c\u5b58\u5728\u7684\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5462\uff1f\u66f4\u4f55\u51b5\u4f60\u8fd8\u53ef\u4ee5\u81ea\u7531\u63a7\u5236\u5176\u7f29\u8fdb\u7684\u5bbd\u5ea6\u3002\u8fd9\u4e2a\u95ee\u9898\u6ca1\u6709\u6240\u8c13\u201d\u6b63\u786e\u201c\u7684\u7b54\u6848\uff0c\u4e89\u8bba\u5b83\u7684\u5bf9\u9519\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5c31\u597d\u6bd4\u4e89\u8bba\u7cbd\u5b50\u5e94\u8be5\u662f\u751c\u7684\u8fd8\u662f\u54b8\u7684\uff0c\u56e0\u4e3a\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\u7684\u53e3\u5473\u3002 \u4e0d\u8bba\u90a3\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u75284\u4e2a\u7a7a\u683c\u7684\u5bbd\u5ea6\u4f5c\u4e3a\u7f29\u8fdb\u7684\u5bbd\u5ea6\u3002\u6709\u4e9bIDE\u9ed8\u8ba4\u7684\u7f29\u8fdb\u5bbd\u5ea6\u662f3\u4e2a\u7a7a\u683c\uff0c\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 2.\u51fd\u6570\u62ec\u53f7\u7684\u6392\u7248\u6709\u4e24\u79cd\u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u5f0f\u3002 Google C++ \u98ce\u683c\u6307\u5357\u5efa\u8bae\u7684\u98ce\u683c\u662f\u82b1\u62ec\u53f7\u4e0d\u6362\u884c\uff1a 1 2 int main () { } \u8fd9\u4e48\u505a\u7684\u4f9d\u636e\u662f\uff0c\u5b83\u80fd\u591f\u51cf\u5c11\u7eb5\u5411\u7a7a\u767d\u7684\u4ea7\u751f\uff08\u62ec\u53f7\u5355\u72ec\u5360\u7528\u4e00\u884c\u662f\u4e0d\u5212\u7b97\u7684\uff09\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u6709\u9650\u7684\u5c4f\u5e55\u4e2d\u663e\u793a\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u8fd9\u80fd\u591f\u5e2e\u52a9\u4f60\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u503e\u5411\u4e8e\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u5373\u82b1\u62ec\u53f7\u53e6\u8d77\u4e00\u884c\uff1a 1 2 3 int main () { } \u8fd9\u4e48\u505a\u53ef\u4ee5\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u56e0\u4e3a\u4e00\u5bf9\u82b1\u62ec\u53f7\u603b\u662f\u5177\u6709\u76f8\u540c\u7684\u7f29\u8fdb\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u51cf\u5c11\u72af\u9519\u7684\u51e0\u7387\u3002\u5982\u679c\u7f16\u8bd1\u5668\u62a5\u544a\u4e86\u62ec\u53f7\u4e0d\u5339\u914d\u7684\u9519\u8bef\uff0c\u90a3\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u627e\u5230\u95ee\u9898\u6240\u5728\u3002 3.\u6bcf\u4e00\u5c42\u82b1\u62ec\u53f7\u4e2d\u7684\u8bed\u53e5\u90fd\u5fc5\u987b\u8fdb\u884c\u7f29\u8fdb\u4e00\u7ea7\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 int main () { std :: cout << \"Hello world! \\n \" ; // tabbed in one tab (4 spaces) std :: cout << \"Nice to meet you. \\n \" ; // tabbed in one tab (4 spaces) } 4.\u6bcf\u4e00\u884c\u4ee3\u7801\u90fd\u4e0d\u5e94\u8be5\u592a\u957f\u3002\u5e38\u89c1\u7684\u89c4\u5219\u662f\uff1a\u5355\u884c\u4e0d\u80fd\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u4e00\u884c\u4ee3\u7801\u592a\u957f\uff0c\u5b83\u5c31\u5e94\u5f53\u88ab\u5206\u5272\u4e3a\u591a\u884c\uff08\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u5206\u5272\uff09\u3002\u5177\u4f53\u64cd\u4f5c\u65f6\u53ef\u4ee5\u5c06\u5404\u4e2a\u5b50\u884c\u989d\u5916\u7f29\u8fdb\u4e00\u7ea7\uff0c\u6216\u8005\uff0c\u5982\u679c\u5b50\u884c\u4e4b\u95f4\u975e\u5e38\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u90fd\u5bf9\u9f50\u5230\u4e0a\u9762\u7684\u884c\uff08\u53ef\u8bfb\u6027\u66f4\u597d\uff09\u3002 1 2 3 4 5 6 7 8 9 10 int main () { std :: cout << \"This is a really, really, really, really, really, really, really, \" \"really long line \\n \" ; // one extra indentation for continuation line std :: cout << \"This is another really, really, really, really, really, really, really, \" \"really long line \\n \" ; // text aligned with the previous line for continuation line std :: cout << \"This one is short \\n \" ; } \u8fd9\u4e48\u505a\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u884c\u4ee3\u7801\u90fd\u5177\u6709\u5f88\u597d\u7684\u53ef\u8bfb\u6027\u3002\u5728\u5bbd\u5c4f\u663e\u793a\u5668\u4e0a\uff0c\u8fd9\u4e48\u505a\u8fd8\u53ef\u4ee5\u5141\u8bb8\u4f60\u5c06\u4e24\u4e2a\u4ee3\u7801\u7a97\u53e3\u5e76\u6392\u663e\u793a\uff0c\u8f7b\u677e\u5730\u5bf9\u6bd4\u5b83\u4eec\u7684\u5dee\u5f02\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5355\u884c\u4ee3\u7801\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002 [!TIP] \u5c0f\u8d34\u58eb \u5f88\u591a\u7f16\u8f91\u5668\u90fd\u96c6\u6210\uff08\u6216\u901a\u8fc7\u63d2\u4ef6/\u6269\u5c55\uff09\u4e86 \u5217\u6307\u793a\u5668 \uff0c\u80fd\u591f\u663e\u793a\u51fa\u7279\u5b9a\u5217\u7684\u4f4d\u7f6e\uff08\u4f8b\u598280\u4e2a\u5b57\u7b26\u5904\uff09\u3002\u56e0\u6b64\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5224\u65ad\u4f60\u7684\u4ee3\u7801\u884c\u662f\u4e0d\u662f\u8d85\u957f\u4e86\u3002\u641c\u7d22\u7f16\u8f91\u5668\u540d+\u201cColumn guide\u201d\u6765\u67e5\u8be2\u4f60\u7684\u7f16\u8f91\u5668\u662f\u5426\u652f\u6301\u8be5\u7279\u6027\u3002 \u8bd1\u6ce8\uff1a\u5728 VS Code \u4e2d\uff0c\u8fd9\u4e00\u7279\u6027\u53eb\u505a editor.rulers \uff0c\u53ef\u4ee5\u5728\u8bbe\u7f6e\u4e2d\u914d\u7f6e\u5176\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982 editor.rulers=[80] 5.\u5982\u679c\u4e00\u4e2a\u8f83\u957f\u7684\u884c\u88ab\u57fa\u4e8e\u8fd0\u7b97\u7b26\u5206\u5272\u4e3a\u4e86\u591a\u4e2a\u77ed\u884c\uff0c\u90a3\u4e48\u8fd0\u7b97\u7b26\u5e94\u8be5\u653e\u7f6e\u5728\u4e0b\u4e00\u884c\u7684\u5f00\u5934\u800c\u4e0d\u662f\u4e0a\u4e00\u884c\u7684\u7ed3\u5c3e\uff1a 1 2 3 std :: cout << 3 + 4 + 5 + 6 * 7 * 8 ; \u8fd9\u4e48\u505a\u53ef\u4ee5\u660e\u786e\u7684\u8868\u660e\u4e0b\u4e00\u884c\u662f\u627f\u63a5\u81ea\u4e0a\u4e00\u884c\u7684\uff0c\u800c\u4e14\u4f60\u53ef\u4ee5\u5c06\u8fd0\u7b97\u7b26\u5de6\u5bf9\u9f50\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002 6.\u4f7f\u7528\u7a7a\u683c\u5c06\u503c\u3001\u6ce8\u91ca\u5bf9\u9f50\uff0c\u6216\u5728\u4ee3\u7801\u6bb5\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002 \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 4 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 4 cost = 57 ; pricePerItem = 24 ; value = 5 ; numberOfItems = 17 ; \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments make the code hard to read std :: cout << \"Yeah! \\n \" ; // especially when lines are different lengths \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 std :: cout << \"Hello world! \\n \" ; // cout lives in the iostream library std :: cout << \"It is very nice to meet you! \\n \" ; // these comments are easier to read std :: cout << \"Yeah! \\n \" ; // especially when all lined up \u53ef\u8bfb\u6027\u4e0d\u4f73\uff1a 1 2 3 4 5 6 // cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // these comments make the code hard to read std :: cout << \"It is very nice to meet you! \\n \" ; // especially when all bunched together std :: cout << \"Yeah! \\n \" ; \u53ef\u8bfb\u6027\u4f73\uff1a 1 2 3 4 5 6 7 8 // cout lives in the iostream library std :: cout << \"Hello world! \\n \" ; // these comments are easier to read std :: cout << \"It is very nice to meet you! \\n \" ; // when separated by whitespace std :: cout << \"Yeah! \\n \" ; \u672c\u6559\u7a0b\u5c06\u59cb\u7ec8\u8d2f\u5f7b\u4e0a\u8ff0\u6392\u7248\u7ea6\u5b9a\uff0c\u5b83\u4eec\u7ec8\u5c06\u4f1a\u79f0\u4e3a\u4f60\u4e60\u60ef\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u4ecb\u7ecd\u4fe1\u7684\u8bed\u8a00\u7279\u6027\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u5bf9\u5e94\u5730\u4ecb\u7ecd\u5176\u9002\u7528\u7684\u4ee3\u7801\u6392\u7248\u98ce\u683c\u3002 C++ \u7ed9\u4e0e\u4e86\u4f60\u9009\u62e9\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u98ce\u683c\u7684\u6743\u5229\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u4ecd\u7136\u5f3a\u70c8\u63a8\u8350\u4f60\u4f7f\u7528\u4e0e\u6211\u4eec\u76f8\u540c\u7684\u4ee3\u7801\u98ce\u683c\uff0c\u8fd9\u4e9b\u89c4\u5219\u90fd\u662f\u5343\u9524\u767e\u70bc\uff0c\u88ab\u65e0\u6570\u4eba\u6d4b\u8bd5\u540e\u5f97\u5230\u7684\u7ecf\u9a8c\uff0c\u5b83\u4eec\u80fd\u591f\u5728\u7f16\u7a0b\u8def\u4e0a\u52a9\u4f60\u4e00\u81c2\u4e4b\u529b\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u5728\u57fa\u4e8e\u4ed6\u4eba\u7684\u4ee3\u7801\u8fdb\u884c\u5de5\u4f5c\uff0c\u8bf7\u9002\u5e94\u5e76\u4f7f\u7528\u4ed6\u4eec\u7684\u4ee3\u7801\u98ce\u683c\uff0c\u98ce\u683c\u4e00\u81f4\u6027\u7684\u4f18\u5148\u7ea7\u8981\u9ad8\u4e8e\u5176\u4ed6\u3002","title":"\u57fa\u672c\u4ee3\u7801\u683c\u5f0f"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/#_2","text":"\u5927\u591a\u6570\u7684\u73b0\u4ee3 IDE \u90fd\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6392\u7248\u4f60\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u5728\u4f60\u521b\u5efa\u51fd\u6570\u7684\u65f6\u5019\uff0cIDE\u5c31\u4f1a\u81ea\u52a8\u5e2e\u4f60\u7f29\u8fdb\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\uff09\u3002 \u7136\u800c\uff0c\u5f53\u4f60\u6dfb\u52a0\u3001\u5220\u9664\u4ee3\u7801\uff0c\u6216\u8005\u4fee\u6539\u4e86IDE\u7684\u9ed8\u8ba4\u6392\u7248\u89c4\u5219\u540e\uff0c\u53c8\u6216\u8005\u4f60\u4ece\u5176\u4ed6\u5730\u65b9\u62f7\u8d1d\u4e86\u4ee3\u7801\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6392\u7248\u53ef\u80fd\u4f1a\u53d8\u5f97\u4e00\u56e2\u7cdf\u3002\u4fee\u590d\u90e8\u5206\u6216\u6574\u4e2a\u6587\u4ef6\u4e2d\u7684\u6392\u7248\u95ee\u9898\u662f\u975e\u5e38\u5934\u75bc\u7684\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u73b0\u4ee3DIE\u901a\u5e38\u90fd\u63d0\u4f9b\u4e86\u81ea\u52a8\u6392\u7248\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5bf9\u4f60\u9009\u62e9\u7684\u90e8\u5206\u6216\u8005\u6574\u4e2a\u6587\u4ef6\u8fdb\u884c\u91cd\u65b0\u6392\u7248\u3002 [!TIP] \u5c0f\u8d34\u58eb","title":"\u81ea\u52a8\u6392\u7248"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/#for-visual-studio-users","text":"\u5728 Visual Studio \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 Edit > Advanced > Format Document and Edit > Advanced > Format Selection \u6765\u914d\u7f6e\u81ea\u52a8\u6392\u7248\u3002 [!TIP] \u5c0f\u8d34\u58eb","title":"For Visual Studio users"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.08%20%E7%A9%BA%E7%99%BD%E5%92%8C%E4%BB%A3%E7%A0%81%E6%8E%92%E7%89%88/#for-codeblocks-users","text":"\u5728 Code::Blocks \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u9f20\u6807\u53f3\u952e\uff0c\u9009\u62e9 Format use AStyle \u6765\u4f7f\u7528\u3002 \u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u63a8\u8350\u4e3a\u81ea\u52a8\u6392\u7248\u529f\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u952e\u76d8\u5feb\u6377\u952e\u3002 [!TIP] \u5c0f\u8d34\u58eb \u4f7f\u7528\u81ea\u52a8\u6392\u7248\u529f\u80fd\uff0c\u662f\u4fdd\u6301\u4ee3\u7801\u98ce\u683c\u4e00\u81f4\u6027\u7684\u597d\u529e\u6cd5\u3002","title":"For Code::Blocks users"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.09%20%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.9 \u2014 Introduction to literals and operators - \u4f5c\u8005\uff1a ALEX - 2021-10-28 1.9 \u5b57\u9762\u91cf\u548c\u8fd0\u7b97\u7b26 \u5b57\u9762\u91cf \u8003\u8651\u4e0b\u9762\u4e24\u6761\u8bed\u53e5\uff1a 1 2 std :: cout << \"Hello world!\" ; int x { 5 }; \u8fd9\u91cc\u7684 \u201cHello world!\u201d \u548c 5 \u6709\u4ec0\u4e48\u5171\u540c\u70b9\uff1f\u5b83\u4eec\u90fd\u662f\u5b57\u9762\u91cf\u3002 [[\u5b57\u9762\u91cf(literals)]]\uff08\u4e5f\u79f0\u4e3a\u5b57\u9762\u91cf\u5e38\u91cf\uff09\u6307\u7684\u662f\u88ab\u76f4\u63a5\u63d2\u5165\u5230\u6e90\u7801\u4e2d\u7684\u5e38\u91cf\u3002 \u5b57\u9762\u91cf\u548c\u53d8\u91cf\u90fd\u5177\u6709\u4e00\u4e2a\u503c\uff08\u53ca\u5176\u7c7b\u578b\uff09\u3002\u4f46\u662f\uff0c\u5b57\u9762\u91cf\u7684\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539\uff08\u6240\u4ee5\u6210\u4e3a\u5e38\u91cf\uff09\uff0c\u800c\u53d8\u91cf\u7684\u503c\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u4e0d\u8bba\u662f\u901a\u8fc7\u521d\u59cb\u5316\u8fd8\u662f\u901a\u8fc7\u8d4b\u503c\u3002 \u8fd0\u7b97\u7b26 \u6570\u5b66\u4e2d\u7684\u8fd0\u7b97\u6307\u7684\u662f\u4e00\u4e2a\u8ba1\u7b97\u64cd\u4f5c\uff0c\u5b83\u6d89\u53ca\u52300\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u503c\uff08\u79f0\u4e3a[[\u64cd\u4f5c\u6570(operands)]]\uff09\uff0c\u5e76\u80fd\u591f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u503c\uff08\u79f0\u4e3a\u8f93\u51fa\u503c\uff09\u3002\u8fd9\u4e2a\u7279\u5b9a\u7684\u8ba1\u7b97\u64cd\u4f5c\uff0c\u901a\u8fc7\u67d0\u79cd\u7ed3\u6784\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u6216\u4e00\u5bf9\u7b26\u53f7\uff09\u6765\u6307\u5b9a\uff0c\u8fd9\u79cd\u7ed3\u6784\u79f0\u4e4b\u4e3a[[\u8fd0\u7b97\u7b26(operator)]]\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u90fd\u77e5\u9053 2 + 3 = 5 \u3002\u5728\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\uff0c2\u548c3\u79f0\u4e4b\u4e3a\u8fd0\u7b97\u7b26\uff0c\u800c\u7b26\u53f7 + \u5219\u79f0\u4e3a\u8fd0\u7b97\u7b26\uff0c\u8be5\u8fd0\u7b97\u7b26\u544a\u8bc9\u6211\u4eec\u6b64\u65f6\u5c06\u5bf9\u4e24\u4e2a\u64cd\u4f5c\u6570\u6267\u884c\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u503c 5\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u5bf9\u4e8e\u7b26\u53f7\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\uff0c\u5e38\u7528\u7684\u672f\u8bed\u8868\u793a\u65b9\u6cd5\u662f\u5c06\u8fd0\u7b97\u7b26\u672c\u8eab\u5199\u5728operator\u4e4b\u540e\uff0c\u5176\u539f\u56e0\u4f1a\u968f\u7740\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u8fd0\u7b97\u7b26\u540e\u53d8\u5f97\u6e05\u6670\u3002 \u4f8b\u5982\uff0c\u52a0\u6cd5\u8fd0\u7b97\u7b26\u4f1a\u5199\u4f5c operator+ \uff0c\u63d0\u53d6\u8fd0\u7b97\u7b26\u5219\u5199\u4f5c operator>> . \u5bf9\u4e8e\u6570\u5b66\u4e2d\u5e38\u7528\u6807\u51c6\u8fd0\u7b97\u7b26\u4f60\u5e94\u5f53\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86\uff0c\u5305\u62ec\u52a0( + )\u3001\u51cf( - )\u3001\u4e58( * )\u3001\u9664( / )\u3002\u5728 C++ \u4e2d\uff0c\u8d4b\u503c\u53f7( = )\u4e5f\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u6b64\u5916\u8fd8\u6709 \u63d2\u5165\u8fd0\u7b97\u7b26 << \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u3002\u6709\u4e9b\u8fd0\u7b97\u7b26\u5305\u542b\u591a\u4e2a\u7b26\u53f7\uff0c\u4f8b\u5982\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26( == )\u3002\u8fd8\u6709\u4e00\u4e9b\u8fd0\u7b97\u7b26\u5219\u662f\u4ee5\u5355\u8bcd\u7684\u5f62\u5f0f\u51fa\u73b0\u7684\uff08\u4f8b\u5982\uff1a new \uff0c delete \u548c throw \uff09\u3002 \u4e00\u4e2a\u8fd0\u7b97\u7b26\u4f7f\u7528\u7684\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\uff0c\u79f0\u4e3a\u8be5\u8fd0\u7b97\u7b26\u7684[[\u5143\u6570(arity)]]\u3002C++ \u4e2d\u7684\u8fd0\u7b97\u7b26\u5177\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u5143\u6570\uff1a \u4e00\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 - \u662f\u4e00\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\u7684\u5178\u578b\uff0c\u4f8b\u5982\uff0c -5 \u3002\u5b83\u4f7f\u7528\u4e00\u4e2a\u5b57\u9762\u91cf\u64cd\u4f5c\u65705\uff0c\u5e76\u5c06\u5176\u7b26\u53f7\u53cd\u8f6c\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8f93\u51fa\u91cf -5\u3002 \u4e8c\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\uff08\u5de6\u53f3\u64cd\u4f5c\u6570\uff09\u3002\u4f8b\u5982 3 + 4 \uff0c\u8fd0\u7b97\u7b26 + \u5c06\u5de6\u64cd\u4f5c\u6570 3 \u548c\u53f3\u64cd\u4f5c\u6570 4\u6267\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u8f93\u51fa\u7ed3\u679c 7\u3002\u63d2\u5165\u8fd0\u7b97\u7b26( << ) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26( >> )\u4e5f\u662f\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002\u5b83\u7684\u5de6\u4fa7\u4e3a std::cout \u6216 std::cin \uff0c\u53f3\u4fa7\u662f\u8981\u8f93\u51fa\u7684\u503c\u6216\u63a5\u6536\u8f93\u5165\u7684\u53d8\u91cf\u3002 \u4e09\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e09\u4e2a\u64cd\u4f5c\u6570\u3002C++ \u4e2d\u53ea\u6709\u4e00\u79cd\u4e09\u5143\u8fd0\u7b97\u7b26\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u3002 \u6ce8\u610f\uff0c\u6709\u4e9b\u8fd0\u7b97\u7b26\u5728\u4e0d\u540c\u7684\u4f7f\u7528\u6761\u4ef6\u4e0b\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u4f8b\u5982 - \u5c31\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u542b\u4e49\u3002\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u53d6\u4e00\u4e2a\u503c\u7684\u76f8\u53cd\u6570\uff08\u4f8b\u5982\u5c065\u8f6c\u6362\u4e3a-5\uff0c\u6216\u8005\u53cd\u8fc7\u6765\uff09\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e8c\u5143\u8fd0\u7b97\u7b26\u51cf\u53f7\u4f7f\u7528\uff08\u4f8b\u5982 4 - 3 \uff09\u3002 \u8fd0\u7b97\u7b26\u94fe \u8fd0\u7b97\u7b26\u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u64cd\u4f5c\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u4e00\u4e2a\u8fd0\u7b97\u7b26\u4fbf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u4ed6\u8fd0\u7b97\u7b26\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u4f8b\u5982\uff1a 2 * 3 + 4 \uff0c\u4e58\u6cd5\u9996\u5148\u6267\u884c\u5e76\u5f97\u5230\u7ed3\u679c6\uff0c\u7136\u540e\u5b83\u5c31\u6210\u4e3a\u4e86\u52a0\u53f7\u7684\u505a\u64cd\u4f5c\u6570\u3002\u63a5\u4e0b\u6765\u6267\u884c\u52a0\u6cd5\u5f97\u5230\u65b0\u503c10\u3002 \u5728\u8bb2\u89e3\u8fd0\u7b97\u7b26\u65f6\uff0c\u6211\u4eec\u4f1a\u6df1\u5165\u63a2\u8ba8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u3002\u73b0\u5728\u4f60\u53ea\u9700\u8981\u77e5\u9053\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u548c\u6570\u5b66\u4e2d\u7684\u4f18\u5148\u7ea7\u662f\u4e00\u6837\u7684\uff1a\u62ec\u53f7\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u7136\u540e\u662f\u6307\u6570\u8fd0\u7b97\u7b26\uff0c\u7136\u540e\u662f\u4e58\u9664\uff0c\u518d\u7136\u540e\u662f\u52a0\u51cf\u3002\u8be5\u4f18\u5148\u7ea7\u987a\u5e8f\u5e38\u5e38\u7f29\u5199\u4e3a PEMDAS \uff08\u6216\u8005\u5c55\u5f00\u4e3a\u4e0b\u9762\u8fd9\u79cd\u5e2e\u52a9\u8bb0\u5fc6\u7684\u5f62\u5f0f\uff1a\u201cPlease Excuse My Dear Aunt Sally\u201d\uff09 [!NOTE] \u4f5c\u8005\u6ce8 \u5728\u6709\u4e9b\u56fd\u5bb6\uff0cPEMDAS \u8868\u8ff0\u4e3a PEDMAS\u3001BEDMAS\u3001BODMAS \u6216 BIDMAS\u3002","title":"1.09 \u5b57\u9762\u91cf\u548c\u8fd0\u7b97\u7b26"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.09%20%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/#19","text":"","title":"1.9 \u5b57\u9762\u91cf\u548c\u8fd0\u7b97\u7b26"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.09%20%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/#_1","text":"\u8003\u8651\u4e0b\u9762\u4e24\u6761\u8bed\u53e5\uff1a 1 2 std :: cout << \"Hello world!\" ; int x { 5 }; \u8fd9\u91cc\u7684 \u201cHello world!\u201d \u548c 5 \u6709\u4ec0\u4e48\u5171\u540c\u70b9\uff1f\u5b83\u4eec\u90fd\u662f\u5b57\u9762\u91cf\u3002 [[\u5b57\u9762\u91cf(literals)]]\uff08\u4e5f\u79f0\u4e3a\u5b57\u9762\u91cf\u5e38\u91cf\uff09\u6307\u7684\u662f\u88ab\u76f4\u63a5\u63d2\u5165\u5230\u6e90\u7801\u4e2d\u7684\u5e38\u91cf\u3002 \u5b57\u9762\u91cf\u548c\u53d8\u91cf\u90fd\u5177\u6709\u4e00\u4e2a\u503c\uff08\u53ca\u5176\u7c7b\u578b\uff09\u3002\u4f46\u662f\uff0c\u5b57\u9762\u91cf\u7684\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539\uff08\u6240\u4ee5\u6210\u4e3a\u5e38\u91cf\uff09\uff0c\u800c\u53d8\u91cf\u7684\u503c\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u4e0d\u8bba\u662f\u901a\u8fc7\u521d\u59cb\u5316\u8fd8\u662f\u901a\u8fc7\u8d4b\u503c\u3002","title":"\u5b57\u9762\u91cf"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.09%20%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/#_2","text":"\u6570\u5b66\u4e2d\u7684\u8fd0\u7b97\u6307\u7684\u662f\u4e00\u4e2a\u8ba1\u7b97\u64cd\u4f5c\uff0c\u5b83\u6d89\u53ca\u52300\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u503c\uff08\u79f0\u4e3a[[\u64cd\u4f5c\u6570(operands)]]\uff09\uff0c\u5e76\u80fd\u591f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u503c\uff08\u79f0\u4e3a\u8f93\u51fa\u503c\uff09\u3002\u8fd9\u4e2a\u7279\u5b9a\u7684\u8ba1\u7b97\u64cd\u4f5c\uff0c\u901a\u8fc7\u67d0\u79cd\u7ed3\u6784\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u6216\u4e00\u5bf9\u7b26\u53f7\uff09\u6765\u6307\u5b9a\uff0c\u8fd9\u79cd\u7ed3\u6784\u79f0\u4e4b\u4e3a[[\u8fd0\u7b97\u7b26(operator)]]\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u90fd\u77e5\u9053 2 + 3 = 5 \u3002\u5728\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\uff0c2\u548c3\u79f0\u4e4b\u4e3a\u8fd0\u7b97\u7b26\uff0c\u800c\u7b26\u53f7 + \u5219\u79f0\u4e3a\u8fd0\u7b97\u7b26\uff0c\u8be5\u8fd0\u7b97\u7b26\u544a\u8bc9\u6211\u4eec\u6b64\u65f6\u5c06\u5bf9\u4e24\u4e2a\u64cd\u4f5c\u6570\u6267\u884c\u4e00\u4e2a\u52a0\u6cd5\u64cd\u4f5c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u503c 5\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u5bf9\u4e8e\u7b26\u53f7\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\uff0c\u5e38\u7528\u7684\u672f\u8bed\u8868\u793a\u65b9\u6cd5\u662f\u5c06\u8fd0\u7b97\u7b26\u672c\u8eab\u5199\u5728operator\u4e4b\u540e\uff0c\u5176\u539f\u56e0\u4f1a\u968f\u7740\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u8fd0\u7b97\u7b26\u540e\u53d8\u5f97\u6e05\u6670\u3002 \u4f8b\u5982\uff0c\u52a0\u6cd5\u8fd0\u7b97\u7b26\u4f1a\u5199\u4f5c operator+ \uff0c\u63d0\u53d6\u8fd0\u7b97\u7b26\u5219\u5199\u4f5c operator>> . \u5bf9\u4e8e\u6570\u5b66\u4e2d\u5e38\u7528\u6807\u51c6\u8fd0\u7b97\u7b26\u4f60\u5e94\u5f53\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86\uff0c\u5305\u62ec\u52a0( + )\u3001\u51cf( - )\u3001\u4e58( * )\u3001\u9664( / )\u3002\u5728 C++ \u4e2d\uff0c\u8d4b\u503c\u53f7( = )\u4e5f\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u6b64\u5916\u8fd8\u6709 \u63d2\u5165\u8fd0\u7b97\u7b26 << \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u3002\u6709\u4e9b\u8fd0\u7b97\u7b26\u5305\u542b\u591a\u4e2a\u7b26\u53f7\uff0c\u4f8b\u5982\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26( == )\u3002\u8fd8\u6709\u4e00\u4e9b\u8fd0\u7b97\u7b26\u5219\u662f\u4ee5\u5355\u8bcd\u7684\u5f62\u5f0f\u51fa\u73b0\u7684\uff08\u4f8b\u5982\uff1a new \uff0c delete \u548c throw \uff09\u3002 \u4e00\u4e2a\u8fd0\u7b97\u7b26\u4f7f\u7528\u7684\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\uff0c\u79f0\u4e3a\u8be5\u8fd0\u7b97\u7b26\u7684[[\u5143\u6570(arity)]]\u3002C++ \u4e2d\u7684\u8fd0\u7b97\u7b26\u5177\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u5143\u6570\uff1a \u4e00\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 - \u662f\u4e00\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\u7684\u5178\u578b\uff0c\u4f8b\u5982\uff0c -5 \u3002\u5b83\u4f7f\u7528\u4e00\u4e2a\u5b57\u9762\u91cf\u64cd\u4f5c\u65705\uff0c\u5e76\u5c06\u5176\u7b26\u53f7\u53cd\u8f6c\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8f93\u51fa\u91cf -5\u3002 \u4e8c\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\uff08\u5de6\u53f3\u64cd\u4f5c\u6570\uff09\u3002\u4f8b\u5982 3 + 4 \uff0c\u8fd0\u7b97\u7b26 + \u5c06\u5de6\u64cd\u4f5c\u6570 3 \u548c\u53f3\u64cd\u4f5c\u6570 4\u6267\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u8f93\u51fa\u7ed3\u679c 7\u3002\u63d2\u5165\u8fd0\u7b97\u7b26( << ) \u548c\u63d0\u53d6\u8fd0\u7b97\u7b26( >> )\u4e5f\u662f\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002\u5b83\u7684\u5de6\u4fa7\u4e3a std::cout \u6216 std::cin \uff0c\u53f3\u4fa7\u662f\u8981\u8f93\u51fa\u7684\u503c\u6216\u63a5\u6536\u8f93\u5165\u7684\u53d8\u91cf\u3002 \u4e09\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e09\u4e2a\u64cd\u4f5c\u6570\u3002C++ \u4e2d\u53ea\u6709\u4e00\u79cd\u4e09\u5143\u8fd0\u7b97\u7b26\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u3002 \u6ce8\u610f\uff0c\u6709\u4e9b\u8fd0\u7b97\u7b26\u5728\u4e0d\u540c\u7684\u4f7f\u7528\u6761\u4ef6\u4e0b\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u4f8b\u5982 - \u5c31\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u542b\u4e49\u3002\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u53d6\u4e00\u4e2a\u503c\u7684\u76f8\u53cd\u6570\uff08\u4f8b\u5982\u5c065\u8f6c\u6362\u4e3a-5\uff0c\u6216\u8005\u53cd\u8fc7\u6765\uff09\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e8c\u5143\u8fd0\u7b97\u7b26\u51cf\u53f7\u4f7f\u7528\uff08\u4f8b\u5982 4 - 3 \uff09\u3002","title":"\u8fd0\u7b97\u7b26"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.09%20%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/#_3","text":"\u8fd0\u7b97\u7b26\u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u64cd\u4f5c\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u4e00\u4e2a\u8fd0\u7b97\u7b26\u4fbf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u4ed6\u8fd0\u7b97\u7b26\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u4f8b\u5982\uff1a 2 * 3 + 4 \uff0c\u4e58\u6cd5\u9996\u5148\u6267\u884c\u5e76\u5f97\u5230\u7ed3\u679c6\uff0c\u7136\u540e\u5b83\u5c31\u6210\u4e3a\u4e86\u52a0\u53f7\u7684\u505a\u64cd\u4f5c\u6570\u3002\u63a5\u4e0b\u6765\u6267\u884c\u52a0\u6cd5\u5f97\u5230\u65b0\u503c10\u3002 \u5728\u8bb2\u89e3\u8fd0\u7b97\u7b26\u65f6\uff0c\u6211\u4eec\u4f1a\u6df1\u5165\u63a2\u8ba8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u3002\u73b0\u5728\u4f60\u53ea\u9700\u8981\u77e5\u9053\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u548c\u6570\u5b66\u4e2d\u7684\u4f18\u5148\u7ea7\u662f\u4e00\u6837\u7684\uff1a\u62ec\u53f7\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u7136\u540e\u662f\u6307\u6570\u8fd0\u7b97\u7b26\uff0c\u7136\u540e\u662f\u4e58\u9664\uff0c\u518d\u7136\u540e\u662f\u52a0\u51cf\u3002\u8be5\u4f18\u5148\u7ea7\u987a\u5e8f\u5e38\u5e38\u7f29\u5199\u4e3a PEMDAS \uff08\u6216\u8005\u5c55\u5f00\u4e3a\u4e0b\u9762\u8fd9\u79cd\u5e2e\u52a9\u8bb0\u5fc6\u7684\u5f62\u5f0f\uff1a\u201cPlease Excuse My Dear Aunt Sally\u201d\uff09 [!NOTE] \u4f5c\u8005\u6ce8 \u5728\u6709\u4e9b\u56fd\u5bb6\uff0cPEMDAS \u8868\u8ff0\u4e3a PEDMAS\u3001BEDMAS\u3001BODMAS \u6216 BIDMAS\u3002","title":"\u8fd0\u7b97\u7b26\u94fe"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.10%20%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.10 \u2014 Introduction to expressions - \u4f5c\u8005\uff1a ALEX - 2022-2-17 1.10 \u8868\u8fbe\u5f0f\u7b80\u4ecb \u8868\u8fbe\u5f0f \u8003\u8651\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // five() is a function that returns the value 5 int five () { return 5 ; } int main () { int a { 2 }; // initialize variable a with literal value 2 int b { 2 + 3 }; // initialize variable b with computed value 5 int c { ( 2 * 3 ) + 4 }; // initialize variable c with computed value 10 int d { b }; // initialize variable d with variable value 5 int e { five () }; // initialize variable e with function return value 5 return 0 ; } \u4e0a\u8ff0\u5404\u8bed\u53e5\u90fd\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\u3002\u6ce8\u610f\u4e0a\u8ff0\u53d8\u91cf\u7684\u521d\u59cb\u5316\u503c\u7684\u6784\u5efa\uff0c\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5143\u7d20\uff1a\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u3002\u7136\u800c\uff0cC++\u4f1a\u5c06\u4e0a\u8ff0\u6240\u6709\u7684\u5f62\u5f0f\uff0c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5355\u503c\uff0c\u5e76\u7528\u8be5\u503c\u6765\u5b8c\u6210\u53d8\u91cf\u7684\u521d\u59cb\u5316\u3002 \u4e0a\u8ff0\u521d\u59cb\u5316\u503c\u4e4b\u95f4\u6709\u4ec0\u4e48\u5171\u540c\u70b9\u5462\uff1f\u5b83\u4eec\u90fd\u5229\u7528\u4e86\u8868\u8fbe\u5f0f\u3002 \u8868\u8fbe\u5f0f \u662f\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u5408\u4f53\u4e14\u6700\u7ec8\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u5355\u503c\u3002\u6267\u884c\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\u79f0\u4e3a[[\u6c42\u503c(evaluation)]]\uff0c\u6700\u7ec8\u751f\u6210\u7684\u503c\u5219\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7ed3\u679c \u3002 \u5f53\u8868\u8fbe\u5f0f\u5b8c\u6210\u6c42\u503c\u540e\uff0c\u8868\u8fbe\u5f0f\u4e2d\u7684\u6bcf\u4e00\u9879\uff08term\uff09\u4e5f\u90fd\u5b8c\u6210\u4e86\u6c42\u503c\uff0c\u76f4\u5230\u5f97\u5230\u4e00\u4e2a\u6700\u7ec8\u7684\u5355\u503c\u7ed3\u679c\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50\uff0c\u8868\u8fbe\u5f0f\u540e\u9762\u7684\u6ce8\u91ca\u89e3\u91ca\u4e86\u5b83\u7684\u6c42\u503c\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 2 // 2 \u662f\u4e00\u4e2a\u5b57\u9762\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u4e3a 2 \"Hello world!\" // \"Hello world!\" \u662f\u4e00\u4e2a\u5b57\u9762\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u4e3a\u5b57\u7b26\u4e32 \"Hello world!\" x // x \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u5373 x \u7684\u503c 2 + 3 // \u8fd0\u7b97\u7b26 + \u5c06 2 \u548c 3 \u76f8\u52a0\u5f97\u5230 5 x = 2 + 3 // 2 + 3 \u6c42\u503c\u5f97\u5230 5\uff0c\u7136\u540e\u8d4b\u503c\u7ed9\u53d8\u91cf x std :: cout << x // x \u6c42\u503c\u5f97\u5230 x \u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u754c\u9762\u4e0a five () // \u5bf9\u51fd\u6570 five() \u7684\u8fd4\u56de\u503c\u6c42\u503c \u6b63\u5982\u4f60\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b57\u9762\u91cf\u6c42\u503c\u7684\u7ed3\u679c\u5c31\u662f\u5176\u672c\u8eab\u3002\u53d8\u91cf\u6c42\u503c\u7684\u7ed3\u679c\uff0c\u662f\u53d8\u91cf\u7684\u503c\u3002\u867d\u7136\u51fd\u6570\u8c03\u7528\u6211\u4eec\u8fd8\u6ca1\u6709\u4ecb\u7ecd\uff0c\u4f46\u662f\u5728\u8868\u8fbe\u5f0f\u7684\u8bed\u5883\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u7684\u6c42\u503c\u7ed3\u679c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u8fd0\u7b97\u7b26\u7684\u6c42\u503c\u5219\u5141\u8bb8\u6211\u4eec\u5408\u5e76\u591a\u4e2a\u503c\u5e76\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u65b0\u503c\u3002 \u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5e76\u4e0d\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff0c\u800c\u4e14\u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u5355\u72ec\u7684\u5143\u7d20\u8fdb\u884c\u7f16\u8bd1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7f16\u8bd1 x = 5 \uff0c\u4f60\u7684\u7f16\u8bd1\u5668\u5c06\u4f1a\u4fdd\u5b58\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u63d0\u793a\u4f60\u7f3a\u5c11\u5206\u53f7\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u8868\u8fbe\u5f0f\u603b\u662f\u4f5c\u4e3a\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u6c42\u503c\u7684\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u6761\u8bed\u53e5\uff1a 1 int x { 2 + 3 }; // 2 + 3 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b83\u4e0d\u4ee5\u5206\u53f7\u7eaa\u59d4 -- \u5206\u53f7\u5e94\u8be5\u4f4d\u4e8e\u5305\u542b\u8be5\u8868\u8fbe\u5f0f\u7684\u8bed\u53e5\u7684\u672b\u5c3e \u5982\u679c\u4f60\u60f3\u8981\u6df1\u7a76\u8be5\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\uff0c\u5b83\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u79cd\u5f62\u5f0f\uff1a 1 type identifier { expression }; Type \u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 int \uff09\uff0c\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 x \uff09\u3002\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 2+3\uff0c\u5373\u4e24\u4e2a\u5b57\u9762\u91cf\u548c\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff09\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u5728 C++ \u4e2d\uff0c\u4efb\u4f55\u5141\u8bb8\u4f60\u4f7f\u7528\u4e00\u4e2a\u5355\u503c\u7684\u5730\u65b9\uff0c\u4f60\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u66ff\u4ee3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6700\u7ec8\u4f1a\u6c42\u503c\u5f97\u5230\u4e00\u4e2a\u5355\u503c\u3002 \u8868\u8fbe\u5f0f\u8bed\u53e5 \u6709\u4e9b\u8868\u8fbe\u5f0f\u672c\u8eab\u662f\u6709\u5176\u7279\u5b9a\u7528\u9014\u7684\uff08\u4f8b\u5982 x = 5 )\u3002\u4f46\u662f\uff0c\u524d\u9762\u6211\u4eec\u4e5f\u8bf4\u8fc7\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5982\u4f55\u624d\u80fd\u5355\u72ec\u5730\u4f7f\u7528\u8fd9\u4e9b\u7279\u5b9a\u7684\u8868\u8fbe\u5f0f\u5462\uff1f \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7684\u8bed\u53e5\uff08\u79f0\u4e3a\u8868\u8fbe\u5f0f\u8bed\u53e5\uff09\u3002 \u8868\u8fbe\u5f0f\u8bed\u53e5 \u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u7d27\u63a5\u7740\u4e00\u4e2a\u5206\u53f7\u3002\u5f53\u8be5\u8bed\u53e5\u6267\u884c\u65f6\uff0c\u8868\u8fbe\u5f0f\u5c31\u4f1a\u88ab\u6c42\u503c\uff08\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4f1a\u88ab\u4e22\u5f03\uff09\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u610f\u8868\u8fbe\u5f0f\uff08\u4f8b\u5982 x = 5 \uff09\u8f6c\u6362\u6210\u7b49\u4ef7\u7684\u8868\u8fbe\u5f0f\u8bed\u53e5\uff08\u4f8b\u5982\uff0c x = 5; \uff09\u5e76\u7f16\u8bd1\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u8868\u8fbe\u5f0f\u8bed\u53e5\uff0c\u4f46\u8fd9\u6837\u505a\u6709\u65f6\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff08\u4f8b\u5982 2 * 3; \uff09\uff0c\u5b83\u7684\u6c42\u503c\u7ed3\u679c\u4e3a 6\uff0c\u7136\u540e 6 \u5c31\u88ab\u4e22\u5f03\u4e86\u3002 [!TIP] \u6cd5\u5219 \u8868\u8fbe\u5f0f\u4e2d\u8ba1\u7b97\u5f97\u5230\u7684\u503c\u4f1a\u5728\u8868\u8fbe\u5f0f\u7ed3\u675f\u540e\u88ab\u4e22\u5f03\u3002","title":"1.10  \u8868\u8fbe\u5f0f\u7b80\u4ecb"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.10%20%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B/#110","text":"","title":"1.10 \u8868\u8fbe\u5f0f\u7b80\u4ecb"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.10%20%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B/#_1","text":"\u8003\u8651\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // five() is a function that returns the value 5 int five () { return 5 ; } int main () { int a { 2 }; // initialize variable a with literal value 2 int b { 2 + 3 }; // initialize variable b with computed value 5 int c { ( 2 * 3 ) + 4 }; // initialize variable c with computed value 10 int d { b }; // initialize variable d with variable value 5 int e { five () }; // initialize variable e with function return value 5 return 0 ; } \u4e0a\u8ff0\u5404\u8bed\u53e5\u90fd\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\u3002\u6ce8\u610f\u4e0a\u8ff0\u53d8\u91cf\u7684\u521d\u59cb\u5316\u503c\u7684\u6784\u5efa\uff0c\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u5143\u7d20\uff1a\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u3002\u7136\u800c\uff0cC++\u4f1a\u5c06\u4e0a\u8ff0\u6240\u6709\u7684\u5f62\u5f0f\uff0c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5355\u503c\uff0c\u5e76\u7528\u8be5\u503c\u6765\u5b8c\u6210\u53d8\u91cf\u7684\u521d\u59cb\u5316\u3002 \u4e0a\u8ff0\u521d\u59cb\u5316\u503c\u4e4b\u95f4\u6709\u4ec0\u4e48\u5171\u540c\u70b9\u5462\uff1f\u5b83\u4eec\u90fd\u5229\u7528\u4e86\u8868\u8fbe\u5f0f\u3002 \u8868\u8fbe\u5f0f \u662f\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u5408\u4f53\u4e14\u6700\u7ec8\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u5355\u503c\u3002\u6267\u884c\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\u79f0\u4e3a[[\u6c42\u503c(evaluation)]]\uff0c\u6700\u7ec8\u751f\u6210\u7684\u503c\u5219\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7ed3\u679c \u3002 \u5f53\u8868\u8fbe\u5f0f\u5b8c\u6210\u6c42\u503c\u540e\uff0c\u8868\u8fbe\u5f0f\u4e2d\u7684\u6bcf\u4e00\u9879\uff08term\uff09\u4e5f\u90fd\u5b8c\u6210\u4e86\u6c42\u503c\uff0c\u76f4\u5230\u5f97\u5230\u4e00\u4e2a\u6700\u7ec8\u7684\u5355\u503c\u7ed3\u679c\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50\uff0c\u8868\u8fbe\u5f0f\u540e\u9762\u7684\u6ce8\u91ca\u89e3\u91ca\u4e86\u5b83\u7684\u6c42\u503c\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 2 // 2 \u662f\u4e00\u4e2a\u5b57\u9762\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u4e3a 2 \"Hello world!\" // \"Hello world!\" \u662f\u4e00\u4e2a\u5b57\u9762\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u4e3a\u5b57\u7b26\u4e32 \"Hello world!\" x // x \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u6c42\u503c\u7ed3\u679c\u5373 x \u7684\u503c 2 + 3 // \u8fd0\u7b97\u7b26 + \u5c06 2 \u548c 3 \u76f8\u52a0\u5f97\u5230 5 x = 2 + 3 // 2 + 3 \u6c42\u503c\u5f97\u5230 5\uff0c\u7136\u540e\u8d4b\u503c\u7ed9\u53d8\u91cf x std :: cout << x // x \u6c42\u503c\u5f97\u5230 x \u7684\u503c\uff0c\u7136\u540e\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u754c\u9762\u4e0a five () // \u5bf9\u51fd\u6570 five() \u7684\u8fd4\u56de\u503c\u6c42\u503c \u6b63\u5982\u4f60\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b57\u9762\u91cf\u6c42\u503c\u7684\u7ed3\u679c\u5c31\u662f\u5176\u672c\u8eab\u3002\u53d8\u91cf\u6c42\u503c\u7684\u7ed3\u679c\uff0c\u662f\u53d8\u91cf\u7684\u503c\u3002\u867d\u7136\u51fd\u6570\u8c03\u7528\u6211\u4eec\u8fd8\u6ca1\u6709\u4ecb\u7ecd\uff0c\u4f46\u662f\u5728\u8868\u8fbe\u5f0f\u7684\u8bed\u5883\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u7684\u6c42\u503c\u7ed3\u679c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u8fd0\u7b97\u7b26\u7684\u6c42\u503c\u5219\u5141\u8bb8\u6211\u4eec\u5408\u5e76\u591a\u4e2a\u503c\u5e76\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u65b0\u503c\u3002 \u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u5e76\u4e0d\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff0c\u800c\u4e14\u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u5355\u72ec\u7684\u5143\u7d20\u8fdb\u884c\u7f16\u8bd1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7f16\u8bd1 x = 5 \uff0c\u4f60\u7684\u7f16\u8bd1\u5668\u5c06\u4f1a\u4fdd\u5b58\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u63d0\u793a\u4f60\u7f3a\u5c11\u5206\u53f7\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u8868\u8fbe\u5f0f\u603b\u662f\u4f5c\u4e3a\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u6c42\u503c\u7684\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u6761\u8bed\u53e5\uff1a 1 int x { 2 + 3 }; // 2 + 3 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b83\u4e0d\u4ee5\u5206\u53f7\u7eaa\u59d4 -- \u5206\u53f7\u5e94\u8be5\u4f4d\u4e8e\u5305\u542b\u8be5\u8868\u8fbe\u5f0f\u7684\u8bed\u53e5\u7684\u672b\u5c3e \u5982\u679c\u4f60\u60f3\u8981\u6df1\u7a76\u8be5\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\uff0c\u5b83\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u79cd\u5f62\u5f0f\uff1a 1 type identifier { expression }; Type \u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 int \uff09\uff0c\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 x \uff09\u3002\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 2+3\uff0c\u5373\u4e24\u4e2a\u5b57\u9762\u91cf\u548c\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff09\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u5728 C++ \u4e2d\uff0c\u4efb\u4f55\u5141\u8bb8\u4f60\u4f7f\u7528\u4e00\u4e2a\u5355\u503c\u7684\u5730\u65b9\uff0c\u4f60\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u66ff\u4ee3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6700\u7ec8\u4f1a\u6c42\u503c\u5f97\u5230\u4e00\u4e2a\u5355\u503c\u3002","title":"\u8868\u8fbe\u5f0f"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.10%20%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E4%BB%8B/#_2","text":"\u6709\u4e9b\u8868\u8fbe\u5f0f\u672c\u8eab\u662f\u6709\u5176\u7279\u5b9a\u7528\u9014\u7684\uff08\u4f8b\u5982 x = 5 )\u3002\u4f46\u662f\uff0c\u524d\u9762\u6211\u4eec\u4e5f\u8bf4\u8fc7\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5982\u4f55\u624d\u80fd\u5355\u72ec\u5730\u4f7f\u7528\u8fd9\u4e9b\u7279\u5b9a\u7684\u8868\u8fbe\u5f0f\u5462\uff1f \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7684\u8bed\u53e5\uff08\u79f0\u4e3a\u8868\u8fbe\u5f0f\u8bed\u53e5\uff09\u3002 \u8868\u8fbe\u5f0f\u8bed\u53e5 \u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u7d27\u63a5\u7740\u4e00\u4e2a\u5206\u53f7\u3002\u5f53\u8be5\u8bed\u53e5\u6267\u884c\u65f6\uff0c\u8868\u8fbe\u5f0f\u5c31\u4f1a\u88ab\u6c42\u503c\uff08\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4f1a\u88ab\u4e22\u5f03\uff09\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u610f\u8868\u8fbe\u5f0f\uff08\u4f8b\u5982 x = 5 \uff09\u8f6c\u6362\u6210\u7b49\u4ef7\u7684\u8868\u8fbe\u5f0f\u8bed\u53e5\uff08\u4f8b\u5982\uff0c x = 5; \uff09\u5e76\u7f16\u8bd1\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u8868\u8fbe\u5f0f\u8bed\u53e5\uff0c\u4f46\u8fd9\u6837\u505a\u6709\u65f6\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff08\u4f8b\u5982 2 * 3; \uff09\uff0c\u5b83\u7684\u6c42\u503c\u7ed3\u679c\u4e3a 6\uff0c\u7136\u540e 6 \u5c31\u88ab\u4e22\u5f03\u4e86\u3002 [!TIP] \u6cd5\u5219 \u8868\u8fbe\u5f0f\u4e2d\u8ba1\u7b97\u5f97\u5230\u7684\u503c\u4f1a\u5728\u8868\u8fbe\u5f0f\u7ed3\u675f\u540e\u88ab\u4e22\u5f03\u3002","title":"\u8868\u8fbe\u5f0f\u8bed\u53e5"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.11 \u2014 Developing your first program - \u4f5c\u8005\uff1a ALEX - 2022-3-7 1.11 \u5f00\u53d1\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u524d\u9762\u7684\u8bfe\u7a0b\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u4e0d\u5c11\u672f\u8bed\u548c\u6982\u5ff5\uff0c\u8fd9\u4e9b\u672f\u8bed\u548c\u6982\u5ff5\u51e0\u4e4e\u4f1a\u5728\u6211\u4eec\u7f16\u5199\u7684\u4efb\u4f55\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u3002\u5728\u672c\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u8fd0\u7528\u6240\u5b66\u7684\u5185\u5bb9\uff0c\u52a8\u624b\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u5c0f\u7a0b\u5e8f\uff1a\u8f93\u5165\u7684\u6570\u5b57\u4e58\u4ee5 2 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u578b\u6570\u5e76\u7b49\u5f85\u7528\u6237\u5b8c\u6210\u8f93\u5165\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u5c06\u8be5\u503c\u4e58\u4ee5 2 \u5e76\u544a\u8bc9\u7528\u6237\u8ba1\u7b97\u7ed3\u679c\u3002\u4e0a\u8ff0\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff08\u5047\u8bbe\u8f93\u5165\u503c\u4e3a 4\uff09\uff1a 1 2 Enter an integer: 4 Double that number is: 8 \u4e0b\u9762\u8ba9\u6211\u4eec\u6765 \u9010\u6b65 \u5b8c\u6210\u4e0a\u8ff0\u529f\u80fd\uff1a [!TIP] \u6700\u4f73\u5b9e\u8df5 \u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u4f1a\u53bb\u5c1d\u8bd5\u4e00\u6b21\u6027\u5b8c\u6210\u6574\u4e2a\u7a0b\u5e8f\u7684\u7f16\u5199\uff0c\u7136\u540e\u4fbf\u4f1a\u56e0\u4e3a\u5927\u91cf\u62a5\u9519\u4fe1\u606f\u800c\u611f\u5230\u65e0\u6240\u9002\u4ece\u3002\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u662f\u6bcf\u6b21\u6dfb\u52a0\u4e00\u90e8\u5206\u5185\u5bb9\u5e76\u4fdd\u8bc1\u5176\u80fd\u591f\u901a\u8fc7\u7f16\u8bd1\u548c\u901a\u8fc7\u6d4b\u8bd5\u3002\u5f53\u4f60\u80fd\u591f\u786e\u4fdd\u5176\u6b63\u786e\u5de5\u4f5c\u540e\uff0c\u518d\u7f16\u5199\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u3002 \u672c\u8282\u8bfe\u4e5f\u4f1a\u91c7\u53d6\u4e0a\u8ff0\u7b56\u7565\u3002\u6211\u4eec\u4f1a\u5c06\u7a0b\u5e8f\u7684\u5b9e\u73b0\u5206\u4e3a\u591a\u4e2a\u6b65\u9aa4\uff0c\u8bf7\u5c06\u5404\u6b65\u9aa4\u4e2d\u7684\u4ee3\u7801 \u8f93\u5165 \uff08\u4e0d\u8981\u590d\u5236\u7c98\u8d34\uff09\u8ba1\u7b97\u673a\uff0c\u7f16\u8bd1\u5e76\u4e14\u8fd0\u884c\u3002 \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\u9879\u76ee\u3002 \u73b0\u5728\uff0c\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u7a0b\u5e8f\u6846\u67b6\u3002\u6211\u4eec\u77e5\u9053\uff0c\u7f16\u5199\u4e00\u4e2a main() \u7a0b\u5e8f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u6b65\u9aa4\uff08\u56e0\u4e3a C++\u7a0b\u5e8f\u5fc5\u987b\u5177\u6709\u4e00\u4e2a main \u51fd\u6570\uff09\u3002\u5982\u679c\u4f60\u7684 IDE \u6ca1\u6709\u4e3a\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u7a7a\u51fd\u6570\u7684\u8bdd\uff0c\u8bf7\u50cf\u4e0b\u9762\u8fd9\u6837\u81ea\u884c\u7f16\u5199\u4e00\u4e2a\uff1a 1 2 3 4 int main () { return 0 ; } \u7531\u4e8e\u9700\u8981\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u4fe1\u606f\u4ee5\u53ca\u4ece\u7528\u6237\u83b7\u53d6\u6570\uff0c\u56e0\u6b64\u5fc5\u987b\u8981\u5305\u542b iostream \u5934\u6587\u4ef6\u4ee5\u4fbf\u80fd\u591f\u8bbf\u95ee std:: cout \u548c std:: cin \u3002 1 2 3 4 5 6 #include <iostream> int main () { return 0 ; } \u73b0\u5728\uff0c\u5411\u7528\u6237\u53d1\u9001\u4fe1\u606f\uff0c\u63d0\u793a\u4ed6\u8f93\u5165\u4e00\u4e2a\u6574\u578b\uff1a 1 2 3 4 5 6 7 8 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; return 0 ; } \u81f3\u6b64\uff0c\u8be5\u7a0b\u5e8f\u5e94\u8be5\u80fd\u591f\u5f97\u5230\u5982\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1 Enter an integer: \u7136\u540e\u7a0b\u5e8f\u5c31\u7ec8\u6b62\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u4f7f\u7528 std:: cin \u548c operator>> \u6765\u5b8c\u6210\u3002\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7528\u6765\u5b58\u653e\u8f93\u5165\u7ed3\u679c\u7684\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int num { }; // define variable num as an integer variable std :: cin << num ; // get integer value from user's keyboard return 0 ; } \u662f\u65f6\u5019\u518d\u6b21\u7f16\u8bd1\u7a0b\u5e8f\u4e86... \u7cdf\u7cd5\uff01\u4f5c\u8005\u7684 Visual Studio 2017 \u62a5\u544a\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 1>------ Build started: Project: Double, Configuration: Release Win32 ------ 1>Double.cpp 1>c:\\vcprojects\\double\\double.cpp(8): error C2678: binary '<<': no operator found which takes a left-hand operand of type 'std::istream' (or there is no acceptable conversion) 1>c:\\vcprojects\\double\\double.cpp: note: could be 'built-in C++ operator<<(bool, int)' 1>c:\\vcprojects\\double\\double.cpp: note: while trying to match the argument list '(std::istream, int)' 1>Done building project \"Double.vcxproj\" -- FAILED. ========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ========== \u6709\u7f16\u8bd1\u9519\u8bef\uff01 \u9996\u5148\uff0c\u7531\u4e8e\u8fd9\u6b21\u7f16\u8bd1\u53d1\u751f\u5728\u6700\u65b0\u4e00\u6b21\u4ee3\u7801\u4fee\u6539\u4e4b\u540e\uff0c\u7136\u540e\u5c31\u62a5\u9519\u4e86\uff0c\u8bf4\u660e\u9519\u8bef\u662f\u5728\u6700\u540e\u4e00\u6b21\u4fee\u6539\u4ee3\u7801\u65f6\u88ab\u5f15\u5165\u7684\uff087\u30018 \u4e24\u884c\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5206\u6790\u7684\u4ee3\u7801\u76f8\u5bf9\u4e8e\u5168\u90e8\u4ee3\u7801\u8d77\u59cb\u662f\u5f88\u5c11\u7684\u3002\u7b2c\u4e03\u884c\u975e\u5e38\u7b80\u5355\uff08\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff09\uff0c\u9519\u8bef\u5f88\u53ef\u80fd\u4e0d\u5728\u8fd9\u4e00\u884c\u3002\u8fd9\u6837\u4e00\u6765\u7b2c\u516b\u884c\u7684\u5acc\u7591\u5c31\u5f88\u5927\u4e86\u3002 \u5176\u6b21\uff0c\u8fd9\u91cc\u7684\u62a5\u9519\u4fe1\u606f\u5e76\u4e0d\u662f\u975e\u5e38\u6613\u8bfb\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u5bfb\u627e\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff1a\u7f16\u8bd1\u5668\u544a\u8bc9\u6211\u4eec\uff0c\u9519\u8bef\u53d1\u9001\u5728\u7b2c\u516b\u884c\u3002\u8fd9\u610f\u5473\u7740\u9519\u8bef\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u7b2c\u516b\u884c\u6216\u7b2c\u516b\u884c\u4e4b\u524d\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u6211\u4eec\u4e4b\u524d\u7684\u731c\u60f3\u3002\u7136\u540e\uff0c\u7f16\u8bd1\u5668\u544a\u8bc9\u6211\u4eec\uff0c\u5b83\u6ca1\u6709\u80fd\u591f\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u5728\u7b26\u53f7\u5de6\u4fa7\u63a5\u53d7\u4e00\u4e2a std:: istream \u7c7b\u578b\uff08\u5373 std:: cin \u7684\u7c7b\u578b\uff09\u7684\u64cd\u4f5c\u6570\u7684 << \u8fd0\u7b97\u7b26\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd0\u7b97\u7b26 << \u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406 std:: cin \u3002\u56e0\u6b64\uff0c\u5f15\u8d77\u9519\u8bef\u7684\u8981\u4e48\u662f\u4f7f\u7528 std:: cin \u4e0d\u5f53\uff0c\u8981\u4e48\u662f\u4f7f\u7528 << \u4e0d\u5f53\u3002 \u770b\u51fa\u95ee\u9898\u4e86\u5417\uff1f\u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u90a3\u518d\u4ed4\u7ec6\u770b\u770b\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6b63\u786e\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; // std::cin uses operator >>, not operator <<! return 0 ; } \u8fd9\u4efd\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff0c\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u6d4b\u8bd5\u3002\u8be5\u7a0b\u5e8f\u4f1a\u7b49\u5f85\u4f60\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u91cc\u6211\u4eec\u8f93\u5165 4\u3002\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 Enter an integer: 4 \u5dee\u4e0d\u591a\u8981\u5b8c\u6210\u4e86\uff01\u6700\u540e\u4e00\u4e2a\u662f\u5c06\u8f93\u5165\u7ed3\u679c\u4e58\u4ee5 2\u3002 \u5b8c\u6210\u6700\u540e\u4e00\u6b65\u540e\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u5e76\u8fd0\u884c\u5b83\uff0c\u540c\u65f6\u4fdd\u8bc1\u8f93\u51fa\u671f\u671b\u7684\u7ed3\u679c\u3002 \u8fd9\u91cc\u6709\u4e09\u79cd\u65b9\u5f0f\u6765\u5b8c\u6210\u5176\u529f\u80fd\uff0c\u4ece\u574f\u5230\u597d\u5206\u522b\u4e3a\uff1a \u4e0d\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // worst version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; num = num * 2 ; // double num's value, then assign that value back to num std :: cout << \"Double that number is: \" << num << '\\n' ; return 0 ; } \u5728\u8fd9\u4e2a\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8868\u8fbe\u5f0f\u5c06 num \u7684\u503c\u4e58\u4ee5 2\uff0c\u7136\u540e\u5c06\u5176\u518d\u6b21\u8d4b\u503c\u7ed9 num \u3002\u6b64\u65f6\uff0c num \u7684\u503c\u5c31\u662f\u4e58\u4ee5 2 \u540e\u7684\u7ed3\u679c\u4e86\u3002 \u4e3a\u4ec0\u4e48\u8bf4\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u597d\u5462\uff1f \u5728\u8d4b\u503c\u8bed\u53e5\u4e4b\u524d\uff0c num \u5305\u542b\u7684\u662f\u7528\u6237\u7684\u8f93\u5165\uff0c\u5728\u8d4b\u503c\u8bed\u53e5\u4e4b\u540e\uff0c\u5b83\u5305\u542b\u7684\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\u3002\u8fd9\u4f1a\u4ee4\u4eba\u611f\u5230\u56f0\u60d1\u3002 \u901a\u8fc7\u4e3a\u63a5\u6536\u8f93\u5165\u7684\u53d8\u91cf\u8d4b\u65b0\u503c\uff0c\u6211\u4eec\u8986\u76d6\u4e86\u5b83\u539f\u6709\u7684\u503c\uff0c\u90a3\u4e48\u5982\u679c\u5728\u540e\u7eed\u6269\u5c55\u7a0b\u5e8f\u7684\u65f6\u5019\u5e0c\u671b\u518d\u6b21\u4f7f\u7528\u8fd9\u4e2a\u8f93\u5165\u503c\u6765\u505a\u4e9b\u522b\u7684\u4e8b\u60c5\u5c31\u65e0\u6cd5\u5b9e\u73b0\u4e86\uff08\u4f8b\u5982\u5c06\u8f93\u5165\u7ed3\u679c\u4e58\u4ee5 3\uff09\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u4e22\u5f03\u4e86\u3002 \u8fd8\u4e0d\u9519\u7684\u89e3\u51b3\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> // less-bad version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; int doublenum { num * 2 }; // define a new variable and initialize it with num * 2 std :: cout << \"Double that number is: \" << doublenum << '\\n' ; // then print the value of that variable here return 0 ; } \u8fd9\u4e2a\u65b9\u6848\u975e\u5e38\u7684\u76f4\u767d\uff0c\u5b83\u89e3\u51b3\u4e86\u4e0a\u4e00\u79cd\u65b9\u6848\u4e2d\u4f1a\u9762\u4e34\u7684\u4e24\u4e2a\u95ee\u9898\u3002 \u8fd9\u4e2a\u65b9\u6848\u7684\u4e3b\u8981\u7f3a\u70b9\u5728\u4e8e\uff0c\u8fd9\u91cc\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff08\u7740\u65e0\u7591\u589e\u52a0\u4e86\u590d\u6742\u6027\uff09\u6765\u5b58\u50a8\u4e00\u4e2a\u4e00\u6b21\u6027\u7684\u503c\u3002\u4e00\u5b9a\u8fd8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002 \u6700\u4f73\u65b9\u6848 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> // preferred version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; std :: cout << \"Double that number is: \" << num * 2 << '\\n' ; // use an expression to multiply num * 2 at the point where we are going to print it return 0 ; } \u8fd9\u79cd\u65b9\u6cd5\u662f\u8fd9\u4e00\u7cfb\u5217\u89e3\u51b3\u65b9\u6848\u4e2d\u6700\u63a8\u8350\u7684\u3002\u5f53 std:: cout \u6267\u884c\u7684\u65f6\u5019\uff0c\u8868\u8fbe\u5f0f num * 2 \u4f1a\u8fdb\u884c\u6c42\u503c\uff0c\u5176\u7ed3\u679c\u5c31\u662f\u4e24\u500d\u7684 num \u503c\u3002\u8be5\u503c\u4f1a\u88ab\u6253\u5370\u5904\u7406\uff0c\u540c\u65f6\u53d8\u91cf num \u7684\u503c\u5e76\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u65b9\u4fbf\u6211\u4eec\u540e\u7eed\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 \u8fd9\u4e2a\u7248\u672c\u662f\u6211\u4eec\u63d0\u4f9b\u7684\u53c2\u8003\u7b54\u6848\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u7f16\u7a0b\u7684\u9996\u8981\u76ee\u6807\uff0c\u662f\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0d\u80fd\u5de5\u4f5c\u7684\u7a0b\u5e8f\u4e0d\u8bba\u5199\u7684\u591a\u597d s\uff0c\u90fd\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u7136\u800c\uff0c\u6211\u5f88\u559c\u6b22\u7684\u4e00\u53e5\u540d\u8a00\u662f\u8fd9\u4e48\u8bf4\u7684\uff1a\u4f60\u5fc5\u987b\u5199\u8fc7\u4e00\u904d\u4ee3\u7801\u4e4b\u540e\uff0c\u624d\u80fd\u77e5\u9053\u4f60\u6700\u521d\u5e94\u8be5\u5982\u4f55\u53bb\u5199\u5b83\u3002\u8fd9\u53e5\u8bdd\u9053\u51fa\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u6700\u4f73\u7684\u89e3\u51b3\u65b9\u6848\u5f80\u5f80\u4e0d\u660e\u663e\u7684\uff0c\u800c\u6700\u5148\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5f80\u5f80\u53c8\u4e0d\u662f\u6700\u4f73\u7684\u3002 \u5728\u6211\u4eec\u4e13\u6ce8\u4e8e\u5982\u4f55\u89e3\u51b3\u95ee\u9898\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u7684\u65f6\u5019\uff0c\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u53d6\u7422\u78e8\u8fd9\u4e9b\u6211\u4eec\u751a\u81f3\u90fd\u4e0d\u77e5\u9053\u662f\u5426\u6700\u7ec8\u4f1a\u88ab\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u662f\u4e0d\u5212\u7b97\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u53e6\u8f9f\u8e4a\u5f84\uff0c\u6682\u65f6\u8df3\u8fc7\u5f02\u5e38\u5904\u7406\u548c\u6ce8\u91ca\uff0c\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u5e2e\u52a9\u5b9a\u4f4d\u95ee\u9898\u7684\u8c03\u8bd5\u4ee3\u7801\u4e5f\u65e0\u6240\u8c13\uff0c\u6211\u4eec\u8981\u5b66\u4f1a\u6478\u7740\u77f3\u5934\u8fc7\u6cb3\uff0c\u800c\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5f7b\u5e95\u884c\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u5c31\u6362\u4e00\u79cd\u65b9\u6cd5\u4ece\u65b0\u5f00\u59cb\u3002 \u8fd9\u4e48\u505a\u7684\u7ed3\u679c\u5c31\u662f\uff0c\u6700\u521d\u7248\u672c\u7684\u4ee3\u7801\u5f80\u5f80\u7f3a\u4e4f\u6761\u7406\u3001\u5065\u58ee\u6027\u4e5f\u4e0d\u4f73\u3001\u53ef\u8bfb\u6027\u4e0d\u597d\uff0c\u5c31\u66f4\u522b\u63d0\u4ec0\u4e48\u7b80\u4ecb\u660e\u4e86\u4e86\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u5de5\u4f5c\u4e4b\u540e\uff0c\u4f60\u7684\u5de5\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\uff08\u51fa\u53d1\u4f60\u7f16\u5199\u7684\u4ee3\u7801\u662f\u4e00\u6b21\u6027\u7684\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u6e05\u7406\u4f60\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u5220\u9664\uff08\u6216\u6ce8\u91ca\u6389\uff09\u5e2e\u52a9\u8c03\u8bd5\u7684\u4e34\u65f6\u6027\u4ee3\u7801\u3001\u7f16\u5199\u6ce8\u91ca\u3001\u5904\u7406\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\u3001\u7f8e\u5316\u4ee3\u7801\u7684\u6392\u7248\u5e76\u786e\u4fdd\u4ee3\u7801\u9075\u5faa\u4e86\u76f8\u5173\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u6b64\u5916\uff0c\u4f60\u7684\u4ee3\u7801\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u7cbe\u7b80\u7684\uff0c\u4e5f\u8bb8\u91cc\u9762\u8fd8\u5b58\u5728\u7740\u53ef\u4ee5\u88ab\u5408\u5e76\u7684\u5197\u4f59\u903b\u8f91\uff0c\u6216\u8005\u5b58\u5728\u7740\u53ef\u4ee5\u88ab\u5408\u5e76\u7684\u8bed\u53e5\uff0c\u4ea6\u6216\u662f\u6709\u4e9b\u53d8\u91cf\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u4ee5\u53ca\u5176\u4ed6\u5404\u79cd\u53ef\u4ee5\u88ab\u7b80\u5316\u7684\u5e38\u89c1\u3002\u5f88\u591a\u65b0\u624b\u7a0b\u5e8f\u5458\u90fd\u8feb\u5207\u7684\u60f3\u8981\u53bb\u4f18\u5316\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u800c\u5b9e\u9645\u4e0a\u7a0b\u5e8f\u7684\u53ef\u7ef4\u62a4\u6027\u624d\u662f\u5b83\u4eec\u6700\u5e94\u8be5\u4f18\u5148\u8003\u8651\u7684\u4e8b\u60c5\u3002 \u672c\u6559\u7a0b\u63d0\u4f9b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5f88\u5c11\u662f\u7b2c\u4e00\u6b21\u5c31\u5f97\u5230\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4eec\u90fd\u7ecf\u8fc7\u4e86\u4e0d\u65ad\u7684\u4fee\u6539\uff0c\u76f4\u5230\u6211\u4eec\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u518d\u4f18\u5316\u7684\u4e86\u3002\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u5f88\u591a\u65f6\u5019\u8bfb\u8005\u8fd8\u662f\u80fd\u591f\u5411\u6211\u4eec\u63d0\u51fa\u5f88\u591a\u4f18\u5316\u7684\u5efa\u8bae\uff01 \u8bf4\u8fd9\u4e48\u591a\uff0c\u6211\u60f3\u8868\u8fbe\u7684\u662f\uff1a\u5982\u679c\u4f60\u6ca1\u6709\u4e00\u6b21\u6027\u60f3\u5230\u4e00\u4e2a\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u4e0d\u8981\u4e3a\u6b64\u611f\u5230\u6cae\u4e27\uff0c\u8fd9\u5f88\u6b63\u5e38\u3002\u7cbe\u76ca\u6c42\u7cbe\u5728\u7f16\u7a0b\u4e2d\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u8fd8\u6709\u4e00\u4ef6\u4e8b\uff1a\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u201dC++\u4e2d\u6709\u8fd9\u4e48\u591a\u7684\u89c4\u5219\u548c\u6982\u5ff5\uff0c\u6211\u600e\u4e48\u624d\u80fd\u8bb0\u4f4f\u5b83\u4eec\u5462\uff1f\u201c \u7b80\u5355\u6765\u8bf4\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u8bb0\u4f4f\u5b83\u4eec\u3002\u4f7f\u7528 C++\uff0c\u4e00\u65b9\u9762\u5728\u4e8e\u4f7f\u7528\u4f60\u5df2\u7ecf\u638c\u63e1\u7684\u77e5\u8bc6\uff0c\u53e6\u4e00\u65b9\u9762\u5728\u4e8e\u638c\u63e1\u5982\u4f55\u67e5\u627e\u5e76\u4f7f\u7528\u4f60\u6ca1\u6709\u638c\u63e1\u7684\u77e5\u8bc6\u3002 \u5f53\u4f60\u7b2c\u4e00\u6b21\u9605\u8bfb\u672c\u6559\u7a0b\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u628a\u6ce8\u610f\u529b\u653e\u5728\u8bb0\u5fc6\u89c4\u5219\u4e0a\uff0c\u800c\u662f\u8981\u91cd\u70b9\u7406\u89e3\u4f7f\u7528C++\u4f60\u80fd\u505a\u54ea\u4e9b\u4e8b\u3002\u7136\u540e\uff0c\u5f53\u4f60\u771f\u6b63\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u518d\u56de\u6765\uff08\u6216\u8005\u5230\u5176\u4ed6\u7f51\u7ad9\uff09\u53bb\u5237\u65b0\u5de9\u56fa\u4f60\u7684\u77e5\u8bc6\u5e76\u638c\u63e1\u5e94\u8be5\u5982\u4f55\u53bb\u505a\u3002","title":"1.11  \u5f00\u53d1\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/#111","text":"\u524d\u9762\u7684\u8bfe\u7a0b\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u4e0d\u5c11\u672f\u8bed\u548c\u6982\u5ff5\uff0c\u8fd9\u4e9b\u672f\u8bed\u548c\u6982\u5ff5\u51e0\u4e4e\u4f1a\u5728\u6211\u4eec\u7f16\u5199\u7684\u4efb\u4f55\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u3002\u5728\u672c\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f1a\u8fd0\u7528\u6240\u5b66\u7684\u5185\u5bb9\uff0c\u52a8\u624b\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u3002","title":"1.11 \u5f00\u53d1\u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/#2","text":"\u9996\u5148\uff0c\u6211\u4eec\u4f1a\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u578b\u6570\u5e76\u7b49\u5f85\u7528\u6237\u5b8c\u6210\u8f93\u5165\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u5c06\u8be5\u503c\u4e58\u4ee5 2 \u5e76\u544a\u8bc9\u7528\u6237\u8ba1\u7b97\u7ed3\u679c\u3002\u4e0a\u8ff0\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff08\u5047\u8bbe\u8f93\u5165\u503c\u4e3a 4\uff09\uff1a 1 2 Enter an integer: 4 Double that number is: 8 \u4e0b\u9762\u8ba9\u6211\u4eec\u6765 \u9010\u6b65 \u5b8c\u6210\u4e0a\u8ff0\u529f\u80fd\uff1a [!TIP] \u6700\u4f73\u5b9e\u8df5 \u65b0\u624b\u7a0b\u5e8f\u5458\u5e38\u4f1a\u53bb\u5c1d\u8bd5\u4e00\u6b21\u6027\u5b8c\u6210\u6574\u4e2a\u7a0b\u5e8f\u7684\u7f16\u5199\uff0c\u7136\u540e\u4fbf\u4f1a\u56e0\u4e3a\u5927\u91cf\u62a5\u9519\u4fe1\u606f\u800c\u611f\u5230\u65e0\u6240\u9002\u4ece\u3002\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u662f\u6bcf\u6b21\u6dfb\u52a0\u4e00\u90e8\u5206\u5185\u5bb9\u5e76\u4fdd\u8bc1\u5176\u80fd\u591f\u901a\u8fc7\u7f16\u8bd1\u548c\u901a\u8fc7\u6d4b\u8bd5\u3002\u5f53\u4f60\u80fd\u591f\u786e\u4fdd\u5176\u6b63\u786e\u5de5\u4f5c\u540e\uff0c\u518d\u7f16\u5199\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u3002 \u672c\u8282\u8bfe\u4e5f\u4f1a\u91c7\u53d6\u4e0a\u8ff0\u7b56\u7565\u3002\u6211\u4eec\u4f1a\u5c06\u7a0b\u5e8f\u7684\u5b9e\u73b0\u5206\u4e3a\u591a\u4e2a\u6b65\u9aa4\uff0c\u8bf7\u5c06\u5404\u6b65\u9aa4\u4e2d\u7684\u4ee3\u7801 \u8f93\u5165 \uff08\u4e0d\u8981\u590d\u5236\u7c98\u8d34\uff09\u8ba1\u7b97\u673a\uff0c\u7f16\u8bd1\u5e76\u4e14\u8fd0\u884c\u3002 \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\u9879\u76ee\u3002 \u73b0\u5728\uff0c\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u7a0b\u5e8f\u6846\u67b6\u3002\u6211\u4eec\u77e5\u9053\uff0c\u7f16\u5199\u4e00\u4e2a main() \u7a0b\u5e8f\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u6b65\u9aa4\uff08\u56e0\u4e3a C++\u7a0b\u5e8f\u5fc5\u987b\u5177\u6709\u4e00\u4e2a main \u51fd\u6570\uff09\u3002\u5982\u679c\u4f60\u7684 IDE \u6ca1\u6709\u4e3a\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u7a7a\u51fd\u6570\u7684\u8bdd\uff0c\u8bf7\u50cf\u4e0b\u9762\u8fd9\u6837\u81ea\u884c\u7f16\u5199\u4e00\u4e2a\uff1a 1 2 3 4 int main () { return 0 ; } \u7531\u4e8e\u9700\u8981\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u4fe1\u606f\u4ee5\u53ca\u4ece\u7528\u6237\u83b7\u53d6\u6570\uff0c\u56e0\u6b64\u5fc5\u987b\u8981\u5305\u542b iostream \u5934\u6587\u4ef6\u4ee5\u4fbf\u80fd\u591f\u8bbf\u95ee std:: cout \u548c std:: cin \u3002 1 2 3 4 5 6 #include <iostream> int main () { return 0 ; } \u73b0\u5728\uff0c\u5411\u7528\u6237\u53d1\u9001\u4fe1\u606f\uff0c\u63d0\u793a\u4ed6\u8f93\u5165\u4e00\u4e2a\u6574\u578b\uff1a 1 2 3 4 5 6 7 8 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; return 0 ; } \u81f3\u6b64\uff0c\u8be5\u7a0b\u5e8f\u5e94\u8be5\u80fd\u591f\u5f97\u5230\u5982\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1 Enter an integer: \u7136\u540e\u7a0b\u5e8f\u5c31\u7ec8\u6b62\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\u4fe1\u606f\uff0c\u8fd9\u91cc\u4f7f\u7528 std:: cin \u548c operator>> \u6765\u5b8c\u6210\u3002\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7528\u6765\u5b58\u653e\u8f93\u5165\u7ed3\u679c\u7684\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int num { }; // define variable num as an integer variable std :: cin << num ; // get integer value from user's keyboard return 0 ; } \u662f\u65f6\u5019\u518d\u6b21\u7f16\u8bd1\u7a0b\u5e8f\u4e86... \u7cdf\u7cd5\uff01\u4f5c\u8005\u7684 Visual Studio 2017 \u62a5\u544a\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 1>------ Build started: Project: Double, Configuration: Release Win32 ------ 1>Double.cpp 1>c:\\vcprojects\\double\\double.cpp(8): error C2678: binary '<<': no operator found which takes a left-hand operand of type 'std::istream' (or there is no acceptable conversion) 1>c:\\vcprojects\\double\\double.cpp: note: could be 'built-in C++ operator<<(bool, int)' 1>c:\\vcprojects\\double\\double.cpp: note: while trying to match the argument list '(std::istream, int)' 1>Done building project \"Double.vcxproj\" -- FAILED. ========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ========== \u6709\u7f16\u8bd1\u9519\u8bef\uff01 \u9996\u5148\uff0c\u7531\u4e8e\u8fd9\u6b21\u7f16\u8bd1\u53d1\u751f\u5728\u6700\u65b0\u4e00\u6b21\u4ee3\u7801\u4fee\u6539\u4e4b\u540e\uff0c\u7136\u540e\u5c31\u62a5\u9519\u4e86\uff0c\u8bf4\u660e\u9519\u8bef\u662f\u5728\u6700\u540e\u4e00\u6b21\u4fee\u6539\u4ee3\u7801\u65f6\u88ab\u5f15\u5165\u7684\uff087\u30018 \u4e24\u884c\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5206\u6790\u7684\u4ee3\u7801\u76f8\u5bf9\u4e8e\u5168\u90e8\u4ee3\u7801\u8d77\u59cb\u662f\u5f88\u5c11\u7684\u3002\u7b2c\u4e03\u884c\u975e\u5e38\u7b80\u5355\uff08\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff09\uff0c\u9519\u8bef\u5f88\u53ef\u80fd\u4e0d\u5728\u8fd9\u4e00\u884c\u3002\u8fd9\u6837\u4e00\u6765\u7b2c\u516b\u884c\u7684\u5acc\u7591\u5c31\u5f88\u5927\u4e86\u3002 \u5176\u6b21\uff0c\u8fd9\u91cc\u7684\u62a5\u9519\u4fe1\u606f\u5e76\u4e0d\u662f\u975e\u5e38\u6613\u8bfb\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u5bfb\u627e\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff1a\u7f16\u8bd1\u5668\u544a\u8bc9\u6211\u4eec\uff0c\u9519\u8bef\u53d1\u9001\u5728\u7b2c\u516b\u884c\u3002\u8fd9\u610f\u5473\u7740\u9519\u8bef\u5f88\u53ef\u80fd\u53d1\u751f\u5728\u7b2c\u516b\u884c\u6216\u7b2c\u516b\u884c\u4e4b\u524d\uff0c\u8fd9\u4e5f\u5370\u8bc1\u4e86\u6211\u4eec\u4e4b\u524d\u7684\u731c\u60f3\u3002\u7136\u540e\uff0c\u7f16\u8bd1\u5668\u544a\u8bc9\u6211\u4eec\uff0c\u5b83\u6ca1\u6709\u80fd\u591f\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u5728\u7b26\u53f7\u5de6\u4fa7\u63a5\u53d7\u4e00\u4e2a std:: istream \u7c7b\u578b\uff08\u5373 std:: cin \u7684\u7c7b\u578b\uff09\u7684\u64cd\u4f5c\u6570\u7684 << \u8fd0\u7b97\u7b26\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd0\u7b97\u7b26 << \u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406 std:: cin \u3002\u56e0\u6b64\uff0c\u5f15\u8d77\u9519\u8bef\u7684\u8981\u4e48\u662f\u4f7f\u7528 std:: cin \u4e0d\u5f53\uff0c\u8981\u4e48\u662f\u4f7f\u7528 << \u4e0d\u5f53\u3002 \u770b\u51fa\u95ee\u9898\u4e86\u5417\uff1f\u5982\u679c\u8fd8\u6ca1\u6709\uff0c\u90a3\u518d\u4ed4\u7ec6\u770b\u770b\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6b63\u786e\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; // std::cin uses operator >>, not operator <<! return 0 ; } \u8fd9\u4efd\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff0c\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u6d4b\u8bd5\u3002\u8be5\u7a0b\u5e8f\u4f1a\u7b49\u5f85\u4f60\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u91cc\u6211\u4eec\u8f93\u5165 4\u3002\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 Enter an integer: 4 \u5dee\u4e0d\u591a\u8981\u5b8c\u6210\u4e86\uff01\u6700\u540e\u4e00\u4e2a\u662f\u5c06\u8f93\u5165\u7ed3\u679c\u4e58\u4ee5 2\u3002 \u5b8c\u6210\u6700\u540e\u4e00\u6b65\u540e\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u5e76\u8fd0\u884c\u5b83\uff0c\u540c\u65f6\u4fdd\u8bc1\u8f93\u51fa\u671f\u671b\u7684\u7ed3\u679c\u3002 \u8fd9\u91cc\u6709\u4e09\u79cd\u65b9\u5f0f\u6765\u5b8c\u6210\u5176\u529f\u80fd\uff0c\u4ece\u574f\u5230\u597d\u5206\u522b\u4e3a\uff1a","title":"\u5c0f\u7a0b\u5e8f\uff1a\u8f93\u5165\u7684\u6570\u5b57\u4e58\u4ee5 2"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // worst version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; num = num * 2 ; // double num's value, then assign that value back to num std :: cout << \"Double that number is: \" << num << '\\n' ; return 0 ; } \u5728\u8fd9\u4e2a\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8868\u8fbe\u5f0f\u5c06 num \u7684\u503c\u4e58\u4ee5 2\uff0c\u7136\u540e\u5c06\u5176\u518d\u6b21\u8d4b\u503c\u7ed9 num \u3002\u6b64\u65f6\uff0c num \u7684\u503c\u5c31\u662f\u4e58\u4ee5 2 \u540e\u7684\u7ed3\u679c\u4e86\u3002 \u4e3a\u4ec0\u4e48\u8bf4\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u597d\u5462\uff1f \u5728\u8d4b\u503c\u8bed\u53e5\u4e4b\u524d\uff0c num \u5305\u542b\u7684\u662f\u7528\u6237\u7684\u8f93\u5165\uff0c\u5728\u8d4b\u503c\u8bed\u53e5\u4e4b\u540e\uff0c\u5b83\u5305\u542b\u7684\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\u3002\u8fd9\u4f1a\u4ee4\u4eba\u611f\u5230\u56f0\u60d1\u3002 \u901a\u8fc7\u4e3a\u63a5\u6536\u8f93\u5165\u7684\u53d8\u91cf\u8d4b\u65b0\u503c\uff0c\u6211\u4eec\u8986\u76d6\u4e86\u5b83\u539f\u6709\u7684\u503c\uff0c\u90a3\u4e48\u5982\u679c\u5728\u540e\u7eed\u6269\u5c55\u7a0b\u5e8f\u7684\u65f6\u5019\u5e0c\u671b\u518d\u6b21\u4f7f\u7528\u8fd9\u4e2a\u8f93\u5165\u503c\u6765\u505a\u4e9b\u522b\u7684\u4e8b\u60c5\u5c31\u65e0\u6cd5\u5b9e\u73b0\u4e86\uff08\u4f8b\u5982\u5c06\u8f93\u5165\u7ed3\u679c\u4e58\u4ee5 3\uff09\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u4e22\u5f03\u4e86\u3002","title":"\u4e0d\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff1a"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> // less-bad version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; int doublenum { num * 2 }; // define a new variable and initialize it with num * 2 std :: cout << \"Double that number is: \" << doublenum << '\\n' ; // then print the value of that variable here return 0 ; } \u8fd9\u4e2a\u65b9\u6848\u975e\u5e38\u7684\u76f4\u767d\uff0c\u5b83\u89e3\u51b3\u4e86\u4e0a\u4e00\u79cd\u65b9\u6848\u4e2d\u4f1a\u9762\u4e34\u7684\u4e24\u4e2a\u95ee\u9898\u3002 \u8fd9\u4e2a\u65b9\u6848\u7684\u4e3b\u8981\u7f3a\u70b9\u5728\u4e8e\uff0c\u8fd9\u91cc\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff08\u7740\u65e0\u7591\u589e\u52a0\u4e86\u590d\u6742\u6027\uff09\u6765\u5b58\u50a8\u4e00\u4e2a\u4e00\u6b21\u6027\u7684\u503c\u3002\u4e00\u5b9a\u8fd8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002","title":"\u8fd8\u4e0d\u9519\u7684\u89e3\u51b3\u65b9\u6848"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.11%20%20%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> // preferred version int main () { std :: cout << \"Enter an integer: \" ; int num { }; std :: cin >> num ; std :: cout << \"Double that number is: \" << num * 2 << '\\n' ; // use an expression to multiply num * 2 at the point where we are going to print it return 0 ; } \u8fd9\u79cd\u65b9\u6cd5\u662f\u8fd9\u4e00\u7cfb\u5217\u89e3\u51b3\u65b9\u6848\u4e2d\u6700\u63a8\u8350\u7684\u3002\u5f53 std:: cout \u6267\u884c\u7684\u65f6\u5019\uff0c\u8868\u8fbe\u5f0f num * 2 \u4f1a\u8fdb\u884c\u6c42\u503c\uff0c\u5176\u7ed3\u679c\u5c31\u662f\u4e24\u500d\u7684 num \u503c\u3002\u8be5\u503c\u4f1a\u88ab\u6253\u5370\u5904\u7406\uff0c\u540c\u65f6\u53d8\u91cf num \u7684\u503c\u5e76\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u65b9\u4fbf\u6211\u4eec\u540e\u7eed\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 \u8fd9\u4e2a\u7248\u672c\u662f\u6211\u4eec\u63d0\u4f9b\u7684\u53c2\u8003\u7b54\u6848\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u7f16\u7a0b\u7684\u9996\u8981\u76ee\u6807\uff0c\u662f\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0d\u80fd\u5de5\u4f5c\u7684\u7a0b\u5e8f\u4e0d\u8bba\u5199\u7684\u591a\u597d s\uff0c\u90fd\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u7136\u800c\uff0c\u6211\u5f88\u559c\u6b22\u7684\u4e00\u53e5\u540d\u8a00\u662f\u8fd9\u4e48\u8bf4\u7684\uff1a\u4f60\u5fc5\u987b\u5199\u8fc7\u4e00\u904d\u4ee3\u7801\u4e4b\u540e\uff0c\u624d\u80fd\u77e5\u9053\u4f60\u6700\u521d\u5e94\u8be5\u5982\u4f55\u53bb\u5199\u5b83\u3002\u8fd9\u53e5\u8bdd\u9053\u51fa\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u6700\u4f73\u7684\u89e3\u51b3\u65b9\u6848\u5f80\u5f80\u4e0d\u660e\u663e\u7684\uff0c\u800c\u6700\u5148\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5f80\u5f80\u53c8\u4e0d\u662f\u6700\u4f73\u7684\u3002 \u5728\u6211\u4eec\u4e13\u6ce8\u4e8e\u5982\u4f55\u89e3\u51b3\u95ee\u9898\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u7684\u65f6\u5019\uff0c\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u53d6\u7422\u78e8\u8fd9\u4e9b\u6211\u4eec\u751a\u81f3\u90fd\u4e0d\u77e5\u9053\u662f\u5426\u6700\u7ec8\u4f1a\u88ab\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u662f\u4e0d\u5212\u7b97\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u53e6\u8f9f\u8e4a\u5f84\uff0c\u6682\u65f6\u8df3\u8fc7\u5f02\u5e38\u5904\u7406\u548c\u6ce8\u91ca\uff0c\u4ee3\u7801\u4e2d\u5145\u65a5\u7740\u5927\u91cf\u7684\u5e2e\u52a9\u5b9a\u4f4d\u95ee\u9898\u7684\u8c03\u8bd5\u4ee3\u7801\u4e5f\u65e0\u6240\u8c13\uff0c\u6211\u4eec\u8981\u5b66\u4f1a\u6478\u7740\u77f3\u5934\u8fc7\u6cb3\uff0c\u800c\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5f7b\u5e95\u884c\u4e0d\u901a\u7684\u65f6\u5019\uff0c\u5c31\u6362\u4e00\u79cd\u65b9\u6cd5\u4ece\u65b0\u5f00\u59cb\u3002 \u8fd9\u4e48\u505a\u7684\u7ed3\u679c\u5c31\u662f\uff0c\u6700\u521d\u7248\u672c\u7684\u4ee3\u7801\u5f80\u5f80\u7f3a\u4e4f\u6761\u7406\u3001\u5065\u58ee\u6027\u4e5f\u4e0d\u4f73\u3001\u53ef\u8bfb\u6027\u4e0d\u597d\uff0c\u5c31\u66f4\u522b\u63d0\u4ec0\u4e48\u7b80\u4ecb\u660e\u4e86\u4e86\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u5de5\u4f5c\u4e4b\u540e\uff0c\u4f60\u7684\u5de5\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\uff08\u51fa\u53d1\u4f60\u7f16\u5199\u7684\u4ee3\u7801\u662f\u4e00\u6b21\u6027\u7684\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u6e05\u7406\u4f60\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u5220\u9664\uff08\u6216\u6ce8\u91ca\u6389\uff09\u5e2e\u52a9\u8c03\u8bd5\u7684\u4e34\u65f6\u6027\u4ee3\u7801\u3001\u7f16\u5199\u6ce8\u91ca\u3001\u5904\u7406\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\u3001\u7f8e\u5316\u4ee3\u7801\u7684\u6392\u7248\u5e76\u786e\u4fdd\u4ee3\u7801\u9075\u5faa\u4e86\u76f8\u5173\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u6b64\u5916\uff0c\u4f60\u7684\u4ee3\u7801\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u7cbe\u7b80\u7684\uff0c\u4e5f\u8bb8\u91cc\u9762\u8fd8\u5b58\u5728\u7740\u53ef\u4ee5\u88ab\u5408\u5e76\u7684\u5197\u4f59\u903b\u8f91\uff0c\u6216\u8005\u5b58\u5728\u7740\u53ef\u4ee5\u88ab\u5408\u5e76\u7684\u8bed\u53e5\uff0c\u4ea6\u6216\u662f\u6709\u4e9b\u53d8\u91cf\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u4ee5\u53ca\u5176\u4ed6\u5404\u79cd\u53ef\u4ee5\u88ab\u7b80\u5316\u7684\u5e38\u89c1\u3002\u5f88\u591a\u65b0\u624b\u7a0b\u5e8f\u5458\u90fd\u8feb\u5207\u7684\u60f3\u8981\u53bb\u4f18\u5316\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u800c\u5b9e\u9645\u4e0a\u7a0b\u5e8f\u7684\u53ef\u7ef4\u62a4\u6027\u624d\u662f\u5b83\u4eec\u6700\u5e94\u8be5\u4f18\u5148\u8003\u8651\u7684\u4e8b\u60c5\u3002 \u672c\u6559\u7a0b\u63d0\u4f9b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5f88\u5c11\u662f\u7b2c\u4e00\u6b21\u5c31\u5f97\u5230\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4eec\u90fd\u7ecf\u8fc7\u4e86\u4e0d\u65ad\u7684\u4fee\u6539\uff0c\u76f4\u5230\u6211\u4eec\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u518d\u4f18\u5316\u7684\u4e86\u3002\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u5f88\u591a\u65f6\u5019\u8bfb\u8005\u8fd8\u662f\u80fd\u591f\u5411\u6211\u4eec\u63d0\u51fa\u5f88\u591a\u4f18\u5316\u7684\u5efa\u8bae\uff01 \u8bf4\u8fd9\u4e48\u591a\uff0c\u6211\u60f3\u8868\u8fbe\u7684\u662f\uff1a\u5982\u679c\u4f60\u6ca1\u6709\u4e00\u6b21\u6027\u60f3\u5230\u4e00\u4e2a\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u4e0d\u8981\u4e3a\u6b64\u611f\u5230\u6cae\u4e27\uff0c\u8fd9\u5f88\u6b63\u5e38\u3002\u7cbe\u76ca\u6c42\u7cbe\u5728\u7f16\u7a0b\u4e2d\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\u3002 [!NOTE] \u4f5c\u8005\u6ce8 \u8fd8\u6709\u4e00\u4ef6\u4e8b\uff1a\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u201dC++\u4e2d\u6709\u8fd9\u4e48\u591a\u7684\u89c4\u5219\u548c\u6982\u5ff5\uff0c\u6211\u600e\u4e48\u624d\u80fd\u8bb0\u4f4f\u5b83\u4eec\u5462\uff1f\u201c \u7b80\u5355\u6765\u8bf4\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u8bb0\u4f4f\u5b83\u4eec\u3002\u4f7f\u7528 C++\uff0c\u4e00\u65b9\u9762\u5728\u4e8e\u4f7f\u7528\u4f60\u5df2\u7ecf\u638c\u63e1\u7684\u77e5\u8bc6\uff0c\u53e6\u4e00\u65b9\u9762\u5728\u4e8e\u638c\u63e1\u5982\u4f55\u67e5\u627e\u5e76\u4f7f\u7528\u4f60\u6ca1\u6709\u638c\u63e1\u7684\u77e5\u8bc6\u3002 \u5f53\u4f60\u7b2c\u4e00\u6b21\u9605\u8bfb\u672c\u6559\u7a0b\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u628a\u6ce8\u610f\u529b\u653e\u5728\u8bb0\u5fc6\u89c4\u5219\u4e0a\uff0c\u800c\u662f\u8981\u91cd\u70b9\u7406\u89e3\u4f7f\u7528C++\u4f60\u80fd\u505a\u54ea\u4e9b\u4e8b\u3002\u7136\u540e\uff0c\u5f53\u4f60\u771f\u6b63\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u518d\u56de\u6765\uff08\u6216\u8005\u5230\u5176\u4ed6\u7f51\u7ad9\uff09\u53bb\u5237\u65b0\u5de9\u56fa\u4f60\u7684\u77e5\u8bc6\u5e76\u638c\u63e1\u5e94\u8be5\u5982\u4f55\u53bb\u505a\u3002","title":"\u6700\u4f73\u65b9\u6848"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.x%20%E5%B0%8F%E7%BB%93%E4%B8%8E%E6%B5%8B%E8%AF%95/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 1.x \u2014 Chapter 1 summary and quiz - \u4f5c\u8005\uff1a ALEX - 2022-3-25 1.x \u5c0f\u7ed3\u4e0e\u6d4b\u8bd5 \u7ae0\u8282\u56de\u987e \u8bed\u53e5 \u662f\u6307\u4ee4\u7684\u4e00\u79cd\uff0c\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u67d0\u79cd\u64cd\u4f5c\u3002\u6307\u4ee4\u901a\u5e38\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u51fd\u6570 \u662f\u4e00\u7ec4\u5e8f\u5217\u6267\u884c\u7684\u8bed\u53e5\u3002\u6bcf\u4e2a C++\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5305\u542b\u4e00\u4e2a main \u51fd\u6570\u3002\u5f53\u4f60\u6267\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u4ece main \u51fd\u6570\u5f00\u59cb\u6267\u884c\u3002 \u8fd9\u4e9b\u63a7\u5236 C++ \u5143\u7d20\u7ec4\u7ec7\u5f62\u5f0f\u7684\u89c4\u5219\uff0c\u79f0\u4e3a \u8bed\u6cd5 \u3002\u5f53\u4f60\u8fdd\u53cd\u8bed\u8a00\u7684\u8bed\u6cd5\u89c4\u5219\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u8bed\u6cd5\u9519\u8bef\u3002 \u6ce8\u91ca \u5141\u8bb8\u4f60\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u7b14\u8bb0\u3002C++ \u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u6ce8\u91ca\u3002\u884c\u5185\u6ce8\u91ca\u4ee5 // \u5f00\u5934\u3002\u6bb5\u843d\u6ce8\u91ca\u5219\u4ee5 /* \u5f00\u5934\uff0c\u4ee5 */ \u7ed3\u675f\u3002\u8bf7\u4e0d\u8981\u5d4c\u5957\u6ce8\u91ca\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6ce8\u91ca\u6765\u4e34\u65f6\u5c4f\u853d\u4e00\u884c\u6216\u4e00\u6bb5\u4ee3\u7801\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u79f0\u4e3a\u6ce8\u91ca\u6389\uff08commenting out\uff09\u4ee3\u7801\u3002 \u6570\u636e \u662f\u4e00\u7cfb\u5217\u7b26\u53f7\u5e76\u53ef\u4ee5\u88ab\u89e3\u6790\u4e3a\u67d0\u79cd\u542b\u4e49\u3002\u4e00\u6bb5\u88ab\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\u79f0\u4e3a \u503c \u3002 [[ \u53d8\u91cf \u662f\u4e00\u6bb5\u547d\u540d\u7684\u5185\u5b58]]\uff0c\u73b0\u5728\u6211\u4eec\u4fbf\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b58\u653e\u503c\u4e86\u3002\u53d8\u91cf\u7684\u540d\u79f0\u4e3a[[\u6807\u8bc6\u7b26(identifier)]]\u3002\u521b\u5efa\u53d8\u91cf\u9700\u8981\u901a\u8fc7\u58f0\u660e\u8bed\u53e5\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u53d8\u91cf\u5c31\u4f1a\u88ab \u5b9e\u4f8b\u5316 \uff0c\u5373\u5b83\u4f1a\u88ab\u5173\u8054\u5230\u67d0\u4e2a\u5185\u5b58\u5730\u5740 \u3002 \u6570\u636e\u7c7b\u578b \u53ef\u4ee5\u544a\u8bc9\u7f16\u8bd1\u5668\u5982\u4f55\u5c06\u4e00\u6bb5\u6570\u636e\u89e3\u91ca\u4e3a\u5177\u6709\u542b\u4e49\u7684\u503c\u3002\u6574\u578b\u6307\u7684\u662f\u4e0d\u5305\u542b\u5c0f\u6570\u90e8\u5206\u7684\u503c\uff0c\u4f8b\u5982 4\u300127\u30010\u3001-2 \u6216-12\u3002 \u62f7\u8d1d\u8d4b\u503c (\u901a\u8fc7 operator= ) \u53ef\u4ee5\u88ab\u7528\u6765\u5411\u67d0\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u7684\u53d8\u91cf\u8d4b\u503c\u3002 \u521d\u59cb\u5316 \u7528\u4e8e\u5728\u53d8\u91cf\u88ab\u521b\u5efa\u7684\u540c\u65f6\u4e3a\u5176\u6307\u5b9a\u3002C++ \u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684\u521d\u59cb\u5316\uff1a\u62f7\u8d1d\u521d\u59cb\u5316\u3001\u76f4\u63a5\u521d\u59cb\u5316\u548c\u7edf\u4e00\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u5217\u8868\u521d\u59cb\u5316\u6216\u62ec\u53f7\u521d\u59cb\u5316\uff09\u3002 \u4f60\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u7edf\u4e00\u521d\u59cb\u5316\u800c\u4e0d\u662f\u5176\u4ed6\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u6b64\u5916\uff0c\u4f7f\u7528\u521d\u59cb\u5316\u4e5f\u4f18\u4e8e\u8d4b\u503c\u3002 \u5c3d\u7ba1\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u6bcf\u884c\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 std:: cout \u548c operator<< \u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4f5c\u4e3a\u6587\u672c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 std:: endl \u4f1a\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u63a7\u5236\u63a7\u5236\u53f0\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 std:: cin \u548c operator>> \u53ef\u4ee5\u4ece\u952e\u76d8\u83b7\u53d6\u8f93\u5165\u503c\u3002 \u6ca1\u6709\u88ab\u6307\u5b9a\u503c\u7684\u53d8\u91cf\uff0c\u79f0\u4e3a\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002\u5c1d\u8bd5\u83b7\u53d6\u672a\u521d\u59cb\u5316\u53d8\u91cf\u7684\u503c\uff0c\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u672a\u5b9a\u4e49\u884c\u4e3a\u6709\u591a\u79cd\u8868\u73b0\u5f62\u5f0f\u3002 C++ \u9884\u7559\u4e86\u4e00\u7ec4\u540d\u79f0\uff0c\u79f0\u4e3a \u5173\u952e\u5b57 \u3002\u8fd9\u4e9b\u5173\u952e\u5b57\u5728 C++\u4e2d\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u4e0d\u80fd\u88ab\u7528\u4f5c\u53d8\u91cf\u540d\u3002 [[\u5b57\u9762\u91cf(literals)]]\u6307\u7684\u662f\u76f4\u63a5\u63d2\u5165\u6e90\u7801\u4e2d\u7684\u56fa\u5b9a\u503c\u3002\u4f8b\u5982 5 \u548c \u201cHello world!\u201d\u3002 \u8fd0\u7b97\u6307\u7684\u662f\u4e00\u6b21\u6570\u5b66\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u52300\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u503c\uff0c\u79f0\u4e3a \u64cd\u4f5c\u6570 \u3002\u5177\u4f53\u7684\u8fd0\u7b97\u901a\u8fc7\u8fd0\u7b97\u7b26\u6765\u6307\u5b9a\u3002\u8fd0\u7b97\u7684\u7ed3\u679c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\u503c\u3002 \u4e00\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 \u4e8c\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u901a\u5e38\u79f0\u4e3a\u5de6\u64cd\u4f5c\u6570\u548c\u53f3\u64cd\u4f5c\u6570\u3002 \u4e09\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e09\u4e2a\u64cd\u4f5c\u6570\u3002 \u8868\u8fbe\u5f0f \u662f\u4e00\u7ec4\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ec4\u5408\uff0c\u5b83\u7ecf\u8fc7\u6c42\u503c\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u5355\u4e00\u503c\u3002\u8ba1\u7b97\u5f97\u5230\u8be5\u5355\u4e00\u503c\u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a[[\u6c42\u503c(evaluation)]]\uff0c\u800c\u8be5\u503c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7ed3\u679c \u3002 \u901a\u8fc7\u5728\u8868\u8fbe\u5f0f\u7ed3\u5c3e\u6dfb\u52a0\u5206\u53f7\uff0c\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a \u8868\u8fbe\u5f0f\u8bed\u53e5 \u3002 \u7f16\u7a0b\u4e0d\u662f\u4ef6\u5bb9\u6613\u4e8b\uff0c\u4f60\u7684\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u4e0d\u53ef\u80fd\u662f\u5b8c\u7f8e\u7684\u3002\u8ba9\u7a0b\u5e8f\u80fd\u591f\u8fd0\u884c\u8d77\u6765\uff0c\u662f\u7f16\u7a0b\u7684\u9996\u8981\u4efb\u52a1\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u4f7f\u5176\u53d8\u5f97\u66f4\u597d\u3002","title":"1.x \u5c0f\u7ed3\u4e0e\u6d4b\u8bd5"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.x%20%E5%B0%8F%E7%BB%93%E4%B8%8E%E6%B5%8B%E8%AF%95/#1x","text":"","title":"1.x \u5c0f\u7ed3\u4e0e\u6d4b\u8bd5"},{"location":"01_C%2B%2B%20%E5%9F%BA%E7%A1%80/1.x%20%E5%B0%8F%E7%BB%93%E4%B8%8E%E6%B5%8B%E8%AF%95/#_1","text":"\u8bed\u53e5 \u662f\u6307\u4ee4\u7684\u4e00\u79cd\uff0c\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u67d0\u79cd\u64cd\u4f5c\u3002\u6307\u4ee4\u901a\u5e38\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u51fd\u6570 \u662f\u4e00\u7ec4\u5e8f\u5217\u6267\u884c\u7684\u8bed\u53e5\u3002\u6bcf\u4e2a C++\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5305\u542b\u4e00\u4e2a main \u51fd\u6570\u3002\u5f53\u4f60\u6267\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u4ece main \u51fd\u6570\u5f00\u59cb\u6267\u884c\u3002 \u8fd9\u4e9b\u63a7\u5236 C++ \u5143\u7d20\u7ec4\u7ec7\u5f62\u5f0f\u7684\u89c4\u5219\uff0c\u79f0\u4e3a \u8bed\u6cd5 \u3002\u5f53\u4f60\u8fdd\u53cd\u8bed\u8a00\u7684\u8bed\u6cd5\u89c4\u5219\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u8bed\u6cd5\u9519\u8bef\u3002 \u6ce8\u91ca \u5141\u8bb8\u4f60\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u7b14\u8bb0\u3002C++ \u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u6ce8\u91ca\u3002\u884c\u5185\u6ce8\u91ca\u4ee5 // \u5f00\u5934\u3002\u6bb5\u843d\u6ce8\u91ca\u5219\u4ee5 /* \u5f00\u5934\uff0c\u4ee5 */ \u7ed3\u675f\u3002\u8bf7\u4e0d\u8981\u5d4c\u5957\u6ce8\u91ca\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6ce8\u91ca\u6765\u4e34\u65f6\u5c4f\u853d\u4e00\u884c\u6216\u4e00\u6bb5\u4ee3\u7801\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u79f0\u4e3a\u6ce8\u91ca\u6389\uff08commenting out\uff09\u4ee3\u7801\u3002 \u6570\u636e \u662f\u4e00\u7cfb\u5217\u7b26\u53f7\u5e76\u53ef\u4ee5\u88ab\u89e3\u6790\u4e3a\u67d0\u79cd\u542b\u4e49\u3002\u4e00\u6bb5\u88ab\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\u79f0\u4e3a \u503c \u3002 [[ \u53d8\u91cf \u662f\u4e00\u6bb5\u547d\u540d\u7684\u5185\u5b58]]\uff0c\u73b0\u5728\u6211\u4eec\u4fbf\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b58\u653e\u503c\u4e86\u3002\u53d8\u91cf\u7684\u540d\u79f0\u4e3a[[\u6807\u8bc6\u7b26(identifier)]]\u3002\u521b\u5efa\u53d8\u91cf\u9700\u8981\u901a\u8fc7\u58f0\u660e\u8bed\u53e5\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u53d8\u91cf\u5c31\u4f1a\u88ab \u5b9e\u4f8b\u5316 \uff0c\u5373\u5b83\u4f1a\u88ab\u5173\u8054\u5230\u67d0\u4e2a\u5185\u5b58\u5730\u5740 \u3002 \u6570\u636e\u7c7b\u578b \u53ef\u4ee5\u544a\u8bc9\u7f16\u8bd1\u5668\u5982\u4f55\u5c06\u4e00\u6bb5\u6570\u636e\u89e3\u91ca\u4e3a\u5177\u6709\u542b\u4e49\u7684\u503c\u3002\u6574\u578b\u6307\u7684\u662f\u4e0d\u5305\u542b\u5c0f\u6570\u90e8\u5206\u7684\u503c\uff0c\u4f8b\u5982 4\u300127\u30010\u3001-2 \u6216-12\u3002 \u62f7\u8d1d\u8d4b\u503c (\u901a\u8fc7 operator= ) \u53ef\u4ee5\u88ab\u7528\u6765\u5411\u67d0\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u7684\u53d8\u91cf\u8d4b\u503c\u3002 \u521d\u59cb\u5316 \u7528\u4e8e\u5728\u53d8\u91cf\u88ab\u521b\u5efa\u7684\u540c\u65f6\u4e3a\u5176\u6307\u5b9a\u3002C++ \u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684\u521d\u59cb\u5316\uff1a\u62f7\u8d1d\u521d\u59cb\u5316\u3001\u76f4\u63a5\u521d\u59cb\u5316\u548c\u7edf\u4e00\u521d\u59cb\u5316\uff08\u4e5f\u79f0\u4e3a\u5217\u8868\u521d\u59cb\u5316\u6216\u62ec\u53f7\u521d\u59cb\u5316\uff09\u3002 \u4f60\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u7edf\u4e00\u521d\u59cb\u5316\u800c\u4e0d\u662f\u5176\u4ed6\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u6b64\u5916\uff0c\u4f7f\u7528\u521d\u59cb\u5316\u4e5f\u4f18\u4e8e\u8d4b\u503c\u3002 \u5c3d\u7ba1\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u6bcf\u884c\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 std:: cout \u548c operator<< \u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4f5c\u4e3a\u6587\u672c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 std:: endl \u4f1a\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u63a7\u5236\u63a7\u5236\u53f0\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u3002 std:: cin \u548c operator>> \u53ef\u4ee5\u4ece\u952e\u76d8\u83b7\u53d6\u8f93\u5165\u503c\u3002 \u6ca1\u6709\u88ab\u6307\u5b9a\u503c\u7684\u53d8\u91cf\uff0c\u79f0\u4e3a\u672a\u521d\u59cb\u5316\u53d8\u91cf\u3002\u5c1d\u8bd5\u83b7\u53d6\u672a\u521d\u59cb\u5316\u53d8\u91cf\u7684\u503c\uff0c\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u672a\u5b9a\u4e49\u884c\u4e3a\u6709\u591a\u79cd\u8868\u73b0\u5f62\u5f0f\u3002 C++ \u9884\u7559\u4e86\u4e00\u7ec4\u540d\u79f0\uff0c\u79f0\u4e3a \u5173\u952e\u5b57 \u3002\u8fd9\u4e9b\u5173\u952e\u5b57\u5728 C++\u4e2d\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u4e0d\u80fd\u88ab\u7528\u4f5c\u53d8\u91cf\u540d\u3002 [[\u5b57\u9762\u91cf(literals)]]\u6307\u7684\u662f\u76f4\u63a5\u63d2\u5165\u6e90\u7801\u4e2d\u7684\u56fa\u5b9a\u503c\u3002\u4f8b\u5982 5 \u548c \u201cHello world!\u201d\u3002 \u8fd0\u7b97\u6307\u7684\u662f\u4e00\u6b21\u6570\u5b66\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u52300\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u503c\uff0c\u79f0\u4e3a \u64cd\u4f5c\u6570 \u3002\u5177\u4f53\u7684\u8fd0\u7b97\u901a\u8fc7\u8fd0\u7b97\u7b26\u6765\u6307\u5b9a\u3002\u8fd0\u7b97\u7684\u7ed3\u679c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\u503c\u3002 \u4e00\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 \u4e8c\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u901a\u5e38\u79f0\u4e3a\u5de6\u64cd\u4f5c\u6570\u548c\u53f3\u64cd\u4f5c\u6570\u3002 \u4e09\u5143 \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e09\u4e2a\u64cd\u4f5c\u6570\u3002 \u8868\u8fbe\u5f0f \u662f\u4e00\u7ec4\u5b57\u9762\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u8c03\u7528\u7684\u7ec4\u5408\uff0c\u5b83\u7ecf\u8fc7\u6c42\u503c\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u5355\u4e00\u503c\u3002\u8ba1\u7b97\u5f97\u5230\u8be5\u5355\u4e00\u503c\u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a[[\u6c42\u503c(evaluation)]]\uff0c\u800c\u8be5\u503c\u79f0\u4e3a\u8868\u8fbe\u5f0f\u7684 \u7ed3\u679c \u3002 \u901a\u8fc7\u5728\u8868\u8fbe\u5f0f\u7ed3\u5c3e\u6dfb\u52a0\u5206\u53f7\uff0c\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a \u8868\u8fbe\u5f0f\u8bed\u53e5 \u3002 \u7f16\u7a0b\u4e0d\u662f\u4ef6\u5bb9\u6613\u4e8b\uff0c\u4f60\u7684\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u4e0d\u53ef\u80fd\u662f\u5b8c\u7f8e\u7684\u3002\u8ba9\u7a0b\u5e8f\u80fd\u591f\u8fd0\u884c\u8d77\u6765\uff0c\u662f\u7f16\u7a0b\u7684\u9996\u8981\u4efb\u52a1\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u4f7f\u5176\u53d8\u5f97\u66f4\u597d\u3002","title":"\u7ae0\u8282\u56de\u987e"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.1 \u2014 Introduction to functions - \u4f5c\u8005\uff1a ALEX - 2021-12-23 2.1 \u51fd\u6570\u7b80\u4ecb \u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u51fd\u6570\u5b9a\u4e49\u4e3a\u4e00\u7ec4\u987a\u5e8f\u6267\u884c\u6307\u4ee4\u7684\u5408\u96c6\u3002\u8fd9\u4e2a\u5b9a\u4e49\u56fa\u7136\u6ca1\u9519\uff0c\u4f46\u662f\u5b83\u5e76\u6ca1\u6709\u8868\u8fbe\u51fa\u51fd\u6570\u7684\u91cd\u8981\u6027\u3002 \u8fd9\u91cc\u8ba9\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u51fd\u6570\uff1a\u51fd\u6570\u662f\u4e00\u7ec4\u4e3a\u4e86\u5b8c\u6210\u67d0\u9879\u4efb\u52a1\u800c\u521b\u5efa\u7684\u53ef\u590d\u7528\u7684\u987a\u5e8f\u6307\u4ee4\u96c6\u5408\u3002 \u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u4efb\u4f55\u90fd\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u51fd\u6570\uff08\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9\uff09\u3002\u7136\u800c\uff0c\u5982\u679c\u5c06\u7a0b\u5e8f\u7684\u6240\u6709\u4ee3\u7801\u90fd\u585e\u8fdb main \u51fd\u6570\u4e2d\uff0c\u90a3\u4e48\u5b83\u65e0\u7591\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u957f\uff0c\u4e5f\u8d8a\u6765\u8d8a\u96be\u4ee5\u7ef4\u62a4\u3002\u800c\u51fd\u6570\u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u7a0b\u5e8f\u5206\u5272\u6210\u7b80\u77ed\u7684\u3001\u6a21\u5757\u5316\u7684\u4ee3\u7801\u6bb5\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u4ee3\u7801\u66f4\u52a0\u5bb9\u6613\u7ba1\u7406\u3001\u5bb9\u6613\u6d4b\u8bd5\uff0c\u4e5f\u66f4\u5bb9\u6613\u4f7f\u7528\u3002C++ \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e86\u975e\u5e38\u591a\u7684\u5df2\u7ecf\u7f16\u5199\u597d\u7684\u51fd\u6570\u53ef\u4f9b\u4f60\u4f7f\u7528\u3002\u4e0d\u8fc7\uff0c\u4f7f\u7528\u81ea\u5df1\u7f16\u5199\u7684\u51fd\u6570\u4e5f\u662f\u975e\u5e38\u5e38\u89c1\u7684\u60c5\u5f62\uff0c\u8fd9\u4e9b\u51fd\u6570\u79f0\u4e3a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u751f\u6d3b\u4e2d\u7684\u573a\u666f\uff1a\u5f53\u4f60\u5728\u9605\u8bfb\u7684\u65f6\u5019\uff0c\u7a81\u7136\u60f3\u5230\u8981\u53bb\u6253\u4e00\u4e2a\u7535\u8bdd\u3002\u6b64\u65f6\u4f60\u4f1a\u5c06\u4e66\u7b7e\u5939\u5728\u4e66\u91cc\uff0c\u7136\u540e\u53bb\u6253\u7535\u8bdd\uff0c\u7136\u540e\u5728\u56de\u5230\u5939\u4e86\u4e66\u7b7e\u7684\u5730\u65b9\u7ee7\u7eed\u9605\u8bfb\u3002 C++ \u51fd\u6570\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53bb\u5de5\u4f5c\u3002\u5f53\u9047\u5230\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u51fd\u6570\u5e76\u987a\u5e8f\u5730\u6267\u884c\u5176\u4e2d\u5404\u4e2a\u8bed\u53e5\u3002\u800c\u6240\u8c13\u51fd\u6570\u8c03\u7528\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u544a\u8bc9 CPU \u4e2d\u65ad\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u800c\u8f6c\u53bb\u6267\u884c\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u3002\u6b64\u65f6 CPU \u5c31\u4f1a\u5728\u5f53\u524d\u7684\u6267\u884c\u70b9\u201d\u63d2\u5165\u4e00\u4e2a\u4e66\u7b7e\u201c\uff0c\u7136\u540e\u53bb\u6267\u884c\u53e6\u5916\u7684\u51fd\u6570\u3002\u5f53\u8be5\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0cCPU \u5c31\u4f1a\u8fd4\u56de\u4e4b\u524d\u4e2d\u65ad\u7684\u70b9\u7ee7\u7eed\u6267\u884c\u3002 \u5b9e\u65bd\u51fd\u6570\u8c03\u7528\u7684\u51fd\u6570\uff0c\u79f0\u4e3a \u4e3b\u8c03\u51fd\u6570(caller) \uff0c\u800c\u88ab\u5b83\u8c03\u7528\u7684\u51fd\u6570\u79f0\u4e3a \u88ab\u8c03\u51fd\u6570(callee \u6216 called function) \u3002 \u81ea\u5b9a\u5b9a\u4e49\u51fd\u6570\u6848\u4f8b \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u5b9a\u4e49\u51fd\u6570\u7684\u57fa\u672c\u8bed\u6cd5\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u8282\u8bfe\u4e2d\uff0c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u90fd\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a 1 2 3 4 return-type identifier() // identifier replaced with the name of your function { // Your code here } \u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u5176\u4e2d\u56db\u4e2a\u4e3b\u8981\u5143\u7d20\uff1a \u5728\u672c\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 int \uff08\u5bf9\u4e8e main() \u51fd\u6570\uff09\u6216 void \uff08\u5bf9\u4e8e\u5176\u4ed6\u51fd\u6570\uff09\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff08 return-type \uff09\u3002\u6211\u4eec\u4f1a\u5728\u4e0b\u4e00\u8282\u8bfe\uff08[[2.2 \u51fd\u6570\u8fd4\u56de\u503c (\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570)]]\uff09\u4e2d\u4ecb\u7ecd\u66f4\u591a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1b \u548c\u53d8\u91cf\u4e00\u6837\uff0c\u51fd\u6570\u4e5f\u6709\u51fd\u6570\u540d\u3002 identifier \u5c31\u662f\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u51fd\u6570\u540d\uff1b \u6807\u8bc6\u7b26\u540e\u9762\u7684\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u91cc\u662f\u5728\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff1b \u82b1\u62ec\u53f7\u4ee5\u53ca\u82b1\u62ec\u53f7\u5185\u90e8\u7684\u8bed\u53e5\u79f0\u4e3a \u51fd\u6570\u4f53 \u3002\u8fd9\u91cc\u5c31\u662f\u653e\u7f6e\u51fd\u6570\u8bed\u53e5\u7684\u7684\u5730\u65b9\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> // for std::cout // \u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a doPrint() \u7684\u51fd\u6570 void doPrint () // doPrint() \u5728\u672c\u4f8b\u4e2d\u662f\u88ab\u8c03\u51fd\u6570 { std :: cout << \"In doPrint() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doPrint (); // \u4e2d\u65ad main() \u51fd\u6570\u5e76\u8c03\u7528 doPrint()\u3002main() \u51fd\u6570\u662f\u4e3b\u8c03\u51fd\u6570 std :: cout << \"Ending main() \\n \" ; // \u5728 doPrint() \u7ed3\u675f\u540e\u6267\u884c\u8be5\u6307\u4ee4 return 0 ; } \u4e0a\u8ff0\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 Starting main() In doPrint() Ending main() \u8be5\u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u7b2c\u4e00\u884c\u4f1a\u6253\u5370 Starting main() . main \u51fd\u6570\u7684\u7b2c\u4e8c\u884c\u4f1a\u8c03\u7528 doPrint \u3002\u901a\u8fc7\u5728\u51fd\u6570\u540d\u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u5c31\u53ef\u4ee5\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u4f8b\u5982 doPrint() \u3002\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5fd8\u8bb0\u4e86\u62ec\u53f7\uff0c\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u7f16\u8bd1\uff08\u5982\u679c\u7a0b\u5e8f\u80fd\u591f\u7f16\u8bd1\uff0c\u51fd\u6570\u4e5f\u4e0d\u4f1a\u88ab\u8c03\u7528\uff09\u3002 [!Warning] \u6ce8\u610f \u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u5fd8\u8bb0\u52a0\u4e0a\u62ec\u53f7\u3002 \u56e0\u4e3a\u6267\u884c\u4e86\u51fd\u6570\u8c03\u7528\uff0c main \u51fd\u6570\u4e2d\u8bed\u53e5\u7684\u6267\u884c\u88ab\u6682\u505c\u4e86\uff0c\u6b64\u65f6\u4f1a\u8df3\u8f6c\u5230\u88ab\u8c03\u51fd\u6570 doPrint \u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\u3002 doPrint \u51fd\u6570\u7684\u7b2c\u4e00\u884c\uff08\u4e5f\u662f\u552f\u4e00\u4e00\u884c\uff09\u4f1a\u6253\u5370 In doPrint() \u3002\u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570( main \u51fd\u6570)\uff0c\u4ece\u4e4b\u524d\u79bb\u5f00\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u8bed\u53e5\u662f\u6253\u5370 Ending main() \u3002 \u591a\u6b21\u8c03\u7528\u51fd\u6570 \u51fd\u6570\u6700\u6709\u7528\u7684\u529f\u80fd\u83ab\u8fc7\u4e8e\u5b83\u53ef\u4ee5\u88ab\u591a\u6b21\u8c03\u7528\u3002\u4e0b\u9762\u4f8b\u5b50\u5c55\u793a\u4e86\u591a\u6b21\u8c03\u7528\u51fd\u6570\u7684\u573a\u666f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> // for std::cout void doPrint () { std :: cout << \"In doPrint() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doPrint (); // doPrint() called for the first time doPrint (); // doPrint() called for the second time std :: cout << \"Ending main() \\n \" ; return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 Starting main() In doPrint() In doPrint() Ending main() \u56e0\u4e3a doPrint \u5728 main \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u5b83\u4e5f\u4f1a\u6267\u884c\u4e24\u6b21\uff0c\u56e0\u6b64 In doPrint() \u4f1a\u6253\u5370\u4e24\u6b21\uff08\u6bcf\u6b21\u8c03\u7528\u6253\u5370\u4e00\u6b21\uff09\u3002 \u51fd\u6570\u94fe\u5f0f\u8c03\u7528 \u4f60\u5df2\u7ecf\u770b\u5230\u4e86\uff0c main \u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff08\u4f8b\u5982 doPrint \uff09\u3002\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u51fd\u6570\u3002\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c main \u51fd\u6570\u4f1a\u8c03\u7528\u51fd\u6570 doA \uff0c doA \u51fd\u6570\u53c8\u4f1a\u8c03\u7528 doB \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> // for std::cout void doB () { std :: cout << \"In doB() \\n \" ; } void doA () { std :: cout << \"Starting doA() \\n \" ; doB (); std :: cout << \"Ending doA() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doA (); std :: cout << \"Ending main() \\n \" ; return 0 ; } \u4e0a\u8ff0\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 Starting main() Starting doA() In doB() Ending doA() Ending main() C++\u4e0d\u652f\u6301\u51fd\u6570\u5d4c\u5957 \u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0cC++\u5e76\u4e0d\u652f\u6301\u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u5176\u4ed6\u51fd\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e0d\u5408\u6cd5\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { void foo () // \u9519\u8bef\uff1a\u8be5\u51fd\u6570\u5b9a\u4e49\u4f4d\u4e8e\u5176\u4ed6\u51fd\u6570\u5185\u90e8\u3002 { std :: cout << \"foo! \\n \" ; } foo (); // function call to foo() return 0 ; } \u6b63\u786e\u7684\u65b9\u5f0f\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> void foo () // no longer inside of main() { std :: cout << \"foo! \\n \" ; } int main () { foo (); return 0 ; } [!INFO] \u9898\u5916\u8bdd \u201cfoo\u201d \u662f\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u5355\u8bcd\uff0c\u5728\u5c55\u793a\u67d0\u4e9b\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u5982\u679c\u540d\u79f0\u4e0d\u91cd\u8981\uff0c\u90a3\u4e48\u5e38\u4f1a\u4f7f\u7528\u5b83\u6765\u4f5c\u4e3a\u5360\u4f4d\u7b26\u3002\u6b64\u7c7b\u5355\u8bcd\u6709\u4e2a\u4e13\u95e8\u7684\u540d\u5b57\u53eb\u505a\uff1a\u4f2a\u53d8\u91cf/ metasyntactic variables (\u4e0d\u8fc7\uff0c\u5728\u65e5\u5e38\u7528\u8bed\u4e2d\u5927\u5bb6\u8fd8\u662f\u559c\u6b22\u79f0\u5176\u4e3a\u201d\u540d\u79f0\u5360\u4f4d\u7b26\u201c\uff0c\u56e0\u4e3a metasyntactic variables\u8fd9\u4e2a\u5355\u8bcd\u771f\u7684\u5f88\u751f\u50fb)\u3002 \u5176\u4ed6C++\u4e2d\u5e38\u89c1\u7684\u4f2a\u53d8\u91cf\u8fd8\u5305\u62ec \u201cbar\u201d\u3001\u201cbaz\u201d\u4ee5\u53ca\u5176\u4ed6\u4ee5\u201coo\u201d\u7ed3\u5c3e\u7684\u4e09\u5b57\u6bcd\u5355\u8bcd\uff0c\u4f8b\u5982\u201cgoo\u201d\u3001\u201cmoo\u201d\u548c\u201cboo\u201d\u3002 \u5982\u679c\u4f60\u5bf9\u5176\u8bcd\u6e90\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u53bb\u9605\u8bfb RFC 3092 \u3002","title":"2.01 \u51fd\u6570\u7b80\u4ecb"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/#21","text":"\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u51fd\u6570\u5b9a\u4e49\u4e3a\u4e00\u7ec4\u987a\u5e8f\u6267\u884c\u6307\u4ee4\u7684\u5408\u96c6\u3002\u8fd9\u4e2a\u5b9a\u4e49\u56fa\u7136\u6ca1\u9519\uff0c\u4f46\u662f\u5b83\u5e76\u6ca1\u6709\u8868\u8fbe\u51fa\u51fd\u6570\u7684\u91cd\u8981\u6027\u3002 \u8fd9\u91cc\u8ba9\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u51fd\u6570\uff1a\u51fd\u6570\u662f\u4e00\u7ec4\u4e3a\u4e86\u5b8c\u6210\u67d0\u9879\u4efb\u52a1\u800c\u521b\u5efa\u7684\u53ef\u590d\u7528\u7684\u987a\u5e8f\u6307\u4ee4\u96c6\u5408\u3002 \u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u4efb\u4f55\u90fd\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u51fd\u6570\uff08\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9\uff09\u3002\u7136\u800c\uff0c\u5982\u679c\u5c06\u7a0b\u5e8f\u7684\u6240\u6709\u4ee3\u7801\u90fd\u585e\u8fdb main \u51fd\u6570\u4e2d\uff0c\u90a3\u4e48\u5b83\u65e0\u7591\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u957f\uff0c\u4e5f\u8d8a\u6765\u8d8a\u96be\u4ee5\u7ef4\u62a4\u3002\u800c\u51fd\u6570\u5219\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u7a0b\u5e8f\u5206\u5272\u6210\u7b80\u77ed\u7684\u3001\u6a21\u5757\u5316\u7684\u4ee3\u7801\u6bb5\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u4ee3\u7801\u66f4\u52a0\u5bb9\u6613\u7ba1\u7406\u3001\u5bb9\u6613\u6d4b\u8bd5\uff0c\u4e5f\u66f4\u5bb9\u6613\u4f7f\u7528\u3002C++ \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e86\u975e\u5e38\u591a\u7684\u5df2\u7ecf\u7f16\u5199\u597d\u7684\u51fd\u6570\u53ef\u4f9b\u4f60\u4f7f\u7528\u3002\u4e0d\u8fc7\uff0c\u4f7f\u7528\u81ea\u5df1\u7f16\u5199\u7684\u51fd\u6570\u4e5f\u662f\u975e\u5e38\u5e38\u89c1\u7684\u60c5\u5f62\uff0c\u8fd9\u4e9b\u51fd\u6570\u79f0\u4e3a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u751f\u6d3b\u4e2d\u7684\u573a\u666f\uff1a\u5f53\u4f60\u5728\u9605\u8bfb\u7684\u65f6\u5019\uff0c\u7a81\u7136\u60f3\u5230\u8981\u53bb\u6253\u4e00\u4e2a\u7535\u8bdd\u3002\u6b64\u65f6\u4f60\u4f1a\u5c06\u4e66\u7b7e\u5939\u5728\u4e66\u91cc\uff0c\u7136\u540e\u53bb\u6253\u7535\u8bdd\uff0c\u7136\u540e\u5728\u56de\u5230\u5939\u4e86\u4e66\u7b7e\u7684\u5730\u65b9\u7ee7\u7eed\u9605\u8bfb\u3002 C++ \u51fd\u6570\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53bb\u5de5\u4f5c\u3002\u5f53\u9047\u5230\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u51fd\u6570\u5e76\u987a\u5e8f\u5730\u6267\u884c\u5176\u4e2d\u5404\u4e2a\u8bed\u53e5\u3002\u800c\u6240\u8c13\u51fd\u6570\u8c03\u7528\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u544a\u8bc9 CPU \u4e2d\u65ad\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u800c\u8f6c\u53bb\u6267\u884c\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u3002\u6b64\u65f6 CPU \u5c31\u4f1a\u5728\u5f53\u524d\u7684\u6267\u884c\u70b9\u201d\u63d2\u5165\u4e00\u4e2a\u4e66\u7b7e\u201c\uff0c\u7136\u540e\u53bb\u6267\u884c\u53e6\u5916\u7684\u51fd\u6570\u3002\u5f53\u8be5\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0cCPU \u5c31\u4f1a\u8fd4\u56de\u4e4b\u524d\u4e2d\u65ad\u7684\u70b9\u7ee7\u7eed\u6267\u884c\u3002 \u5b9e\u65bd\u51fd\u6570\u8c03\u7528\u7684\u51fd\u6570\uff0c\u79f0\u4e3a \u4e3b\u8c03\u51fd\u6570(caller) \uff0c\u800c\u88ab\u5b83\u8c03\u7528\u7684\u51fd\u6570\u79f0\u4e3a \u88ab\u8c03\u51fd\u6570(callee \u6216 called function) \u3002","title":"2.1 \u51fd\u6570\u7b80\u4ecb"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/#_1","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u5b9a\u4e49\u51fd\u6570\u7684\u57fa\u672c\u8bed\u6cd5\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u8282\u8bfe\u4e2d\uff0c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u90fd\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a 1 2 3 4 return-type identifier() // identifier replaced with the name of your function { // Your code here } \u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u5176\u4e2d\u56db\u4e2a\u4e3b\u8981\u5143\u7d20\uff1a \u5728\u672c\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 int \uff08\u5bf9\u4e8e main() \u51fd\u6570\uff09\u6216 void \uff08\u5bf9\u4e8e\u5176\u4ed6\u51fd\u6570\uff09\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff08 return-type \uff09\u3002\u6211\u4eec\u4f1a\u5728\u4e0b\u4e00\u8282\u8bfe\uff08[[2.2 \u51fd\u6570\u8fd4\u56de\u503c (\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570)]]\uff09\u4e2d\u4ecb\u7ecd\u66f4\u591a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1b \u548c\u53d8\u91cf\u4e00\u6837\uff0c\u51fd\u6570\u4e5f\u6709\u51fd\u6570\u540d\u3002 identifier \u5c31\u662f\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u7684\u51fd\u6570\u540d\uff1b \u6807\u8bc6\u7b26\u540e\u9762\u7684\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u91cc\u662f\u5728\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff1b \u82b1\u62ec\u53f7\u4ee5\u53ca\u82b1\u62ec\u53f7\u5185\u90e8\u7684\u8bed\u53e5\u79f0\u4e3a \u51fd\u6570\u4f53 \u3002\u8fd9\u91cc\u5c31\u662f\u653e\u7f6e\u51fd\u6570\u8bed\u53e5\u7684\u7684\u5730\u65b9\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> // for std::cout // \u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a doPrint() \u7684\u51fd\u6570 void doPrint () // doPrint() \u5728\u672c\u4f8b\u4e2d\u662f\u88ab\u8c03\u51fd\u6570 { std :: cout << \"In doPrint() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doPrint (); // \u4e2d\u65ad main() \u51fd\u6570\u5e76\u8c03\u7528 doPrint()\u3002main() \u51fd\u6570\u662f\u4e3b\u8c03\u51fd\u6570 std :: cout << \"Ending main() \\n \" ; // \u5728 doPrint() \u7ed3\u675f\u540e\u6267\u884c\u8be5\u6307\u4ee4 return 0 ; } \u4e0a\u8ff0\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 Starting main() In doPrint() Ending main() \u8be5\u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u7b2c\u4e00\u884c\u4f1a\u6253\u5370 Starting main() . main \u51fd\u6570\u7684\u7b2c\u4e8c\u884c\u4f1a\u8c03\u7528 doPrint \u3002\u901a\u8fc7\u5728\u51fd\u6570\u540d\u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u5c31\u53ef\u4ee5\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u4f8b\u5982 doPrint() \u3002\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5fd8\u8bb0\u4e86\u62ec\u53f7\uff0c\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u7f16\u8bd1\uff08\u5982\u679c\u7a0b\u5e8f\u80fd\u591f\u7f16\u8bd1\uff0c\u51fd\u6570\u4e5f\u4e0d\u4f1a\u88ab\u8c03\u7528\uff09\u3002 [!Warning] \u6ce8\u610f \u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u5fd8\u8bb0\u52a0\u4e0a\u62ec\u53f7\u3002 \u56e0\u4e3a\u6267\u884c\u4e86\u51fd\u6570\u8c03\u7528\uff0c main \u51fd\u6570\u4e2d\u8bed\u53e5\u7684\u6267\u884c\u88ab\u6682\u505c\u4e86\uff0c\u6b64\u65f6\u4f1a\u8df3\u8f6c\u5230\u88ab\u8c03\u51fd\u6570 doPrint \u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\u3002 doPrint \u51fd\u6570\u7684\u7b2c\u4e00\u884c\uff08\u4e5f\u662f\u552f\u4e00\u4e00\u884c\uff09\u4f1a\u6253\u5370 In doPrint() \u3002\u5f53\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570( main \u51fd\u6570)\uff0c\u4ece\u4e4b\u524d\u79bb\u5f00\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u8bed\u53e5\u662f\u6253\u5370 Ending main() \u3002","title":"\u81ea\u5b9a\u5b9a\u4e49\u51fd\u6570\u6848\u4f8b"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/#_2","text":"\u51fd\u6570\u6700\u6709\u7528\u7684\u529f\u80fd\u83ab\u8fc7\u4e8e\u5b83\u53ef\u4ee5\u88ab\u591a\u6b21\u8c03\u7528\u3002\u4e0b\u9762\u4f8b\u5b50\u5c55\u793a\u4e86\u591a\u6b21\u8c03\u7528\u51fd\u6570\u7684\u573a\u666f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> // for std::cout void doPrint () { std :: cout << \"In doPrint() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doPrint (); // doPrint() called for the first time doPrint (); // doPrint() called for the second time std :: cout << \"Ending main() \\n \" ; return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 Starting main() In doPrint() In doPrint() Ending main() \u56e0\u4e3a doPrint \u5728 main \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u5b83\u4e5f\u4f1a\u6267\u884c\u4e24\u6b21\uff0c\u56e0\u6b64 In doPrint() \u4f1a\u6253\u5370\u4e24\u6b21\uff08\u6bcf\u6b21\u8c03\u7528\u6253\u5370\u4e00\u6b21\uff09\u3002","title":"\u591a\u6b21\u8c03\u7528\u51fd\u6570"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/#_3","text":"\u4f60\u5df2\u7ecf\u770b\u5230\u4e86\uff0c main \u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff08\u4f8b\u5982 doPrint \uff09\u3002\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u51fd\u6570\u3002\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c main \u51fd\u6570\u4f1a\u8c03\u7528\u51fd\u6570 doA \uff0c doA \u51fd\u6570\u53c8\u4f1a\u8c03\u7528 doB \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> // for std::cout void doB () { std :: cout << \"In doB() \\n \" ; } void doA () { std :: cout << \"Starting doA() \\n \" ; doB (); std :: cout << \"Ending doA() \\n \" ; } // Definition of function main() int main () { std :: cout << \"Starting main() \\n \" ; doA (); std :: cout << \"Ending main() \\n \" ; return 0 ; } \u4e0a\u8ff0\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 Starting main() Starting doA() In doB() Ending doA() Ending main()","title":"\u51fd\u6570\u94fe\u5f0f\u8c03\u7528"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.01%20%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/#c","text":"\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0cC++\u5e76\u4e0d\u652f\u6301\u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u5176\u4ed6\u51fd\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e0d\u5408\u6cd5\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { void foo () // \u9519\u8bef\uff1a\u8be5\u51fd\u6570\u5b9a\u4e49\u4f4d\u4e8e\u5176\u4ed6\u51fd\u6570\u5185\u90e8\u3002 { std :: cout << \"foo! \\n \" ; } foo (); // function call to foo() return 0 ; } \u6b63\u786e\u7684\u65b9\u5f0f\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> void foo () // no longer inside of main() { std :: cout << \"foo! \\n \" ; } int main () { foo (); return 0 ; } [!INFO] \u9898\u5916\u8bdd \u201cfoo\u201d \u662f\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u5355\u8bcd\uff0c\u5728\u5c55\u793a\u67d0\u4e9b\u6982\u5ff5\u7684\u65f6\u5019\uff0c\u5982\u679c\u540d\u79f0\u4e0d\u91cd\u8981\uff0c\u90a3\u4e48\u5e38\u4f1a\u4f7f\u7528\u5b83\u6765\u4f5c\u4e3a\u5360\u4f4d\u7b26\u3002\u6b64\u7c7b\u5355\u8bcd\u6709\u4e2a\u4e13\u95e8\u7684\u540d\u5b57\u53eb\u505a\uff1a\u4f2a\u53d8\u91cf/ metasyntactic variables (\u4e0d\u8fc7\uff0c\u5728\u65e5\u5e38\u7528\u8bed\u4e2d\u5927\u5bb6\u8fd8\u662f\u559c\u6b22\u79f0\u5176\u4e3a\u201d\u540d\u79f0\u5360\u4f4d\u7b26\u201c\uff0c\u56e0\u4e3a metasyntactic variables\u8fd9\u4e2a\u5355\u8bcd\u771f\u7684\u5f88\u751f\u50fb)\u3002 \u5176\u4ed6C++\u4e2d\u5e38\u89c1\u7684\u4f2a\u53d8\u91cf\u8fd8\u5305\u62ec \u201cbar\u201d\u3001\u201cbaz\u201d\u4ee5\u53ca\u5176\u4ed6\u4ee5\u201coo\u201d\u7ed3\u5c3e\u7684\u4e09\u5b57\u6bcd\u5355\u8bcd\uff0c\u4f8b\u5982\u201cgoo\u201d\u3001\u201cmoo\u201d\u548c\u201cboo\u201d\u3002 \u5982\u679c\u4f60\u5bf9\u5176\u8bcd\u6e90\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u53bb\u9605\u8bfb RFC 3092 \u3002","title":"C++\u4e0d\u652f\u6301\u51fd\u6570\u5d4c\u5957"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.2 \u2014 Function return values (value-returning functions) - \u4f5c\u8005\uff1a ALEX - 2022-4-22 2.2 \u51fd\u6570\u8fd4\u56de\u503c (\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570) \u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> int main () { // get a value from the user std :: cout << \"Enter an integer: \" ; int num {}; std :: cin >> num ; // print the value doubled std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u8fd9\u4e2a\u7a0b\u5e8f\u4ece\u6982\u5ff5\u4e0a\u5c06\u5305\u542b\u4e24\u90e8\u5206\uff1a\u9996\u5148\u6211\u4eec\u4ece\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u8f93\u5165\uff0c\u7136\u540e\u544a\u8bc9\u7528\u6237\u8be5\u8f93\u5165\u7684\u4e24\u500d\u662f\u591a\u5c11\u3002 \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u5df2\u7ecf\u8db3\u591f\u7b80\u5355\uff0c\u6ca1\u5fc5\u8981\u5c06\u5176\u5212\u5206\u4e3a\u591a\u4e2a\u51fd\u6570\uff0c\u4f46\u5982\u679c\u6211\u4eec\u6267\u610f\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\u662f\u4e00\u4e2a\u975e\u5e38\u660e\u786e\u7684\u4efb\u52a1\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u5e94\u8be5\u662f\u5f88\u5408\u9002\u7684\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u88ab\u4fee\u6539\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // This program doesn't work #include <iostream> void getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; } int main () { getValueFromUser (); // Ask user for input int num {}; // How do we get the value from getValueFromUser() and use it to initialize this variable? std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5c3d\u7ba1\u770b\u4e0a\u53bb\u4e0a\u9762\u7684\u5c1d\u8bd5\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u5374\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u5f53\u51fd\u6570 getValueFromUser \u88ab\u8c03\u7528\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u578b\u6570\uff0c\u8fd9\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\u4f46\u662f\u5f53\u51fd\u6570 getValueFromUser \u8c03\u7528\u7ed3\u675f\u5e76\u8fd4\u56de main \u51fd\u6570\u65f6\uff0c\u521a\u624d\u8f93\u5165\u7684\u503c\u5c31\u88ab\u4e22\u5f03\u4e86\u3002\u53d8\u91cf num \u59cb\u7ec8\u90fd\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u4e3a\u7528\u6237\u8f93\u5165\u7684\u503c\uff0c\u56e0\u6b64\u8f93\u51fa\u7ed3\u679c\u59cb\u7ec8\u662f 0 \u3002 \u95ee\u9898\u51fa\u5728 getValueFromUser \u51fd\u6570\u8fd4\u56de\u5230 main \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u5c06\u7528\u6237\u8f93\u5165\u7684\u503c\u4e00\u8d77\u8fd4\u56de\uff0c\u56e0\u6b64 main \u51fd\u6570\u5c31\u65e0\u6cd5\u4f7f\u7528\u8be5\u503c\u3002 \u8fd4\u56de\u503c \u5728\u7f16\u5199\u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u8be5\u51fd\u6570\u662f\u5426\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u5982\u679c\u9700\u8981\uff0c\u6709\u4e24\u4ef6\u4e8b\u9700\u8981\u53bb\u505a\u3002 \u9996\u5148\uff0c\u5fc5\u987b\u6307\u5b9a\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5b9a\u4e49\u4f4d\u4e8e\u51fd\u6570\u540d\u524d\u9762\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c getValueFromUser \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff08\u8868\u793a\u65e0\u9700\u8fd4\u56de\u4efb\u4f55\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff09\uff0c\u800c main \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5219\u4e3a int \uff08\u5373\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff09\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u5e76\u4e0d\u662f\u5b9a\u4e49\u8fd4\u56de\u7684\u5177\u4f53\u662f\u4ec0\u4e48\u503c\uff0c\u800c\u4ec5\u662f\u6307\u5b9a\u5176 \u7c7b\u578b \u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u8fd4\u56de\u503c\u4e3a void \u7c7b\u578b\u7684\u51fd\u6570\u5c06\u5728\u4e0b\u8282\u8bfe\u4e2d\u4ecb\u7ecd\uff08[[2.3 Void \u51fd\u6570 (\u65e0\u8fd4\u56de\u503c\u51fd\u6570)]]\uff09 \u5176\u6b21\uff0c\u5728\u9700\u8981\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e2d\uff0c\u9700\u8981\u901a\u8fc7 return \u8bed\u53e5\u6765\u6307\u5b9a\u8981\u8fd4\u56de\u7684\u5177\u4f53\u503c\u3002\u8be5\u5177\u4f53\u503c\u79f0\u4e3a\u51fd\u6570\u7684 \u8fd4\u56de\u503c \u3002\u5f53 return \u8bed\u53e5\u88ab\u6267\u884c\u65f6\uff0c\u51fd\u6570\u4f1a\u7acb\u5373\u9000\u51fa\uff0c\u540c\u65f6\u5c06\u8fd4\u56de\u503c \u62f7\u8d1d \u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u503c\u8fd4\u56de \uff08return by value\uff09\u3002 \u4ee5\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e3a\u4f8b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> // int \u662f\u8fd4\u56de\u503c\u7c7b\u578b // \u8fd4\u56de\u503c\u7c7b\u578b\u4e3a int \u610f\u5473\u7740\u51fd\u6570\u4f1a\u8fd4\u56de\u67d0\u4e2a\u6574\u578b\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff08\u5177\u4f53\u662f\u4ec0\u4e48\u503c\u5e76\u4e0d\u4f1a\u5728\u6b64\u5904\u6307\u5b9a\uff09 int returnFive () { // return \u8bed\u53e5\u6307\u5b9a\u4e86\u8981\u8fd4\u56de\u7684\u5177\u4f53\u503c return 5 ; // \u8fd4\u56de 5 \u7ed9\u4e3b\u8c03\u51fd\u6570 } int main () { std :: cout << returnFive () << '\\n' ; // prints 5 std :: cout << returnFive () + 2 << '\\n' ; // prints 7 returnFive (); // \u51fd\u6570\u8fd4\u56de\u4e86 5\uff0c\u4f46\u662f\u8be5\u503c\u88ab\u5ffd\u7565\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u8be5\u503c\u505a\u4efb\u4f55\u4e8b\u60c5 return 0 ; } \u51fd\u6570\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 5 7 \u4ee3\u7801\u6267\u884c\u4ece main \u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u7b2c\u4e00\u6761\u8bed\u53e5\u5bf9 returnFive \u8fdb\u884c\u4e86\u6c42\u503c\uff0c\u5373\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u3002\u51fd\u6570 returnFive \u8fd4\u56de\u503c\u4e3a 5\uff0c\u8be5\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u540e\uff0c\u901a\u8fc7 std:: cout \u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7b2c\u4e8c\u5904\u51fd\u6570\u8c03\u7528\uff0c\u8bed\u53e5 returnFive \u8fdb\u884c\u4e86\u6c42\u503c\uff0c \u5176\u7ed3\u679c\u5c31\u662f returnFive \u51fd\u6570\u518d\u6b21\u88ab\u8c03\u7528\u3002\u51fd\u6570\u4ecd\u7136\u5c06\u8fd4\u56de\u503c 5 \u8fd4\u56de\u7ed9\u4e86\u4e3b\u8c03\u51fd\u6570\u3002\u8868\u8fbe\u5f0f 5 + 2 \u7684\u6c42\u503c\u7ed3\u679c\u662f 7\uff0c\u968f\u540e\u8be5\u503c\u901a\u8fc7 std:: cout \u88ab\u6253\u5370\u5230\u4e86\u63a7\u5236\u53f0\u3002 \u7b2c\u4e09\u6761\u8bed\u53e5\u518d\u6b21\u8c03\u7528\u4e86 returnFive \u51fd\u6570\uff0c\u5176\u8fd4\u56de\u503c\u4ecd\u7136\u88ab\u8fd4\u56de\u7ed9\u4e86\u4e3b\u8c03\u51fd\u6570\uff0c\u4f46\u662f main \u51fd\u6570\u5e76\u6ca1\u6709\u5bf9\u8be5\u8fd4\u56de\u503c\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u56e0\u6b64\u4ec0\u4e48\u4e8b\u60c5\u90fd\u6ca1\u6709\u53d1\u751f\uff08\u8fd4\u56de\u503c\u88ab\u5ffd\u7565\u4e86\uff09\u3002 \u6ce8\u610f\uff1a\u9664\u975e\u4e3b\u8c03\u51fd\u6570\u901a\u8fc7 std:: cout \u5c06\u8fd4\u56de\u503c\u53d1\u9001\u5230\u63a7\u5236\u53f0\u8fdb\u884c\u6253\u5370\uff0c\u5426\u5219\u8be5\u503c\u5e76\u4e0d\u4f1a\u88ab\u6253\u5370\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4e3b\u8c03\u51fd\u6570\u6ca1\u6709\u5c06\u8fd4\u56de\u503c\u53d1\u9001\u5230 std:: cout \uff0c\u56e0\u6b64\u5176\u7ed3\u679c\u6ca1\u6709\u6253\u5370\u3002 [!TIP] \u5c0f\u8d34\u58eb \u5f53\u88ab\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f\uff0c\u4e3b\u8c03\u51fd\u6570\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5728\u8868\u8fbe\u5f0f\u6216\u8005\u8bed\u53e5\u4e2d\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\uff08\u4f8b\u5982\uff1a\u5c06\u5176\u8d4b\u503c\u7ed9\u67d0\u4e2a\u53d8\u91cf\u6216\u5c06\u5176\u53d1\u9001\u5230 std:: cout \uff09\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565\u5b83\uff08\u4e0d\u5bf9\u8fd4\u56de\u503c\u505a\u4efb\u4f55\u64cd\u4f5c\uff09\u3002 \u4fee\u6539\u7a0b\u5e8f \u6709\u4e86\u4e0a\u9762\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8bfe\u7a0b\u5f00\u59cb\u65f6\u7684\u7a0b\u5e8f\u8fdb\u884c\u9002\u5f53\u7684\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () // this function now returns an integer value { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; // return the value the user entered back to the caller } int main () { int num { getValueFromUser () }; // \u4f7f\u7528 getValueFromUser() \u7684\u8fd4\u56de\u503c\u5bf9 num \u8fdb\u884c\u521d\u59cb\u5316 std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5f53\u4e0a\u8ff0\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c main \u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u4f1a\u521b\u5efa\u4e00\u4e2a int \u7c7b\u578b\u7684\u53d8\u91cf num \u3002\u5f53\u7a0b\u5e8f\u51c6\u5907\u8981\u5bf9 num \u521d\u59cb\u5316\u65f6\uff0c\u5b83\u4f1a\u53d1\u73b0\u6b64\u5904\u6709\u4e00\u4e2a\u51fd\u6570\u8c03\u7528 getValueFromUser() \uff0c\u56e0\u6b64\u5b83\u4f1a\u8df3\u8f6c\u53bb\u6267\u884c\u8be5\u51fd\u6570\u3002\u51fd\u6570 getValueFromUser \u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u5b83\u5c06\u8be5\u8f93\u5165\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570( main )\u3002\u8be5\u8fd4\u56de\u503c\u88ab\u7528\u6765\u5bf9\u53d8\u91cf num \u8fdb\u884c\u521d\u59cb\u5316\u3002 \u8bf7\u81ea\u884c\u7f16\u8bd1\u8be5\u51fd\u6570\u5e76\u8fd0\u884c\u5176\u51e0\u6b21\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u80fd\u591f\u6b63\u786e\u8fd0\u884c\u3002 \u8fd4\u56de\u5230\u4e3b\u51fd\u6570 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u601d\u7ef4\u5de5\u5177\u6765\u7406\u89e3 main \u51fd\u6570\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u53d6\u8c03\u7528 main \u51fd\u6570\u3002\u968f\u540e\u7a0b\u5e8f\u5c31\u4f1a\u8df3\u8f6c\u5230 main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\u3002\u51fd\u6570\u4f53\u4e2d\u7684\u8bed\u53e5\u4f1a\u987a\u5e8f\u6267\u884c\u3002\u6700\u7ec8\uff0c main \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff08\u901a\u5e38\u662f 0\uff09\uff0c\u7136\u540e\u7a0b\u5e8f\u5c31\u7ec8\u6b62\u4e86\u3002 main \u51fd\u6570\u7684\u7684\u8fd4\u56de\u503c\u901a\u5e38\u79f0\u4e3a\u72b6\u6001\u7801\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u9000\u51fa\u72b6\u6001\u7801\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\u4e5f\u79f0\u4e3a\u8fd4\u56de\u7801\uff09\uff0c\u56e0\u4e3a\u8be5\u8fd4\u56de\u503c\u7528\u6765\u53cd\u6620\u7a0b\u5e8f\u662f\u5426\u6b63\u786e\u6267\u884c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u72b6\u6001\u7801\u4e3a 0 \u8868\u793a\u7a0b\u5e8f\u6267\u884c\u6210\u529f\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5982\u679c\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\uff0c main \u7684\u8fd4\u56de\u503c\u5e94\u8be5\u4e3a 0 \u3002 \u975e 0 \u7684\u8fd4\u56de\u503c\u901a\u5e38\u7528\u6765\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u5931\u8d25\uff08\u5c3d\u7ba1\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u6309\u7167\u4e0a\u8ff0\u7ea6\u5b9a\u6765\u5bf9\u5f85\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e25\u683c\u6765\u8bb2\uff0c\u5176\u53ef\u79fb\u690d\u6027\u5e76\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff09\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb C++\u6807\u51c6\u4e2d\u503c\u5b9a\u4e49\u4e86\u4e09\u79cd\u8fd4\u56de\u72b6\u6001\u7801\uff1a0\u3001 EXIT_SUCCESS \u548c EXIT_FAILURE \u30020 \u548c EXIT_SUCCESS \u90fd\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u6210\u529f\u3002 EXIT_FAILURE \u5219\u8868\u793a\u7a0b\u5e8f\u6ca1\u6709\u6210\u529f\u6267\u884c\u3002 EXIT_SUCCESS \u548c EXIT_FAILURE \u5728 <cstdlib> \u5934\u6587\u4ef6\u4e2d\u58f0\u660e\uff1a 1 2 3 4 5 6 #include <cstdlib> // for EXIT_SUCCESS and EXIT_FAILURE int main () { return EXIT_SUCCESS ; } \u5982\u679c\u4f60\u60f3\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u53ef\u79fb\u690d\u6027\uff0c\u8bf7\u4f7f\u7528 0 \u6216\u8005 EXIT_SUCCESS \u8868\u793a\u7a0b\u5e8f\u6210\u529f\u6267\u884c\uff0c\u6216\u8005\u4f7f\u7528 EXIT_FAILURE \u8868\u793a\u7a0b\u5e8f\u6267\u884c\u5931\u8d25\u3002 C++ \u4e0d\u5141\u8bb8\u663e\u5f0f\u8c03\u7528 main \u51fd\u6570\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0c\u4f60\u8fd8\u5e94\u8be5\u5c06 main \u51fd\u6570\u5b9a\u4e49\u5728\u6587\u4ef6\u7684\u6700\u4e0b\u65b9\uff0c\u5373\u5b9a\u4e49\u5728\u5176\u4ed6\u6240\u6709\u51fd\u6570\u540e\u9762\u3002 \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a \u4e00\u4e2a\u4f1a\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u79f0\u4e3a\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570(value-returning function)\uff0c\u9664\u975e\u8fd4\u56de\u503c\u7c7b\u578b\u662f void \uff0c\u5426\u5219\u90fd\u5c5e\u4e8e\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 \u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u5bf9\u5e94\u7c7b\u578b\u7684\u503c\uff08\u4f7f\u7528 return \u8bed\u53e5\uff09\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8ba8\u8bba\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () // this function returns an integer value { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; // \u6ce8\u610f\uff1a\u6ca1\u6709 return \u8bed\u53e5 } int main () { int num { getValueFromUser () }; // initialize num with the return value of getValueFromUser() std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5728\u7f16\u8bd1\u4e0a\u8ff0\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4f1a\u4ea7\u751f\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a getValueFromUser \u5b9a\u4e49\u4e86 int \u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4f46\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5305\u542b return \u8bed\u53e5\u3002\u7136\u800c\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u7f16\u8bd1\u901a\u8fc7\u4e86\uff0c\u90a3\u4e48\u5728\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u56e0\u4e3a getValueFromUser() \u662f\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u4f46\u5e76\u6ca1\u6709\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u5fd8\u8bb0\u8fd4\u56de\u503c\uff0c\u7f16\u8bd1\u5668\u662f\u80fd\u591f\u68c0\u6d4b\u5230\u7684\u3002\u4f46\u662f\uff0c\u6709\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u65e0\u6cd5\u786e\u5b9a\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c\u7684\u3002\u6240\u4ee5\u4f60\u4e0d\u5e94\u8be5\u4f9d\u8d56\u7f16\u8bd1\u5668\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u786e\u4fdd\u975e void \u7c7b\u578b\u7684\u51fd\u6570\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u8fd4\u56de\u503c\u3002 \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 main \u51fd\u6570\u5982\u679c\u6ca1\u6709\u4f7f\u7528 return \u8bed\u53e5\u5219\u4f1a\u9690\u5f0f\u5730\u8fd4\u56de 0 \u4e0a\u8ff0\u539f\u5219\u6709\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662fmain\u51fd\u6570\u3002main \u51fd\u6570\u5982\u679c\u6ca1\u6709\u4f7f\u7528 return \u8bed\u53e5\u5219\u4f1a\u9690\u5f0f\u5730\u8fd4\u56de 0\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6700\u4f73\u5b9e\u8df5\u4ecd\u7136\u662f\u663e\u5f0f\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u6837\u65e2\u80fd\u591f\u8868\u660e\u4f60\u7684\u5b9e\u9645\u610f\u56fe\uff0c\u4e5f\u80fd\u591f\u5728\u5f62\u5f0f\u4e0a\u548c\u5176\u4ed6\u51fd\u6570\u4fdd\u6301\u4e00\u81f4(\u53ef\u4ee5\u9884\u9632\u4f60\u5ffd\u7565\u5176\u4ed6\u51fd\u6570\u7684\u8fd4\u56de\u503c)\u3002 \u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u5355\u503c \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4f9d\u6b21\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u5355\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u6ce8\u610f\uff0c return \u8bed\u53e5\u4e2d\u7684\u503c\u4e0d\u4e00\u5b9a\u8981\u7d20\u5b57\u9762\u91cf\u2014\u2014\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5305\u62ec\u53d8\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u5176\u4ed6\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 getValueFromUser() \u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u503c\u662f\u53d8\u91cf input \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u8f93\u5165\u7684\u5b9e\u9645\u503c\u3002 \u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\u662f\u53ef\u4ee5\u7ed5\u8fc7\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u5355\u4e00\u503c\u7684\u9650\u5236\u7684\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002 \u51fd\u6570\u7684\u7f16\u5199\u8005\u53ef\u4ee5\u51b3\u5b9a\u8fd4\u56de\u503c\u7684\u542b\u4e49 \u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u662f\u7531\u51fd\u6570\u7f16\u5199\u8005\u51b3\u5b9a\u7684\u3002\u6709\u4e9b\u51fd\u6570\u4f1a\u5c06\u72b6\u6001\u7801\u4f5c\u4e3a\u8fd4\u56de\u503c\u6765\u8868\u793a\u51fd\u6570\u662f\u5426\u6267\u884c\u6210\u529f\u3002\u6709\u7684\u51fd\u6570\u5219\u5c06\u8ba1\u7b97\u7ed3\u679c\u6216\u5176\u4ed6\u9009\u5b9a\u7684\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u8fd8\u6709\u4e9b\u51fd\u6570\u4ec0\u4e48\u90fd\u4e0d\u8fd4\u56de\uff08\u6211\u4eec\u4f1a\u5728\u4e0b\u4e00\u8282\u8bfe\u4e2d\u4ecb\u7ecd\u6b64\u7c7b\u51fd\u6570\uff09\u3002 \u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u53ef\u80fd\u662f\u5404\u79cd\u5404\u6837\u7684\uff0c\u56e0\u6b64\u901a\u8fc7\u6ce8\u91ca\u7684\u65b9\u5f0f\u5bf9\u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u8fdb\u884c\u63cf\u8ff0\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 // \u51fd\u6570\u63d0\u793a\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u503c // \u8fd4\u56de\u503c\u662f\u7528\u6237\u4ece\u952e\u76d8\u8f93\u5165\u7684\u503c\uff0c\u6574\u578b int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; // \u5c06\u7528\u6237\u6570\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570 } \u51fd\u6570\u91cd\u7528 \u63a5\u4e0b\u6765\uff0c\u4ecb\u7ecd\u51fd\u6570\u91cd\u7528\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> int main () { int x {}; std :: cout << \"Enter an integer: \" ; std :: cin >> x ; int y {}; std :: cout << \"Enter an integer: \" ; std :: cin >> y ; std :: cout << x << \" + \" << y << \" = \" << x + y << '\\n' ; return 0 ; } \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u662f\u4ee3\u7801\u6709\u4e9b\u5197\u4f59\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\u8fdd\u53cd\u4e86\u597d\u4ee3\u7801\u7684\u6838\u5fc3\u4fe1\u6761\uff1a\u4e0d\u8981\u91cd\u590d\u4f60\u81ea\u5df1\u2014\u2014Don\u2019t Repeat Yourself (\u5e38\u5e38\u7f29\u5199\u4e3aDRY)\u3002 \u4e3a\u4ec0\u4e48\u91cd\u590d\u7684\u4ee3\u7801\u662f\u4e0d\u597d\u7684\uff1f\u5982\u679c\u4f60\u60f3\u8981\u5c06\u6587\u672c \u201cEnter an integer:\u201d \u4fee\u6539\u6210\u5176\u4ed6\u5185\u5bb9\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u8981\u4fee\u6539\u4e24\u4e2a\u5730\u65b9\u3002\u5982\u679c\u8981\u521d\u59cb\u5316\u7684\u53d8\u91cf\u670910\u4e2a\u800c\u4e0d\u662f\u4e24\u4e2a\u5462\uff1f\u8fd9\u65e0\u7591\u5c06\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u5197\u4f59\u4ee3\u7801\uff08\u4f7f\u5f97\u7a0b\u5e8f\u53d8\u5f97\u53c8\u957f\u53c8\u96be\u4ee5\u7406\u89e3\uff09\uff0c\u8fd8\u4e3a\u62fc\u5199\u9519\u8bef\u63d0\u4f9b\u4e86\u6ecb\u751f\u7684\u7a7a\u95f4\u3002 \u4e0b\u9762\uff0c\u4f7f\u7528 getValueFromUser \u51fd\u6570\u6765\u91cd\u6784\u4e0a\u8ff0\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } int main () { int x { getValueFromUser () }; // first call to getValueFromUser int y { getValueFromUser () }; // second call to getValueFromUser std :: cout << x << \" + \" << y << \" = \" << x + y << '\\n' ; return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 Enter an integer: 5 Enter an integer: 7 5 + 7 = 12 \u4e0a\u8ff0\u7a0b\u5e8f\u4e2d\uff0c getValueFromUser \u88ab\u8c03\u7528\u4e86\u91cf\u8bcd\uff0c\u4e00\u6b21\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf x \uff0c\u4e00\u6b21\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf y \u3002\u4f7f\u7528\u8be5\u51fd\u6570\u53ef\u4ee5\u6709\u6548\u5730\u907f\u514d\u91cd\u590d\u4ee3\u7801\uff0c\u4e5f\u51cf\u5c11\u4e86\u72af\u9519\u7684\u6982\u7387\u3002\u53ea\u8981 getValueFromUser \u51fd\u6570\u80fd\u591f\u6b63\u786e\u5de5\u4f5c\uff0c\u90a3\u4e48\u4fbf\u53ef\u4ee5\u591a\u6b21\u8c03\u7528\u5b83\u3002 \u8fd9\u4e5f\u662f\u6a21\u5757\u5316\u7f16\u7a0b\u7684\u7cbe\u9ad3\uff1a\u7f16\u5199\u51fd\u6570\u3001\u6d4b\u8bd5\u51fd\u6570\u4ee5\u786e\u4fdd\u5b83\u80fd\u591f\u6b63\u786e\u5de5\u4f5c\uff0c\u7136\u540e\u4fbf\u53ef\u4ee5\u5728\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u4e2d\u53cd\u590d\u4f7f\u7528\u8be5\u51fd\u6570\uff08\u53ea\u8981\u6211\u4eec\u6ca1\u6709\u4fee\u6539\u8fd9\u4e2a\u51fd\u6570\u2014\u2014\u5426\u5219\u5fc5\u987b\u5bf9\u8be5\u51fd\u6570\u91cd\u65b0\u6d4b\u8bd5\uff09\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u8bf7\u9075\u5faaDRY\u539f\u5219\uff0c\u5373\u4e0d\u8981\"\u91cd\u590d\u4f60\u81ea\u5df1\u7684\u5de5\u4f5c\"\u3002\u5982\u679c\u6709\u4ef6\u4e8b\u9700\u8981\u505a\u591a\u6b21\uff0c\u8bf7\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\uff0c\u5c3d\u53ef\u80fd\u79fb\u9664\u5197\u4f59\u7684\u90e8\u5206\u3002\u53d8\u91cf\u53ef\u4ee5\u7528\u6765\u5b58\u653e\u88ab\u8ba1\u7b97\u51fa\u6765\u4e14\u9700\u8981\u591a\u6b21\u4f7f\u7528\u7684\u6570\u636e\uff08\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u91cd\u590d\u8ba1\u7b97\uff09\u3002\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u4e00\u7ec4\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u6267\u884c\u7684\u6307\u4ee4\u3002\u5faa\u73af\uff08\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u4f1a\u4ecb\u7ecd\uff09\u5219\u53ef\u4ee5\u7528\u6765\u591a\u6b21\u6267\u884c\u8bed\u53e5\u3002 [!INFO] \u9898\u5916\u8bdd DRY \u7684\u53cd\u4e49\u8bcd\u662f WET (\u201cWrite everything twice\u201d\u2014\u2014\u4efb\u4f55\u4ee3\u7801\u90fd\u5199\u4e24\u904d).","title":"2.02 \u51fd\u6570\u8fd4\u56de\u503c (\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570)"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#22","text":"\u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> int main () { // get a value from the user std :: cout << \"Enter an integer: \" ; int num {}; std :: cin >> num ; // print the value doubled std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u8fd9\u4e2a\u7a0b\u5e8f\u4ece\u6982\u5ff5\u4e0a\u5c06\u5305\u542b\u4e24\u90e8\u5206\uff1a\u9996\u5148\u6211\u4eec\u4ece\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u8f93\u5165\uff0c\u7136\u540e\u544a\u8bc9\u7528\u6237\u8be5\u8f93\u5165\u7684\u4e24\u500d\u662f\u591a\u5c11\u3002 \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u5df2\u7ecf\u8db3\u591f\u7b80\u5355\uff0c\u6ca1\u5fc5\u8981\u5c06\u5176\u5212\u5206\u4e3a\u591a\u4e2a\u51fd\u6570\uff0c\u4f46\u5982\u679c\u6211\u4eec\u6267\u610f\u8981\u8fd9\u4e48\u505a\u5462\uff1f\u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\u662f\u4e00\u4e2a\u975e\u5e38\u660e\u786e\u7684\u4efb\u52a1\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u5e94\u8be5\u662f\u5f88\u5408\u9002\u7684\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u88ab\u4fee\u6539\u6210\u4e86\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // This program doesn't work #include <iostream> void getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; } int main () { getValueFromUser (); // Ask user for input int num {}; // How do we get the value from getValueFromUser() and use it to initialize this variable? std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5c3d\u7ba1\u770b\u4e0a\u53bb\u4e0a\u9762\u7684\u5c1d\u8bd5\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u5374\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u5f53\u51fd\u6570 getValueFromUser \u88ab\u8c03\u7528\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u578b\u6570\uff0c\u8fd9\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u3002\u4f46\u662f\u5f53\u51fd\u6570 getValueFromUser \u8c03\u7528\u7ed3\u675f\u5e76\u8fd4\u56de main \u51fd\u6570\u65f6\uff0c\u521a\u624d\u8f93\u5165\u7684\u503c\u5c31\u88ab\u4e22\u5f03\u4e86\u3002\u53d8\u91cf num \u59cb\u7ec8\u90fd\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u4e3a\u7528\u6237\u8f93\u5165\u7684\u503c\uff0c\u56e0\u6b64\u8f93\u51fa\u7ed3\u679c\u59cb\u7ec8\u662f 0 \u3002 \u95ee\u9898\u51fa\u5728 getValueFromUser \u51fd\u6570\u8fd4\u56de\u5230 main \u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ca1\u6709\u5c06\u7528\u6237\u8f93\u5165\u7684\u503c\u4e00\u8d77\u8fd4\u56de\uff0c\u56e0\u6b64 main \u51fd\u6570\u5c31\u65e0\u6cd5\u4f7f\u7528\u8be5\u503c\u3002","title":"2.2 \u51fd\u6570\u8fd4\u56de\u503c (\u5e26\u8fd4\u56de\u503c\u7684\u51fd\u6570)"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_1","text":"\u5728\u7f16\u5199\u51fd\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u8be5\u51fd\u6570\u662f\u5426\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u5982\u679c\u9700\u8981\uff0c\u6709\u4e24\u4ef6\u4e8b\u9700\u8981\u53bb\u505a\u3002 \u9996\u5148\uff0c\u5fc5\u987b\u6307\u5b9a\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u5b9a\u4e49\u4f4d\u4e8e\u51fd\u6570\u540d\u524d\u9762\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c getValueFromUser \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff08\u8868\u793a\u65e0\u9700\u8fd4\u56de\u4efb\u4f55\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff09\uff0c\u800c main \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5219\u4e3a int \uff08\u5373\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff09\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u5e76\u4e0d\u662f\u5b9a\u4e49\u8fd4\u56de\u7684\u5177\u4f53\u662f\u4ec0\u4e48\u503c\uff0c\u800c\u4ec5\u662f\u6307\u5b9a\u5176 \u7c7b\u578b \u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u8fd4\u56de\u503c\u4e3a void \u7c7b\u578b\u7684\u51fd\u6570\u5c06\u5728\u4e0b\u8282\u8bfe\u4e2d\u4ecb\u7ecd\uff08[[2.3 Void \u51fd\u6570 (\u65e0\u8fd4\u56de\u503c\u51fd\u6570)]]\uff09 \u5176\u6b21\uff0c\u5728\u9700\u8981\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e2d\uff0c\u9700\u8981\u901a\u8fc7 return \u8bed\u53e5\u6765\u6307\u5b9a\u8981\u8fd4\u56de\u7684\u5177\u4f53\u503c\u3002\u8be5\u5177\u4f53\u503c\u79f0\u4e3a\u51fd\u6570\u7684 \u8fd4\u56de\u503c \u3002\u5f53 return \u8bed\u53e5\u88ab\u6267\u884c\u65f6\uff0c\u51fd\u6570\u4f1a\u7acb\u5373\u9000\u51fa\uff0c\u540c\u65f6\u5c06\u8fd4\u56de\u503c \u62f7\u8d1d \u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u503c\u8fd4\u56de \uff08return by value\uff09\u3002 \u4ee5\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e3a\u4f8b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> // int \u662f\u8fd4\u56de\u503c\u7c7b\u578b // \u8fd4\u56de\u503c\u7c7b\u578b\u4e3a int \u610f\u5473\u7740\u51fd\u6570\u4f1a\u8fd4\u56de\u67d0\u4e2a\u6574\u578b\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\uff08\u5177\u4f53\u662f\u4ec0\u4e48\u503c\u5e76\u4e0d\u4f1a\u5728\u6b64\u5904\u6307\u5b9a\uff09 int returnFive () { // return \u8bed\u53e5\u6307\u5b9a\u4e86\u8981\u8fd4\u56de\u7684\u5177\u4f53\u503c return 5 ; // \u8fd4\u56de 5 \u7ed9\u4e3b\u8c03\u51fd\u6570 } int main () { std :: cout << returnFive () << '\\n' ; // prints 5 std :: cout << returnFive () + 2 << '\\n' ; // prints 7 returnFive (); // \u51fd\u6570\u8fd4\u56de\u4e86 5\uff0c\u4f46\u662f\u8be5\u503c\u88ab\u5ffd\u7565\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u8be5\u503c\u505a\u4efb\u4f55\u4e8b\u60c5 return 0 ; } \u51fd\u6570\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 5 7 \u4ee3\u7801\u6267\u884c\u4ece main \u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u7b2c\u4e00\u6761\u8bed\u53e5\u5bf9 returnFive \u8fdb\u884c\u4e86\u6c42\u503c\uff0c\u5373\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u3002\u51fd\u6570 returnFive \u8fd4\u56de\u503c\u4e3a 5\uff0c\u8be5\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u540e\uff0c\u901a\u8fc7 std:: cout \u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7b2c\u4e8c\u5904\u51fd\u6570\u8c03\u7528\uff0c\u8bed\u53e5 returnFive \u8fdb\u884c\u4e86\u6c42\u503c\uff0c \u5176\u7ed3\u679c\u5c31\u662f returnFive \u51fd\u6570\u518d\u6b21\u88ab\u8c03\u7528\u3002\u51fd\u6570\u4ecd\u7136\u5c06\u8fd4\u56de\u503c 5 \u8fd4\u56de\u7ed9\u4e86\u4e3b\u8c03\u51fd\u6570\u3002\u8868\u8fbe\u5f0f 5 + 2 \u7684\u6c42\u503c\u7ed3\u679c\u662f 7\uff0c\u968f\u540e\u8be5\u503c\u901a\u8fc7 std:: cout \u88ab\u6253\u5370\u5230\u4e86\u63a7\u5236\u53f0\u3002 \u7b2c\u4e09\u6761\u8bed\u53e5\u518d\u6b21\u8c03\u7528\u4e86 returnFive \u51fd\u6570\uff0c\u5176\u8fd4\u56de\u503c\u4ecd\u7136\u88ab\u8fd4\u56de\u7ed9\u4e86\u4e3b\u8c03\u51fd\u6570\uff0c\u4f46\u662f main \u51fd\u6570\u5e76\u6ca1\u6709\u5bf9\u8be5\u8fd4\u56de\u503c\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u56e0\u6b64\u4ec0\u4e48\u4e8b\u60c5\u90fd\u6ca1\u6709\u53d1\u751f\uff08\u8fd4\u56de\u503c\u88ab\u5ffd\u7565\u4e86\uff09\u3002 \u6ce8\u610f\uff1a\u9664\u975e\u4e3b\u8c03\u51fd\u6570\u901a\u8fc7 std:: cout \u5c06\u8fd4\u56de\u503c\u53d1\u9001\u5230\u63a7\u5236\u53f0\u8fdb\u884c\u6253\u5370\uff0c\u5426\u5219\u8be5\u503c\u5e76\u4e0d\u4f1a\u88ab\u6253\u5370\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6700\u540e\u4e00\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4e3b\u8c03\u51fd\u6570\u6ca1\u6709\u5c06\u8fd4\u56de\u503c\u53d1\u9001\u5230 std:: cout \uff0c\u56e0\u6b64\u5176\u7ed3\u679c\u6ca1\u6709\u6253\u5370\u3002 [!TIP] \u5c0f\u8d34\u58eb \u5f53\u88ab\u8c03\u51fd\u6570\u8fd4\u56de\u503c\u662f\uff0c\u4e3b\u8c03\u51fd\u6570\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5728\u8868\u8fbe\u5f0f\u6216\u8005\u8bed\u53e5\u4e2d\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\uff08\u4f8b\u5982\uff1a\u5c06\u5176\u8d4b\u503c\u7ed9\u67d0\u4e2a\u53d8\u91cf\u6216\u5c06\u5176\u53d1\u9001\u5230 std:: cout \uff09\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565\u5b83\uff08\u4e0d\u5bf9\u8fd4\u56de\u503c\u505a\u4efb\u4f55\u64cd\u4f5c\uff09\u3002","title":"\u8fd4\u56de\u503c"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_2","text":"\u6709\u4e86\u4e0a\u9762\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8bfe\u7a0b\u5f00\u59cb\u65f6\u7684\u7a0b\u5e8f\u8fdb\u884c\u9002\u5f53\u7684\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () // this function now returns an integer value { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; // return the value the user entered back to the caller } int main () { int num { getValueFromUser () }; // \u4f7f\u7528 getValueFromUser() \u7684\u8fd4\u56de\u503c\u5bf9 num \u8fdb\u884c\u521d\u59cb\u5316 std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5f53\u4e0a\u8ff0\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c main \u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u4f1a\u521b\u5efa\u4e00\u4e2a int \u7c7b\u578b\u7684\u53d8\u91cf num \u3002\u5f53\u7a0b\u5e8f\u51c6\u5907\u8981\u5bf9 num \u521d\u59cb\u5316\u65f6\uff0c\u5b83\u4f1a\u53d1\u73b0\u6b64\u5904\u6709\u4e00\u4e2a\u51fd\u6570\u8c03\u7528 getValueFromUser() \uff0c\u56e0\u6b64\u5b83\u4f1a\u8df3\u8f6c\u53bb\u6267\u884c\u8be5\u51fd\u6570\u3002\u51fd\u6570 getValueFromUser \u8981\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u5b83\u5c06\u8be5\u8f93\u5165\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570( main )\u3002\u8be5\u8fd4\u56de\u503c\u88ab\u7528\u6765\u5bf9\u53d8\u91cf num \u8fdb\u884c\u521d\u59cb\u5316\u3002 \u8bf7\u81ea\u884c\u7f16\u8bd1\u8be5\u51fd\u6570\u5e76\u8fd0\u884c\u5176\u51e0\u6b21\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u80fd\u591f\u6b63\u786e\u8fd0\u884c\u3002","title":"\u4fee\u6539\u7a0b\u5e8f"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_3","text":"\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u601d\u7ef4\u5de5\u5177\u6765\u7406\u89e3 main \u51fd\u6570\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u53d6\u8c03\u7528 main \u51fd\u6570\u3002\u968f\u540e\u7a0b\u5e8f\u5c31\u4f1a\u8df3\u8f6c\u5230 main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\u3002\u51fd\u6570\u4f53\u4e2d\u7684\u8bed\u53e5\u4f1a\u987a\u5e8f\u6267\u884c\u3002\u6700\u7ec8\uff0c main \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff08\u901a\u5e38\u662f 0\uff09\uff0c\u7136\u540e\u7a0b\u5e8f\u5c31\u7ec8\u6b62\u4e86\u3002 main \u51fd\u6570\u7684\u7684\u8fd4\u56de\u503c\u901a\u5e38\u79f0\u4e3a\u72b6\u6001\u7801\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u9000\u51fa\u72b6\u6001\u7801\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\u4e5f\u79f0\u4e3a\u8fd4\u56de\u7801\uff09\uff0c\u56e0\u4e3a\u8be5\u8fd4\u56de\u503c\u7528\u6765\u53cd\u6620\u7a0b\u5e8f\u662f\u5426\u6b63\u786e\u6267\u884c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u72b6\u6001\u7801\u4e3a 0 \u8868\u793a\u7a0b\u5e8f\u6267\u884c\u6210\u529f\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5982\u679c\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\uff0c main \u7684\u8fd4\u56de\u503c\u5e94\u8be5\u4e3a 0 \u3002 \u975e 0 \u7684\u8fd4\u56de\u503c\u901a\u5e38\u7528\u6765\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u5931\u8d25\uff08\u5c3d\u7ba1\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u6309\u7167\u4e0a\u8ff0\u7ea6\u5b9a\u6765\u5bf9\u5f85\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e25\u683c\u6765\u8bb2\uff0c\u5176\u53ef\u79fb\u690d\u6027\u5e76\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff09\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb C++\u6807\u51c6\u4e2d\u503c\u5b9a\u4e49\u4e86\u4e09\u79cd\u8fd4\u56de\u72b6\u6001\u7801\uff1a0\u3001 EXIT_SUCCESS \u548c EXIT_FAILURE \u30020 \u548c EXIT_SUCCESS \u90fd\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u6210\u529f\u3002 EXIT_FAILURE \u5219\u8868\u793a\u7a0b\u5e8f\u6ca1\u6709\u6210\u529f\u6267\u884c\u3002 EXIT_SUCCESS \u548c EXIT_FAILURE \u5728 <cstdlib> \u5934\u6587\u4ef6\u4e2d\u58f0\u660e\uff1a 1 2 3 4 5 6 #include <cstdlib> // for EXIT_SUCCESS and EXIT_FAILURE int main () { return EXIT_SUCCESS ; } \u5982\u679c\u4f60\u60f3\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u53ef\u79fb\u690d\u6027\uff0c\u8bf7\u4f7f\u7528 0 \u6216\u8005 EXIT_SUCCESS \u8868\u793a\u7a0b\u5e8f\u6210\u529f\u6267\u884c\uff0c\u6216\u8005\u4f7f\u7528 EXIT_FAILURE \u8868\u793a\u7a0b\u5e8f\u6267\u884c\u5931\u8d25\u3002 C++ \u4e0d\u5141\u8bb8\u663e\u5f0f\u8c03\u7528 main \u51fd\u6570\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0c\u4f60\u8fd8\u5e94\u8be5\u5c06 main \u51fd\u6570\u5b9a\u4e49\u5728\u6587\u4ef6\u7684\u6700\u4e0b\u65b9\uff0c\u5373\u5b9a\u4e49\u5728\u5176\u4ed6\u6240\u6709\u51fd\u6570\u540e\u9762\u3002","title":"\u8fd4\u56de\u5230\u4e3b\u51fd\u6570"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_4","text":"\u4e00\u4e2a\u4f1a\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u79f0\u4e3a\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570(value-returning function)\uff0c\u9664\u975e\u8fd4\u56de\u503c\u7c7b\u578b\u662f void \uff0c\u5426\u5219\u90fd\u5c5e\u4e8e\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 \u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u5bf9\u5e94\u7c7b\u578b\u7684\u503c\uff08\u4f7f\u7528 return \u8bed\u53e5\uff09\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u5728[[1.6 \u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u548c\u672a\u5b9a\u4e49\u884c\u4e3a]]\u4e2d\u8ba8\u8bba\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () // this function returns an integer value { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; // \u6ce8\u610f\uff1a\u6ca1\u6709 return \u8bed\u53e5 } int main () { int num { getValueFromUser () }; // initialize num with the return value of getValueFromUser() std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u5728\u7f16\u8bd1\u4e0a\u8ff0\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4f1a\u4ea7\u751f\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a getValueFromUser \u5b9a\u4e49\u4e86 int \u7c7b\u578b\u7684\u8fd4\u56de\u503c\u4f46\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5305\u542b return \u8bed\u53e5\u3002\u7136\u800c\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u7f16\u8bd1\u901a\u8fc7\u4e86\uff0c\u90a3\u4e48\u5728\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\u65f6\u5c31\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u56e0\u4e3a getValueFromUser() \u662f\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u4f46\u5e76\u6ca1\u6709\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u5fd8\u8bb0\u8fd4\u56de\u503c\uff0c\u7f16\u8bd1\u5668\u662f\u80fd\u591f\u68c0\u6d4b\u5230\u7684\u3002\u4f46\u662f\uff0c\u6709\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u65e0\u6cd5\u786e\u5b9a\u51fd\u6570\u662f\u5426\u8fd4\u56de\u503c\u7684\u3002\u6240\u4ee5\u4f60\u4e0d\u5e94\u8be5\u4f9d\u8d56\u7f16\u8bd1\u5668\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u786e\u4fdd\u975e void \u7c7b\u578b\u7684\u51fd\u6570\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u8fd4\u56de\u503c\u3002 \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002","title":"\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u5219\u4f1a\u4ea7\u751f\u672a\u5b9a\u4e49\u884c\u4e3a"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#main-return-0","text":"\u4e0a\u8ff0\u539f\u5219\u6709\u4e00\u4e2a\u7279\u4f8b\uff0c\u90a3\u5c31\u662fmain\u51fd\u6570\u3002main \u51fd\u6570\u5982\u679c\u6ca1\u6709\u4f7f\u7528 return \u8bed\u53e5\u5219\u4f1a\u9690\u5f0f\u5730\u8fd4\u56de 0\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6700\u4f73\u5b9e\u8df5\u4ecd\u7136\u662f\u663e\u5f0f\u5730\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u6837\u65e2\u80fd\u591f\u8868\u660e\u4f60\u7684\u5b9e\u9645\u610f\u56fe\uff0c\u4e5f\u80fd\u591f\u5728\u5f62\u5f0f\u4e0a\u548c\u5176\u4ed6\u51fd\u6570\u4fdd\u6301\u4e00\u81f4(\u53ef\u4ee5\u9884\u9632\u4f60\u5ffd\u7565\u5176\u4ed6\u51fd\u6570\u7684\u8fd4\u56de\u503c)\u3002","title":"main \u51fd\u6570\u5982\u679c\u6ca1\u6709\u4f7f\u7528 return \u8bed\u53e5\u5219\u4f1a\u9690\u5f0f\u5730\u8fd4\u56de 0"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_5","text":"\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4f9d\u6b21\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u5355\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u6ce8\u610f\uff0c return \u8bed\u53e5\u4e2d\u7684\u503c\u4e0d\u4e00\u5b9a\u8981\u7d20\u5b57\u9762\u91cf\u2014\u2014\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5305\u62ec\u53d8\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u5176\u4ed6\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 getValueFromUser() \u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u503c\u662f\u53d8\u91cf input \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u8f93\u5165\u7684\u5b9e\u9645\u503c\u3002 \u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\u662f\u53ef\u4ee5\u7ed5\u8fc7\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u5355\u4e00\u503c\u7684\u9650\u5236\u7684\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u5355\u503c"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_6","text":"\u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u662f\u7531\u51fd\u6570\u7f16\u5199\u8005\u51b3\u5b9a\u7684\u3002\u6709\u4e9b\u51fd\u6570\u4f1a\u5c06\u72b6\u6001\u7801\u4f5c\u4e3a\u8fd4\u56de\u503c\u6765\u8868\u793a\u51fd\u6570\u662f\u5426\u6267\u884c\u6210\u529f\u3002\u6709\u7684\u51fd\u6570\u5219\u5c06\u8ba1\u7b97\u7ed3\u679c\u6216\u5176\u4ed6\u9009\u5b9a\u7684\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u8fd8\u6709\u4e9b\u51fd\u6570\u4ec0\u4e48\u90fd\u4e0d\u8fd4\u56de\uff08\u6211\u4eec\u4f1a\u5728\u4e0b\u4e00\u8282\u8bfe\u4e2d\u4ecb\u7ecd\u6b64\u7c7b\u51fd\u6570\uff09\u3002 \u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u53ef\u80fd\u662f\u5404\u79cd\u5404\u6837\u7684\uff0c\u56e0\u6b64\u901a\u8fc7\u6ce8\u91ca\u7684\u65b9\u5f0f\u5bf9\u51fd\u6570\u8fd4\u56de\u503c\u7684\u542b\u4e49\u8fdb\u884c\u63cf\u8ff0\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 // \u51fd\u6570\u63d0\u793a\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u503c // \u8fd4\u56de\u503c\u662f\u7528\u6237\u4ece\u952e\u76d8\u8f93\u5165\u7684\u503c\uff0c\u6574\u578b int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; // \u5c06\u7528\u6237\u6570\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570 }","title":"\u51fd\u6570\u7684\u7f16\u5199\u8005\u53ef\u4ee5\u51b3\u5b9a\u8fd4\u56de\u503c\u7684\u542b\u4e49"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.02%20%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%20%28%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%87%BD%E6%95%B0%29/#_7","text":"\u63a5\u4e0b\u6765\uff0c\u4ecb\u7ecd\u51fd\u6570\u91cd\u7528\u7684\u5178\u578b\u4f8b\u5b50\uff0c\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> int main () { int x {}; std :: cout << \"Enter an integer: \" ; std :: cin >> x ; int y {}; std :: cout << \"Enter an integer: \" ; std :: cin >> y ; std :: cout << x << \" + \" << y << \" = \" << x + y << '\\n' ; return 0 ; } \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u662f\u4ee3\u7801\u6709\u4e9b\u5197\u4f59\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\u8fdd\u53cd\u4e86\u597d\u4ee3\u7801\u7684\u6838\u5fc3\u4fe1\u6761\uff1a\u4e0d\u8981\u91cd\u590d\u4f60\u81ea\u5df1\u2014\u2014Don\u2019t Repeat Yourself (\u5e38\u5e38\u7f29\u5199\u4e3aDRY)\u3002 \u4e3a\u4ec0\u4e48\u91cd\u590d\u7684\u4ee3\u7801\u662f\u4e0d\u597d\u7684\uff1f\u5982\u679c\u4f60\u60f3\u8981\u5c06\u6587\u672c \u201cEnter an integer:\u201d \u4fee\u6539\u6210\u5176\u4ed6\u5185\u5bb9\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u8981\u4fee\u6539\u4e24\u4e2a\u5730\u65b9\u3002\u5982\u679c\u8981\u521d\u59cb\u5316\u7684\u53d8\u91cf\u670910\u4e2a\u800c\u4e0d\u662f\u4e24\u4e2a\u5462\uff1f\u8fd9\u65e0\u7591\u5c06\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u5197\u4f59\u4ee3\u7801\uff08\u4f7f\u5f97\u7a0b\u5e8f\u53d8\u5f97\u53c8\u957f\u53c8\u96be\u4ee5\u7406\u89e3\uff09\uff0c\u8fd8\u4e3a\u62fc\u5199\u9519\u8bef\u63d0\u4f9b\u4e86\u6ecb\u751f\u7684\u7a7a\u95f4\u3002 \u4e0b\u9762\uff0c\u4f7f\u7528 getValueFromUser \u51fd\u6570\u6765\u91cd\u6784\u4e0a\u8ff0\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } int main () { int x { getValueFromUser () }; // first call to getValueFromUser int y { getValueFromUser () }; // second call to getValueFromUser std :: cout << x << \" + \" << y << \" = \" << x + y << '\\n' ; return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 Enter an integer: 5 Enter an integer: 7 5 + 7 = 12 \u4e0a\u8ff0\u7a0b\u5e8f\u4e2d\uff0c getValueFromUser \u88ab\u8c03\u7528\u4e86\u91cf\u8bcd\uff0c\u4e00\u6b21\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf x \uff0c\u4e00\u6b21\u7528\u4e8e\u521d\u59cb\u5316\u53d8\u91cf y \u3002\u4f7f\u7528\u8be5\u51fd\u6570\u53ef\u4ee5\u6709\u6548\u5730\u907f\u514d\u91cd\u590d\u4ee3\u7801\uff0c\u4e5f\u51cf\u5c11\u4e86\u72af\u9519\u7684\u6982\u7387\u3002\u53ea\u8981 getValueFromUser \u51fd\u6570\u80fd\u591f\u6b63\u786e\u5de5\u4f5c\uff0c\u90a3\u4e48\u4fbf\u53ef\u4ee5\u591a\u6b21\u8c03\u7528\u5b83\u3002 \u8fd9\u4e5f\u662f\u6a21\u5757\u5316\u7f16\u7a0b\u7684\u7cbe\u9ad3\uff1a\u7f16\u5199\u51fd\u6570\u3001\u6d4b\u8bd5\u51fd\u6570\u4ee5\u786e\u4fdd\u5b83\u80fd\u591f\u6b63\u786e\u5de5\u4f5c\uff0c\u7136\u540e\u4fbf\u53ef\u4ee5\u5728\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u4e2d\u53cd\u590d\u4f7f\u7528\u8be5\u51fd\u6570\uff08\u53ea\u8981\u6211\u4eec\u6ca1\u6709\u4fee\u6539\u8fd9\u4e2a\u51fd\u6570\u2014\u2014\u5426\u5219\u5fc5\u987b\u5bf9\u8be5\u51fd\u6570\u91cd\u65b0\u6d4b\u8bd5\uff09\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u8bf7\u9075\u5faaDRY\u539f\u5219\uff0c\u5373\u4e0d\u8981\"\u91cd\u590d\u4f60\u81ea\u5df1\u7684\u5de5\u4f5c\"\u3002\u5982\u679c\u6709\u4ef6\u4e8b\u9700\u8981\u505a\u591a\u6b21\uff0c\u8bf7\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\uff0c\u5c3d\u53ef\u80fd\u79fb\u9664\u5197\u4f59\u7684\u90e8\u5206\u3002\u53d8\u91cf\u53ef\u4ee5\u7528\u6765\u5b58\u653e\u88ab\u8ba1\u7b97\u51fa\u6765\u4e14\u9700\u8981\u591a\u6b21\u4f7f\u7528\u7684\u6570\u636e\uff08\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u91cd\u590d\u8ba1\u7b97\uff09\u3002\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u4e00\u7ec4\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u6267\u884c\u7684\u6307\u4ee4\u3002\u5faa\u73af\uff08\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u4f1a\u4ecb\u7ecd\uff09\u5219\u53ef\u4ee5\u7528\u6765\u591a\u6b21\u6267\u884c\u8bed\u53e5\u3002 [!INFO] \u9898\u5916\u8bdd DRY \u7684\u53cd\u4e49\u8bcd\u662f WET (\u201cWrite everything twice\u201d\u2014\u2014\u4efb\u4f55\u4ee3\u7801\u90fd\u5199\u4e24\u904d).","title":"\u51fd\u6570\u91cd\u7528"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.3 \u2014 Void functions (non-value returning functions) - \u4f5c\u8005\uff1a ALEX - 2022-4-15 2.3 \u2014 Void \u51fd\u6570 (non-value returning functions) \u5728\u4e0a\u8282\u8bfe\u4e2d\uff08[[2.1 \u51fd\u6570\u7b80\u4ecb]]\uff09\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 return-type identifier() // identifier replaced with the name of your function { // Your code here } \u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u4e00\u4e9b\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7684\u51fd\u6570\u7684\u4f8b\u5b50\u4e86\uff0c\u4f46\u662f\u8bfe\u7a0b\u4e2d\u5e76\u672a\u4ecb\u7ecd\u8be5\u7c7b\u578b\u7684\u5177\u4f53\u542b\u4e49\u3002\u5728\u8fd9\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u7814\u7a76\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7684\u51fd\u6570\u3002 \u8fd4\u56de\u7a7a\u503c \u88ab\u8c03\u51fd\u6570\u65e0\u9700\u5411\u4e3b\u8c03\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u800c\u4e3a\u4e86\u5c06\u8be5\u4fe1\u606f\u544a\u77e5\u7f16\u8bd1\u5668\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u9700\u8981\u4f7f\u7528 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void \u8868\u793a\u8be5\u51fd\u6570\u65e0\u9700\u8fd4\u56de\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570 void printHi () { std :: cout << \"Hi\" << '\\n' ; // \u51fd\u6570\u4e0d\u8fd4\u4f1a\u53ea\uff0c\u56e0\u6b64\u4e5f\u65e0\u9700 return \u8bed\u53e5 } int main () { printHi (); // okay: \u51fd\u6570 printHi() \u88ab\u8c03\u7528\uff0c\u65e0\u8fd4\u56de\u503c return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c printHi \u51fd\u6570\u5177\u6709\u5176\u7279\u5b9a\u7684\u529f\u80fd\uff08\u6253\u5370 \"Hi\"\uff09\uff0c\u4f46\u662f\u5b83\u4e0d\u5fc5\u5c06 \u4efb\u4f55\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49 printHi \u51fd\u6570\u65f6\u4f7f\u7528\u4e86 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u3002 \u5f53 main \u51fd\u6570\u8c03\u7528 printHi \u65f6\uff0c printHi \u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u201cHi\u201d \u88ab\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002\u968f\u540e\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u7a0b\u5e8f\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u3002 \u4e0d\u8fd4\u8fd8\u4efb\u4f55\u503c\u7684\u51fd\u6570\uff0c\u79f0\u4e3a\u65e0\u8fd4\u56de\u503c\u51fd\u6570\uff08\u6216\u7a7a\u51fd\u6570\uff09\u3002 Void \u51fd\u6570\u65e0\u9700 return \u8bed\u53e5 \u7a7a\u51fd\u6570\u4f1a\u5728\u51fd\u6570\u7684\u672b\u5c3e\u81ea\u52a8\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u65e0\u9700 return \u8bed\u53e5\u3002 \u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u53ef\u4ee5\u88ab\u7528\u5728 void \u51fd\u6570\u4e2d\u2014\u2014\u8be5\u8bed\u53e5\u6267\u884c\u65f6\u4f1a\u5bfc\u81f4\u8be5\u51fd\u6570\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u8fd9\u548c\u51fd\u6570\u8fd0\u884c\u5230\u7ed3\u5c3e\u65f6\u8fd4\u56de\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64\uff0c\u5c06\u4e00\u4e2a\u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u653e\u5728\u51fd\u6570\u672b\u5c3e\u662f\u591a\u4f59\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void means the function does not return a value to the caller void printHi () { std :: cout << \"Hi\" << '\\n' ; return ; // tell compiler to return to the caller -- this is redundant since this will happen anyway! } // function will return to caller here int main () { printHi (); return 0 ; } [!TIP] \u6700\u4f73\u5b9e\u8df5 \u4e0d\u8981\u5728\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u672b\u5c3e\u6dfb\u52a0 return \u8bed\u53e5\u3002 Void \u51fd\u6570\u4e0d\u80fd\u88ab\u7528\u5728\u9700\u8981\u503c\u7684\u8868\u8fbe\u5f0f \u6709\u4e9b\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u662f\u9700\u8981\u4e00\u4e2a\u503c\u7684\uff0c\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 #include <iostream> int main () { std :: cout << 5 ; // ok: 5 is a literal value that we're sending to the console to be printed std :: cout << ; // compile error: no value provided return 0 ; } \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u6253\u5370\u7684\u5185\u5bb9\u5fc5\u987b\u4f4d\u4e8e std:: cout << \u7684\u53f3\u4fa7\uff0c\u5426\u5219\u7a0b\u5e8f\u5c06\u4f1a\u62a5\u9519\u3002\u56e0\u6b64\uff0c\u7b2c\u4e8c\u5904\u8c03\u7528 std:: cout \u7531\u4e8e\u6ca1\u6709\u53ef\u4ee5\u6253\u5370\u7684\u503c\uff0c\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002 \u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void means the function does not return a value to the caller void printHi () { std :: cout << \"Hi\" << '\\n' ; } int main () { printHi (); // okay: function printHi() is called, no value is returned std :: cout << printHi (); // compile error return 0 ; } printHi() \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff0c\u5176\u4e0a\u4e0b\u6587\u4e0d\u9700\u8981\u4e00\u4e2a\u503c\u3002\u56e0\u6b64\u8be5\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u3002 \u8be5\u51fd\u6570\u7b2c\u4e8c\u6b21\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u662f\u4e0d\u80fd\u6b63\u786e\u7f16\u8bd1\u7684\u3002\u51fd\u6570 printHi \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u51fd\u6570\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u3002\u7136\u800c\uff0c\u8be5\u8bed\u53e5\u5c1d\u8bd5\u5c06 printHi \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f93\u5165 std:: cout \u5e76\u6253\u5370\u3002 std:: cout \u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406\u8be5\u60c5\u51b5\uff08\u4ec0\u4e48\u503c\u9700\u8981\u88ab\u6253\u5370\uff1f\uff09\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u4f60\u5fc5\u987b\u628a\u8fd9\u4e00\u884c\u6ce8\u91ca\u6389\u624d\u80fd\u6b63\u5e38\u7f16\u8bd1\u8be5\u7a0b\u5e8f\u3002 [!TIP] \u5c0f\u8d34\u58eb \u6709\u4e9b\u8bed\u53e5\u9700\u8981\u503c\uff0c\u800c\u6709\u4e9b\u8bed\u53e5\u5219\u4e0d\u9700\u8981\u3002 \u5f53\u72ec\u7acb\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff08\u4f8b\u5982\u4e0a\u4f8b\u4e2d\u7b2c\u4e00\u6b21\u8c03\u7528 printHi() \u51fd\u6570\u65f6\uff09\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u51fd\u6570\u672c\u8eab\u7684\u884c\u4e3a\uff08\u529f\u80fd\uff09\u800c\u4e0d\u662f\u5176\u8fd4\u56de\u503c\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4f46\u5ffd\u7565\u5176\u8fd4\u56de\u503c\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u9700\u8981\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\uff08\u4f8b\u5982 std:: cout \uff09\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u80fd\u4f7f\u7528\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> // Function that does not return a value void returnNothing () { } // Function that returns a value int returnFive () { return 5 ; } int main () { // When calling a function by itself, no value is required returnNothing (); // ok: we can call a function that does not return a value returnFive (); // ok: we can call a function that returns a value, and ignore that return value // When calling a function in a context that requires a value (like std::cout) std :: cout << returnFive (); // ok: we can call a function that returns a value, and the value will be used std :: cout << returnNothing (); // compile error: we can't call a function that returns void in this context return 0 ; } \u4ecevoid\u51fd\u6570\u4e2d\u8fd4\u56de\u503c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519 \u5c1d\u8bd5\u5728\u4e00\u4e2a\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519\uff1a 1 2 3 4 5 6 void printHi () // This function is non-value returning { std :: cout << \"In printHi()\" << '\\n' ; return 5 ; // compile error: we're trying to return a value } \u63d0\u524d\u8fd4\u56de \u5982\u679c\u4e00\u4e2a return \u8bed\u53e5\u51fa\u73b0\u5728\u6700\u540e\u4e00\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u5219\u79f0\u4e3a\u63d0\u524d\u8fd4\u56de\u3002\u8be5return\u8bed\u53e5\u6267\u884c\u65f6\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u76f4\u63a5\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff08\u56e0\u4e3a\u5229\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4f1a\u4ece\u6700\u540e\u4e00\u884c\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u6240\u4ee5\u79f0\u4e3a\u201c\u63d0\u524d\u201d\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> void print () // note: void return type { std :: cout << \"A\" ; return ; // \u51fd\u6570\u5c06\u5728\u8fd9\u884c\u8bed\u53e5\u6267\u884c\u65f6\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570(\u6ce8\u610f\uff1a\u6ca1\u6709\u8fd4\u56de\u503c) std :: cout << \"B\" ; // \u8be5\u884c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c } int main () { print (); return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53 print() \u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u9996\u5148\u6253\u5370A\uff0c\u7136\u540e\u6267\u884creturn\u8bed\u53e5\u5e76\u63a7\u5236\u51fd\u6570\u8fd4\u56de\u5176\u4e3b\u8c03\u51fd\u6570main\u3002B\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u88ab\u6253\u5370\u56e0\u4e3a\u8be5\u884c\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u63d0\u524d\u8fd4\u56de\u4e5f\u9002\u7528\u4e8e\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int print () // note: return type of int { std :: cout << \"A\" ; return 5 ; // the function will return to the caller here std :: cout << \"B\" ; // this will never be printed } int main () { std :: cout << print (); // print() returns value 5, which will be print to the console return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 A5 \u9996\u5148, print() \u88ab\u8c03\u7528\u3002 print() \u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u4f1a\u6253\u5370 \u201cA\u201d\u3002\u7136\u540e return \u8bed\u53e5\u88ab\u6267\u884c\uff0c\u8fd4\u56de\u503c5\u88ab\u4f20\u9012\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u8be5\u503c\u540c\u6837\u88ab\u6253\u5370\u4e86\u51fa\u6765\u3002 std:: cout << \"B\" \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b83\u4e4b\u524d\uff0c\u51fd\u6570\u5df2\u7ecf\u8fd4\u56de\u4e86\u4e3b\u8c03\u51fd\u6570\u3002 \u5386\u53f2\u4e0a\uff0c\u63d0\u524d\u8fd4\u56de\u662f\u4e0d\u53d7\u9f13\u52b1\u7684\u884c\u4e3a\u3002\u4e0d\u8fc7\uff0c\u5728\u73b0\u4ee3\u7f16\u7a0b\u4e2d\uff0c\u5b83\u4eec\u662f\u53ef\u4ee5\u88ab\u63a5\u53d7\u7684\uff0c\u63d0\u524d\u8fd4\u56de\u80fd\u591f\u7b80\u5316\u7a0b\u5e8f\u65f6\uff0c\u6216\u5728\u53d1\u751f\u9519\u8bef\u65f6\u7ec8\u6b62\u51fd\u6570\u540e\u7eed\u7684\u64cd\u4f5c\u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u4f1a\u5728 [[7.10 -- Break and continue]] \u4e2d\u8ba8\u8bba\u6709\u5173\u63d0\u524d\u8fd4\u56de\u7684\u4e89\u8bba\u3002","title":"2.03 Void \u51fd\u6570 (\u65e0\u8fd4\u56de\u503c\u51fd\u6570)"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#23-void-non-value-returning-functions","text":"\u5728\u4e0a\u8282\u8bfe\u4e2d\uff08[[2.1 \u51fd\u6570\u7b80\u4ecb]]\uff09\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u51fd\u6570\u5b9a\u4e49\u7684\u8bed\u6cd5\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a 1 2 3 4 return-type identifier() // identifier replaced with the name of your function { // Your code here } \u5c3d\u7ba1\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u4e00\u4e9b\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7684\u51fd\u6570\u7684\u4f8b\u5b50\u4e86\uff0c\u4f46\u662f\u8bfe\u7a0b\u4e2d\u5e76\u672a\u4ecb\u7ecd\u8be5\u7c7b\u578b\u7684\u5177\u4f53\u542b\u4e49\u3002\u5728\u8fd9\u8282\u8bfe\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u7814\u7a76\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \u7684\u51fd\u6570\u3002","title":"2.3 \u2014 Void \u51fd\u6570 (non-value returning functions)"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#_1","text":"\u88ab\u8c03\u51fd\u6570\u65e0\u9700\u5411\u4e3b\u8c03\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u800c\u4e3a\u4e86\u5c06\u8be5\u4fe1\u606f\u544a\u77e5\u7f16\u8bd1\u5668\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u9700\u8981\u4f7f\u7528 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void \u8868\u793a\u8be5\u51fd\u6570\u65e0\u9700\u8fd4\u56de\u503c\u7ed9\u4e3b\u8c03\u51fd\u6570 void printHi () { std :: cout << \"Hi\" << '\\n' ; // \u51fd\u6570\u4e0d\u8fd4\u4f1a\u53ea\uff0c\u56e0\u6b64\u4e5f\u65e0\u9700 return \u8bed\u53e5 } int main () { printHi (); // okay: \u51fd\u6570 printHi() \u88ab\u8c03\u7528\uff0c\u65e0\u8fd4\u56de\u503c return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c printHi \u51fd\u6570\u5177\u6709\u5176\u7279\u5b9a\u7684\u529f\u80fd\uff08\u6253\u5370 \"Hi\"\uff09\uff0c\u4f46\u662f\u5b83\u4e0d\u5fc5\u5c06 \u4efb\u4f55\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49 printHi \u51fd\u6570\u65f6\u4f7f\u7528\u4e86 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u3002 \u5f53 main \u51fd\u6570\u8c03\u7528 printHi \u65f6\uff0c printHi \u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u201cHi\u201d \u88ab\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002\u968f\u540e\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u7a0b\u5e8f\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u3002 \u4e0d\u8fd4\u8fd8\u4efb\u4f55\u503c\u7684\u51fd\u6570\uff0c\u79f0\u4e3a\u65e0\u8fd4\u56de\u503c\u51fd\u6570\uff08\u6216\u7a7a\u51fd\u6570\uff09\u3002","title":"\u8fd4\u56de\u7a7a\u503c"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#void-return","text":"\u7a7a\u51fd\u6570\u4f1a\u5728\u51fd\u6570\u7684\u672b\u5c3e\u81ea\u52a8\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u65e0\u9700 return \u8bed\u53e5\u3002 \u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u53ef\u4ee5\u88ab\u7528\u5728 void \u51fd\u6570\u4e2d\u2014\u2014\u8be5\u8bed\u53e5\u6267\u884c\u65f6\u4f1a\u5bfc\u81f4\u8be5\u51fd\u6570\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u8fd9\u548c\u51fd\u6570\u8fd0\u884c\u5230\u7ed3\u5c3e\u65f6\u8fd4\u56de\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64\uff0c\u5c06\u4e00\u4e2a\u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u653e\u5728\u51fd\u6570\u672b\u5c3e\u662f\u591a\u4f59\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void means the function does not return a value to the caller void printHi () { std :: cout << \"Hi\" << '\\n' ; return ; // tell compiler to return to the caller -- this is redundant since this will happen anyway! } // function will return to caller here int main () { printHi (); return 0 ; } [!TIP] \u6700\u4f73\u5b9e\u8df5 \u4e0d\u8981\u5728\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u672b\u5c3e\u6dfb\u52a0 return \u8bed\u53e5\u3002","title":"Void \u51fd\u6570\u65e0\u9700 return \u8bed\u53e5"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#void","text":"\u6709\u4e9b\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u662f\u9700\u8981\u4e00\u4e2a\u503c\u7684\uff0c\u4f8b\u5982: 1 2 3 4 5 6 7 8 9 #include <iostream> int main () { std :: cout << 5 ; // ok: 5 is a literal value that we're sending to the console to be printed std :: cout << ; // compile error: no value provided return 0 ; } \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u6253\u5370\u7684\u5185\u5bb9\u5fc5\u987b\u4f4d\u4e8e std:: cout << \u7684\u53f3\u4fa7\uff0c\u5426\u5219\u7a0b\u5e8f\u5c06\u4f1a\u62a5\u9519\u3002\u56e0\u6b64\uff0c\u7b2c\u4e8c\u5904\u8c03\u7528 std:: cout \u7531\u4e8e\u6ca1\u6709\u53ef\u4ee5\u6253\u5370\u7684\u503c\uff0c\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002 \u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // void means the function does not return a value to the caller void printHi () { std :: cout << \"Hi\" << '\\n' ; } int main () { printHi (); // okay: function printHi() is called, no value is returned std :: cout << printHi (); // compile error return 0 ; } printHi() \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff0c\u5176\u4e0a\u4e0b\u6587\u4e0d\u9700\u8981\u4e00\u4e2a\u503c\u3002\u56e0\u6b64\u8be5\u51fd\u6570\u4e0d\u8fd4\u56de\u503c\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u3002 \u8be5\u51fd\u6570\u7b2c\u4e8c\u6b21\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u662f\u4e0d\u80fd\u6b63\u786e\u7f16\u8bd1\u7684\u3002\u51fd\u6570 printHi \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u51fd\u6570\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u3002\u7136\u800c\uff0c\u8be5\u8bed\u53e5\u5c1d\u8bd5\u5c06 printHi \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f93\u5165 std:: cout \u5e76\u6253\u5370\u3002 std:: cout \u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406\u8be5\u60c5\u51b5\uff08\u4ec0\u4e48\u503c\u9700\u8981\u88ab\u6253\u5370\uff1f\uff09\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u4f60\u5fc5\u987b\u628a\u8fd9\u4e00\u884c\u6ce8\u91ca\u6389\u624d\u80fd\u6b63\u5e38\u7f16\u8bd1\u8be5\u7a0b\u5e8f\u3002 [!TIP] \u5c0f\u8d34\u58eb \u6709\u4e9b\u8bed\u53e5\u9700\u8981\u503c\uff0c\u800c\u6709\u4e9b\u8bed\u53e5\u5219\u4e0d\u9700\u8981\u3002 \u5f53\u72ec\u7acb\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff08\u4f8b\u5982\u4e0a\u4f8b\u4e2d\u7b2c\u4e00\u6b21\u8c03\u7528 printHi() \u51fd\u6570\u65f6\uff09\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u51fd\u6570\u672c\u8eab\u7684\u884c\u4e3a\uff08\u529f\u80fd\uff09\u800c\u4e0d\u662f\u5176\u8fd4\u56de\u503c\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4f46\u5ffd\u7565\u5176\u8fd4\u56de\u503c\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u9700\u8981\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\uff08\u4f8b\u5982 std:: cout \uff09\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u80fd\u4f7f\u7528\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> // Function that does not return a value void returnNothing () { } // Function that returns a value int returnFive () { return 5 ; } int main () { // When calling a function by itself, no value is required returnNothing (); // ok: we can call a function that does not return a value returnFive (); // ok: we can call a function that returns a value, and ignore that return value // When calling a function in a context that requires a value (like std::cout) std :: cout << returnFive (); // ok: we can call a function that returns a value, and the value will be used std :: cout << returnNothing (); // compile error: we can't call a function that returns void in this context return 0 ; }","title":"Void \u51fd\u6570\u4e0d\u80fd\u88ab\u7528\u5728\u9700\u8981\u503c\u7684\u8868\u8fbe\u5f0f"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#void_1","text":"\u5c1d\u8bd5\u5728\u4e00\u4e2a\u4e0d\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u503c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519\uff1a 1 2 3 4 5 6 void printHi () // This function is non-value returning { std :: cout << \"In printHi()\" << '\\n' ; return 5 ; // compile error: we're trying to return a value }","title":"\u4ecevoid\u51fd\u6570\u4e2d\u8fd4\u56de\u503c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.03%20Void%20%E5%87%BD%E6%95%B0%20%28%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%29/#_2","text":"\u5982\u679c\u4e00\u4e2a return \u8bed\u53e5\u51fa\u73b0\u5728\u6700\u540e\u4e00\u884c\u4ee3\u7801\u4e4b\u524d\uff0c\u5219\u79f0\u4e3a\u63d0\u524d\u8fd4\u56de\u3002\u8be5return\u8bed\u53e5\u6267\u884c\u65f6\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u76f4\u63a5\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff08\u56e0\u4e3a\u5229\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4f1a\u4ece\u6700\u540e\u4e00\u884c\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570\uff0c\u6240\u4ee5\u79f0\u4e3a\u201c\u63d0\u524d\u201d\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> void print () // note: void return type { std :: cout << \"A\" ; return ; // \u51fd\u6570\u5c06\u5728\u8fd9\u884c\u8bed\u53e5\u6267\u884c\u65f6\u8fd4\u56de\u4e3b\u8c03\u51fd\u6570(\u6ce8\u610f\uff1a\u6ca1\u6709\u8fd4\u56de\u503c) std :: cout << \"B\" ; // \u8be5\u884c\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c } int main () { print (); return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53 print() \u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u9996\u5148\u6253\u5370A\uff0c\u7136\u540e\u6267\u884creturn\u8bed\u53e5\u5e76\u63a7\u5236\u51fd\u6570\u8fd4\u56de\u5176\u4e3b\u8c03\u51fd\u6570main\u3002B\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u88ab\u6253\u5370\u56e0\u4e3a\u8be5\u884c\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u63d0\u524d\u8fd4\u56de\u4e5f\u9002\u7528\u4e8e\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int print () // note: return type of int { std :: cout << \"A\" ; return 5 ; // the function will return to the caller here std :: cout << \"B\" ; // this will never be printed } int main () { std :: cout << print (); // print() returns value 5, which will be print to the console return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 A5 \u9996\u5148, print() \u88ab\u8c03\u7528\u3002 print() \u7684\u7b2c\u4e00\u6761\u8bed\u53e5\u4f1a\u6253\u5370 \u201cA\u201d\u3002\u7136\u540e return \u8bed\u53e5\u88ab\u6267\u884c\uff0c\u8fd4\u56de\u503c5\u88ab\u4f20\u9012\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u8be5\u503c\u540c\u6837\u88ab\u6253\u5370\u4e86\u51fa\u6765\u3002 std:: cout << \"B\" \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b83\u4e4b\u524d\uff0c\u51fd\u6570\u5df2\u7ecf\u8fd4\u56de\u4e86\u4e3b\u8c03\u51fd\u6570\u3002 \u5386\u53f2\u4e0a\uff0c\u63d0\u524d\u8fd4\u56de\u662f\u4e0d\u53d7\u9f13\u52b1\u7684\u884c\u4e3a\u3002\u4e0d\u8fc7\uff0c\u5728\u73b0\u4ee3\u7f16\u7a0b\u4e2d\uff0c\u5b83\u4eec\u662f\u53ef\u4ee5\u88ab\u63a5\u53d7\u7684\uff0c\u63d0\u524d\u8fd4\u56de\u80fd\u591f\u7b80\u5316\u7a0b\u5e8f\u65f6\uff0c\u6216\u5728\u53d1\u751f\u9519\u8bef\u65f6\u7ec8\u6b62\u51fd\u6570\u540e\u7eed\u7684\u64cd\u4f5c\u3002 [!INFO] \u76f8\u5173\u5185\u5bb9 \u6211\u4eec\u4f1a\u5728 [[7.10 -- Break and continue]] \u4e2d\u8ba8\u8bba\u6709\u5173\u63d0\u524d\u8fd4\u56de\u7684\u4e89\u8bba\u3002","title":"\u63d0\u524d\u8fd4\u56de"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.4 \u2014 Introduction to function parameters and arguments - \u4f5c\u8005\uff1a ALEX - 2022-4-15 2.4 \u2014 \u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2 \u5728\u4e4b\u524d\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u51fd\u6570\u53ef\u4ee5\u5c06\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86 getValueFromUser \u51fd\u6570\u5e76\u7528\u4e8e\u4e0b\u9762\u8fd9\u6bb5\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } int main () { int num { getValueFromUser () }; std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u8f93\u51fa\u8bed\u53e5\u4e5f\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\u5462\uff1f\u4f60\u53ef\u80fd\u5e0c\u671b\u8fd9\u4e48\u505a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } // \u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u7f16\u8bd1 void printDouble () { std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; } int main () { int num { getValueFromUser () }; printDouble (); return 0 ; } \u8fd9\u6bb5\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u6b63\u786e\u7f16\u8bd1\uff0c\u56e0\u4e3a printDouble \u5e76\u4e0d\u77e5\u9053 num \u662f\u4ec0\u4e48\u3002\u6b64\u65f6\u4f60\u6216\u8bb8\u4f1a\u5728 printDouble() \u4e2d\u5b9a\u4e49 num \uff1a 1 2 3 4 5 void printDouble () { int num {}; // \u6dfb\u52a0\u6b64\u884c std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; } \u5c3d\u7ba1\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u7f16\u8bd1\u5668\u62a5\u9519\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u6210\u529f\u7f16\u8bd1\uff0c\u4f46\u8be5\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u5e76\u4e0d\u6b63\u786e\uff08\u59cb\u7ec8\u4f1a\u6253\u5370\uff1a\u201c0 doubled is: 0\u201d\uff09\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u6839\u672c\u539f\u56e0\u662f printDouble \u65e0\u6cd5\u8bbf\u95ee\u7528\u6237\u7684\u8f93\u5165\u7ed3\u679c\u3002 \u6211\u4eec\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff0c\u5c06\u53d8\u91cf\u4f20\u9012\u5230 printDouble \u51fd\u6570\u5185\u90e8\uff0c\u4f7f\u5176\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u8be5\u53d8\u91cf\u3002 \u51fd\u6570\u5f62\u53c2\u548c\u5b9e\u53c2 \u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u8c03\u7528\u51fd\u6570\u65f6\u5c06\u4fe1\u606f\u4e00\u5e76\u4f20\u5165\uff0c\u8fd9\u6837\u8be5\u51fd\u6570\u5c31\u53ef\u4ee5\u57fa\u4e8e\u6b64\u6570\u636e\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u4e24\u6570\u548c\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u6709\u529e\u6cd5\u544a\u8bc9\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u544a\u8bc9\u51fd\u6570\u9700\u8981\u76f8\u52a0\u7684\u4e24\u4e2a\u6570\u3002 \u5426\u5219\uff0c\u51fd\u6570\u5982\u4f55\u624d\u80fd\u77e5\u9053\u8981\u5c06\u4ec0\u4e48\u76f8\u52a0\u5462\uff1f\u901a\u8fc7\u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u548c[[\u5b9e\u53c2(arguments)]]\u53ef\u4ee5\u5b8c\u6210\u4e0a\u8ff0\u5de5\u4f5c\u3002 \u51fd\u6570\u7684 \u5f62\u53c2 \u662f\u80fd\u591f\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u7684\u53d8\u91cf\u3002\u5f62\u53c2\u548c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u51e0\u4e4e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u9664\u4e86\uff1a\u5f62\u53c2\u603b\u662f\u7531\u4e3b\u8c03\u51fd\u6570\u521d\u59cb\u5316\u5e76\u63d0\u4f9b\u7ed9\u88ab\u8c03\u51fd\u6570\u3002 \u51fd\u6570\u7684\u5f62\u53c2\u662f\u5728\u51fd\u6570\u58f0\u660e\u65f6\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u4f4d\u4e8e\u51fd\u6570\u540d\u540e\u7684\u62ec\u53f7\u4e2d\uff0c\u591a\u4e2a\u5f62\u53c2\u5219\u7531\u9017\u53f7\u9694\u5f00\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c55\u793a\u4e86\u5305\u542b\u4e0d\u540c\u6570\u91cf\u5f62\u53c2\u7684\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u51fd\u6570\u6ca1\u6709\u53c2\u6570 // \u4e0d\u4f9d\u8d56\u4e0e\u4e3b\u8c03\u51fd\u6570\u63d0\u4f9b\u4efb\u4f55\u503c void doPrint () { std :: cout << \"In doPrint() \\n \" ; } // \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u540d\u4e3a x \u7684\u6574\u578b\u53c2\u6570 // \u4e3b\u8c03\u51fd\u6570\u9700\u8981\u63d0\u4f9b x \u7684\u503c void printValue ( int x ) { std :: cout << x << '\\n' ; } // \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u540d\u4e3a x\uff0c\u4e00\u4e2a\u540d\u4e3a y // \u4e3b\u8c03\u51fd\u6570\u5fc5\u987b\u63d0\u4f9b x \u548c y \u7684\u503c int add ( int x , int y ) { return x + y ; } \u5b9e\u53c2 \u6307\u7684\u662f\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u4e3b\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u88ab\u8c03\u51fd\u6570\u7684\u503c\uff1a 1 2 3 doPrint (); // \u6ca1\u6709\u5b9e\u53c2 printValue ( 6 ); // 6 \u662f\u4f20\u9012\u7ed9 printValue() \u7684\u5b9e\u53c2 add ( 2 , 3 ); // 2 \u548c 3 \u662f\u4f20\u9012\u7ed9 add() \u7684\u5b9e\u53c2 \u6ce8\u610f\uff0c\u591a\u4e2a\u5b9e\u53c2\u4ecd\u7136\u7531\u9017\u53f7\u8fdb\u884c\u5206\u5272\u3002 \u5f62\u53c2\u548c\u5b9e\u53c2\u662f\u5982\u4f55\u534f\u540c\u5de5\u4f5c\u7684 \u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u6240\u6709\u7684\u5f62\u53c2\u90fd\u88ab\u5f53\u505a\u53d8\u91cf\u521b\u5efa\uff0c\u7136\u540e\u6240\u6709\u7684\u5b9e\u53c2\u90fd\u88ab\u62f7\u8d1d\u5230\u5bf9\u5e94\u7684\u5f62\u53c2\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a[[\u6309\u503c\u4f20\u9012(pass by value)]]\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // This function has two integer parameters, one named x, and one named y // The values of x and y are passed in by the caller void printValues ( int x , int y ) { std :: cout << x << '\\n' ; std :: cout << y << '\\n' ; } int main () { printValues ( 6 , 7 ); // This function call has two arguments, 6 and 7 return 0 ; } \u5f53 printValues \u51fd\u6570\u4f7f\u7528\u5b9e\u53c2 6 \u548c 7 \u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u5f62\u53c2 x \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff0c\u5f62\u53c2 y \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 7\u3002 \u4e0a\u8ff0\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 6 7 \u6ce8\u610f\uff0c\u5b9e\u53c2\u7684\u4e2a\u6570\u5fc5\u987b\u548c\u5f62\u53c2\u7684\u4e2a\u6570\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u5c31\u4f1a\u62a5\u9519\u3002\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5b9e\u53c2\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\uff08\u56e0\u4e3a\u5b9e\u53c2\u672c\u8d28\u4e0a\u53ea\u662f\u5f62\u53c2\u7684\u521d\u59cb\u5316\u503c\uff0c\u800c\u521d\u59cb\u5316\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u8868\u8fbe\u5f0f\uff09\u3002 \u4fee\u6b63\u9519\u8bef\u7684\u7a0b\u5e8f \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6b63\u672c\u8282\u8bfe\u5f00\u5934\u7684\u7a0b\u5e8f\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } void printDouble ( int value ) // \u51fd\u6570\u73b0\u5728\u6709\u4e00\u4e2a\u6574\u578b\u7684\u5f62\u53c2 { std :: cout << value << \" doubled is: \" << value * 2 << '\\n' ; } int main () { int num { getValueFromUser () }; printDouble ( num ); return 0 ; } \u5728\u4e0a\u8ff0\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf num \u9996\u5148\u88ab\u521d\u59cb\u5316\u4e3a\u7528\u6237\u8f93\u5165\u7684\u503c\u3002\u7136\u540e\u51fd\u6570 printDouble \u88ab\u8c03\u7528\uff0c\u5b9e\u53c2 num \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2\u3002\u51fd\u6570 printDouble \u968f\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u5f62\u53c2\u7684\u503c\u3002 \u4f7f\u7528\u8fd4\u56de\u503c\u4f5c\u4e3a\u5b9e\u53c2 \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf num \u53ea\u88ab\u4f7f\u7528\u4e86\u4e00\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 getValueFromUser \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a printDouble \u7684\u5b9e\u53c2\uff0c\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u52a0\u7b80\u5316\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } void printDouble ( int value ) { std :: cout << value << \" doubled is: \" << value * 2 << '\\n' ; } int main () { printDouble ( getValueFromUser ()); return 0 ; } \u73b0\u5728\uff0c\u6211\u4eec\u4f7f\u7528 getValueFromUser \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u4e86 printDouble \u7684\u5b9e\u53c2\u3002 \u5c3d\u7ba1\u8fd9\u4e2a\u7a0b\u5e8f\u53d8\u5f97\u66f4\u52a0\u7cbe\u7b80\u4e86\uff08\u800c\u4e14\u4e5f\u5f88\u6e05\u695a\u7684\u8868\u660e\u7528\u6237\u7684\u8f93\u5165\u4ec5\u4ec5\u88ab\u7528\u4e8e\u8fdb\u884c\u8ba1\u7b97\uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u8bb8\u4e5f\u4f1a\u51b3\u5b9a\u8fd9\u79cd\u201c\u538b\u7f29\u8bed\u6cd5\u201d\u53ef\u8bfb\u6027\u5e76\u4e0d\u4f1a\u3002\u5982\u679c\u4f60\u89c9\u5f97\u4e4b\u524d\u7684\u7248\u672c\u66f4\u52a0\u6613\u8bfb\uff0c\u90a3\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u5f62\u53c2\u548c\u8fd4\u56de\u503c\u662f\u5982\u4f55\u534f\u540c\u5de5\u4f5c\u7684 \u901a\u8fc7\u4e00\u8d77\u4f7f\u7528\u5f62\u53c2\u548c\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u53d7\u67d0\u4e9b\u6570\u636e\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u901a\u8fc7\u8fd4\u56de\u503c\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u51fd\u6570\u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u548c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> // add() takes two integers as parameters, and returns the result of their sum // The values of x and y are determined by the function that calls add() int add ( int x , int y ) { return x + y ; } // main takes no parameters int main () { std :: cout << add ( 4 , 5 ) << '\\n' ; // Arguments 4 and 5 are passed to function add() return 0 ; } \u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u5f53 add(4,5) \u8bed\u53e5\u6c42\u503c\u65f6\uff0c\u51fd\u6570 add \u88ab\u8c03\u7528\uff0c\u5176\u5f62\u53c2 x \u88ab\u521d\u59cb\u5316\u4e3a 4\uff0c\u5f62\u53c2 y \u88ab\u521d\u59cb\u5316\u4e3a 5\u3002 \u51fd\u6570\u7684 return \u8bed\u53e5\u5bf9 x+y \u8fdb\u884c\u4e86\u6c42\u503c\u5e76\u5f97\u5230\u7ed3\u679c 9\uff0c\u8be5\u503c\u968f\u540e\u88ab\u8fd4\u56de\u7ed9 main \u51fd\u6570\u3002\u7136\u540e 9 \u5c31\u88ab\u8f93\u5165 std:: cout \u5e76\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8f93\u51fa\u7ed3\u679c\uff1a 1 9 \u56fe\u89e3\uff1a \u66f4\u591a\u4f8b\u5b50 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u66f4\u591a\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> int add ( int x , int y ) { return x + y ; } int multiply ( int z , int w ) { return z * w ; } int main () { std :: cout << add ( 4 , 5 ) << '\\n' ; // within add() x=4, y=5, so x+y=9 std :: cout << add ( 1 + 2 , 3 * 4 ) << '\\n' ; // within add() x=3, y=12, so x+y=15 int a { 5 }; std :: cout << add ( a , a ) << '\\n' ; // evaluates (5 + 5) std :: cout << add ( 1 , multiply ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 * 3) std :: cout << add ( 1 , add ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 + 3) return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 9 15 10 7 6 \u7b2c\u4e00\u884c\u8bed\u53e5\u975e\u5e38\u76f4\u767d\u3002 \u7b2c\u4e8c\u884c\u8bed\u53e5\uff0c\u4f5c\u4e3a\u5b9e\u53c2\u7684\u8868\u8fbe\u5f0f\u5728\u4f20\u9012\u524d\u9996\u5148\u8fdb\u884c\u6c42\u503c\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c 1 + 2 \u6c42\u503c\u5f97\u5230 3 \uff0c\u6240\u4ee5 3 \u500d\u62f7\u8d1d\u5230\u5f62\u53c2 x\u3002 3 * 4 \u6c42\u503c\u5f97\u5230 12 \uff0c\u56e0\u6b64 12 \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2 y\u3002 add(3,12) \u7684\u7ed3\u679c\u4e3a 15 \u3002 \u63a5\u4e0b\u6765\u7684\u4e24\u884c\u8bed\u53e5\u4e5f\u6bd4\u8f83\u7b80\u5355\uff1a 1 2 int a { 5 }; std :: cout << add ( a , a ) << '\\n' ; // evaluates (5 + 5) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c add() \u53d8\u91cf a \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2 x \u548c y\u3002\u7531\u4e8e a \u7684\u503c\u4e3a 5\uff0c\u5219 add(a, a) = add(5,5) \uff0c\u5176\u8ba1\u7b97\u7ed3\u679c\u4e3a 10\u3002 \u63a5\u4e0b\u6765\u662f\u8fd9\u4e00\u7cfb\u5217\u8bed\u53e5\u4e2d\u6700\u590d\u6742\u7684\u4e00\u6761\uff1a 1 std :: cout << add ( 1 , multiply ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 * 3) \u5f53\u51fd\u6570 add \u6267\u884c\u65f6\uff0c \u7a0b\u5e8f\u5fc5\u987b\u8981\u786e\u5b9a\u5176\u5f62\u53c2 x \u548c y\u3002x \u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u5c31\u662f 1\u3002\u800c\u4e3a\u4e86\u83b7\u53d6\u5f62\u53c2 y \u7684\u503c\uff0c\u7a0b\u5e8f\u5fc5\u987b\u8981\u5bf9 multiply(2,3) \u8fdb\u884c\u6c42\u503c\u3002\u4e3a\u6b64\uff0c\u7a0b\u5e8f\u9996\u5148\u8c03\u7528 multiply \u51fd\u6570\u5e76\u5c06 z \u521d\u59cb\u5316\u4e3a 2\uff0cw \u521d\u59cb\u5316\u4e3a 3\uff0c\u56e0\u6b64 multiply(2,3) \u8fd4\u56de\u503c\u4e3a 6\u3002\u8be5\u503c\u968f\u540e\u88ab\u7528\u6765\u521d\u59cb\u5316 add \u51fd\u6570\u7684\u5f62\u53c2 y\u3002 add(1,6) \u7684\u8fd4\u56de\u503c\u4e3a 7\uff0c\u8be5\u503c\u88ab\u4f20\u9012\u7ed9 std:: cout \u7528\u4e8e\u6253\u5370\u3002 \u7b80\u5355\u6765\u8bf4\uff1a add(1, multiply(2,3)) \u6c42\u503c\u5f97\u5230 add(1,6) \uff0c\u8fdb\u800c\u6c42\u503c\u5f97\u5230 7 \u4e0b\u9762\u7684\u8bed\u53e5\u770b\u4e0a\u53bb\u6709\u70b9\u7ed5\uff0c\u56e0\u4e3a add \u51fd\u6570\u7684\u4e00\u4e2a\u5b9e\u53c2\uff0c\u5176\u503c\u6765\u81ea\u4e8e\u53e6\u5916\u4e00\u4e2a add \u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 1 std :: cout << add ( 1 , add ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 + 3) \u4e0d\u8fc7\uff0c\u5176\u5b9e\u5b83\u548c\u524d\u4e00\u4e2a\u4f8b\u5b50\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c add(2,3) \u9996\u5148\u6c42\u503c\uff0c\u8fd4\u56de\u503c\u4e3a 5\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9 add(1,5) \u8fdb\u884c\u6c42\u503c\uff0c\u5176\u7ed3\u679c\u4e3a 6\uff0c\u8be5\u503c\u88ab\u4f20\u9012\u7ed9 std:: cout \u7528\u4e8e\u6253\u5370\u3002 \u7b80\u5355\u6765\u8bf4\uff1a add(1, add(2,3)) \u6c42\u503c\u5f97\u5230 add(1,5) \uff0c\u7ee7\u7eed\u6c42\u503c\u5f97\u5230 6\u3002 \u7ed3\u8bba \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u662f\u51fd\u6570\u80fd\u591f\u88ab\u91cd\u7528\u7684\u5173\u952e\u673a\u5236\uff0c\u56e0\u4e3a\u8be5\u673a\u5236\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u6307\u5b9a\u5177\u4f53\u503c\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u51fd\u6570\u83b7\u53d6\u6216\u8ba1\u7b97\u6570\u636e\u5e76\u5c06\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002","title":"2.04 \u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#24","text":"\u5728\u4e4b\u524d\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u51fd\u6570\u53ef\u4ee5\u5c06\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u57fa\u4e8e\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86 getValueFromUser \u51fd\u6570\u5e76\u7528\u4e8e\u4e0b\u9762\u8fd9\u6bb5\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } int main () { int num { getValueFromUser () }; std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; return 0 ; } \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u8f93\u51fa\u8bed\u53e5\u4e5f\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\u5462\uff1f\u4f60\u53ef\u80fd\u5e0c\u671b\u8fd9\u4e48\u505a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } // \u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u7f16\u8bd1 void printDouble () { std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; } int main () { int num { getValueFromUser () }; printDouble (); return 0 ; } \u8fd9\u6bb5\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u6b63\u786e\u7f16\u8bd1\uff0c\u56e0\u4e3a printDouble \u5e76\u4e0d\u77e5\u9053 num \u662f\u4ec0\u4e48\u3002\u6b64\u65f6\u4f60\u6216\u8bb8\u4f1a\u5728 printDouble() \u4e2d\u5b9a\u4e49 num \uff1a 1 2 3 4 5 void printDouble () { int num {}; // \u6dfb\u52a0\u6b64\u884c std :: cout << num << \" doubled is: \" << num * 2 << '\\n' ; } \u5c3d\u7ba1\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u7f16\u8bd1\u5668\u62a5\u9519\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u6210\u529f\u7f16\u8bd1\uff0c\u4f46\u8be5\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u5e76\u4e0d\u6b63\u786e\uff08\u59cb\u7ec8\u4f1a\u6253\u5370\uff1a\u201c0 doubled is: 0\u201d\uff09\u3002\u8fd9\u4e2a\u95ee\u9898\u7684\u6839\u672c\u539f\u56e0\u662f printDouble \u65e0\u6cd5\u8bbf\u95ee\u7528\u6237\u7684\u8f93\u5165\u7ed3\u679c\u3002 \u6211\u4eec\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff0c\u5c06\u53d8\u91cf\u4f20\u9012\u5230 printDouble \u51fd\u6570\u5185\u90e8\uff0c\u4f7f\u5176\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u8be5\u53d8\u91cf\u3002","title":"2.4 \u2014 \u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_1","text":"\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u8c03\u7528\u51fd\u6570\u65f6\u5c06\u4fe1\u606f\u4e00\u5e76\u4f20\u5165\uff0c\u8fd9\u6837\u8be5\u51fd\u6570\u5c31\u53ef\u4ee5\u57fa\u4e8e\u6b64\u6570\u636e\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u4e24\u6570\u548c\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u6709\u529e\u6cd5\u544a\u8bc9\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u544a\u8bc9\u51fd\u6570\u9700\u8981\u76f8\u52a0\u7684\u4e24\u4e2a\u6570\u3002 \u5426\u5219\uff0c\u51fd\u6570\u5982\u4f55\u624d\u80fd\u77e5\u9053\u8981\u5c06\u4ec0\u4e48\u76f8\u52a0\u5462\uff1f\u901a\u8fc7\u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u548c[[\u5b9e\u53c2(arguments)]]\u53ef\u4ee5\u5b8c\u6210\u4e0a\u8ff0\u5de5\u4f5c\u3002 \u51fd\u6570\u7684 \u5f62\u53c2 \u662f\u80fd\u591f\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u7684\u53d8\u91cf\u3002\u5f62\u53c2\u548c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u51e0\u4e4e\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u9664\u4e86\uff1a\u5f62\u53c2\u603b\u662f\u7531\u4e3b\u8c03\u51fd\u6570\u521d\u59cb\u5316\u5e76\u63d0\u4f9b\u7ed9\u88ab\u8c03\u51fd\u6570\u3002 \u51fd\u6570\u7684\u5f62\u53c2\u662f\u5728\u51fd\u6570\u58f0\u660e\u65f6\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u4f4d\u4e8e\u51fd\u6570\u540d\u540e\u7684\u62ec\u53f7\u4e2d\uff0c\u591a\u4e2a\u5f62\u53c2\u5219\u7531\u9017\u53f7\u9694\u5f00\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c55\u793a\u4e86\u5305\u542b\u4e0d\u540c\u6570\u91cf\u5f62\u53c2\u7684\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u51fd\u6570\u6ca1\u6709\u53c2\u6570 // \u4e0d\u4f9d\u8d56\u4e0e\u4e3b\u8c03\u51fd\u6570\u63d0\u4f9b\u4efb\u4f55\u503c void doPrint () { std :: cout << \"In doPrint() \\n \" ; } // \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u540d\u4e3a x \u7684\u6574\u578b\u53c2\u6570 // \u4e3b\u8c03\u51fd\u6570\u9700\u8981\u63d0\u4f9b x \u7684\u503c void printValue ( int x ) { std :: cout << x << '\\n' ; } // \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u540d\u4e3a x\uff0c\u4e00\u4e2a\u540d\u4e3a y // \u4e3b\u8c03\u51fd\u6570\u5fc5\u987b\u63d0\u4f9b x \u548c y \u7684\u503c int add ( int x , int y ) { return x + y ; } \u5b9e\u53c2 \u6307\u7684\u662f\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u4e3b\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u88ab\u8c03\u51fd\u6570\u7684\u503c\uff1a 1 2 3 doPrint (); // \u6ca1\u6709\u5b9e\u53c2 printValue ( 6 ); // 6 \u662f\u4f20\u9012\u7ed9 printValue() \u7684\u5b9e\u53c2 add ( 2 , 3 ); // 2 \u548c 3 \u662f\u4f20\u9012\u7ed9 add() \u7684\u5b9e\u53c2 \u6ce8\u610f\uff0c\u591a\u4e2a\u5b9e\u53c2\u4ecd\u7136\u7531\u9017\u53f7\u8fdb\u884c\u5206\u5272\u3002","title":"\u51fd\u6570\u5f62\u53c2\u548c\u5b9e\u53c2"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_2","text":"\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u6240\u6709\u7684\u5f62\u53c2\u90fd\u88ab\u5f53\u505a\u53d8\u91cf\u521b\u5efa\uff0c\u7136\u540e\u6240\u6709\u7684\u5b9e\u53c2\u90fd\u88ab\u62f7\u8d1d\u5230\u5bf9\u5e94\u7684\u5f62\u53c2\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a[[\u6309\u503c\u4f20\u9012(pass by value)]]\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> // This function has two integer parameters, one named x, and one named y // The values of x and y are passed in by the caller void printValues ( int x , int y ) { std :: cout << x << '\\n' ; std :: cout << y << '\\n' ; } int main () { printValues ( 6 , 7 ); // This function call has two arguments, 6 and 7 return 0 ; } \u5f53 printValues \u51fd\u6570\u4f7f\u7528\u5b9e\u53c2 6 \u548c 7 \u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u5f62\u53c2 x \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff0c\u5f62\u53c2 y \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 7\u3002 \u4e0a\u8ff0\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 6 7 \u6ce8\u610f\uff0c\u5b9e\u53c2\u7684\u4e2a\u6570\u5fc5\u987b\u548c\u5f62\u53c2\u7684\u4e2a\u6570\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u5c31\u4f1a\u62a5\u9519\u3002\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5b9e\u53c2\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\uff08\u56e0\u4e3a\u5b9e\u53c2\u672c\u8d28\u4e0a\u53ea\u662f\u5f62\u53c2\u7684\u521d\u59cb\u5316\u503c\uff0c\u800c\u521d\u59cb\u5316\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u8868\u8fbe\u5f0f\uff09\u3002","title":"\u5f62\u53c2\u548c\u5b9e\u53c2\u662f\u5982\u4f55\u534f\u540c\u5de5\u4f5c\u7684"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_3","text":"\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6b63\u672c\u8282\u8bfe\u5f00\u5934\u7684\u7a0b\u5e8f\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } void printDouble ( int value ) // \u51fd\u6570\u73b0\u5728\u6709\u4e00\u4e2a\u6574\u578b\u7684\u5f62\u53c2 { std :: cout << value << \" doubled is: \" << value * 2 << '\\n' ; } int main () { int num { getValueFromUser () }; printDouble ( num ); return 0 ; } \u5728\u4e0a\u8ff0\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf num \u9996\u5148\u88ab\u521d\u59cb\u5316\u4e3a\u7528\u6237\u8f93\u5165\u7684\u503c\u3002\u7136\u540e\u51fd\u6570 printDouble \u88ab\u8c03\u7528\uff0c\u5b9e\u53c2 num \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2\u3002\u51fd\u6570 printDouble \u968f\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u5f62\u53c2\u7684\u503c\u3002","title":"\u4fee\u6b63\u9519\u8bef\u7684\u7a0b\u5e8f"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_4","text":"\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf num \u53ea\u88ab\u4f7f\u7528\u4e86\u4e00\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 getValueFromUser \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a printDouble \u7684\u5b9e\u53c2\uff0c\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u52a0\u7b80\u5316\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <iostream> int getValueFromUser () { std :: cout << \"Enter an integer: \" ; int input {}; std :: cin >> input ; return input ; } void printDouble ( int value ) { std :: cout << value << \" doubled is: \" << value * 2 << '\\n' ; } int main () { printDouble ( getValueFromUser ()); return 0 ; } \u73b0\u5728\uff0c\u6211\u4eec\u4f7f\u7528 getValueFromUser \u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u4e86 printDouble \u7684\u5b9e\u53c2\u3002 \u5c3d\u7ba1\u8fd9\u4e2a\u7a0b\u5e8f\u53d8\u5f97\u66f4\u52a0\u7cbe\u7b80\u4e86\uff08\u800c\u4e14\u4e5f\u5f88\u6e05\u695a\u7684\u8868\u660e\u7528\u6237\u7684\u8f93\u5165\u4ec5\u4ec5\u88ab\u7528\u4e8e\u8fdb\u884c\u8ba1\u7b97\uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u8bb8\u4e5f\u4f1a\u51b3\u5b9a\u8fd9\u79cd\u201c\u538b\u7f29\u8bed\u6cd5\u201d\u53ef\u8bfb\u6027\u5e76\u4e0d\u4f1a\u3002\u5982\u679c\u4f60\u89c9\u5f97\u4e4b\u524d\u7684\u7248\u672c\u66f4\u52a0\u6613\u8bfb\uff0c\u90a3\u4e5f\u662f\u53ef\u4ee5\u7684\u3002","title":"\u4f7f\u7528\u8fd4\u56de\u503c\u4f5c\u4e3a\u5b9e\u53c2"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_5","text":"\u901a\u8fc7\u4e00\u8d77\u4f7f\u7528\u5f62\u53c2\u548c\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u53d7\u67d0\u4e9b\u6570\u636e\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u901a\u8fc7\u8fd4\u56de\u503c\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u51fd\u6570\u8ba1\u7b97\u4e24\u4e2a\u503c\u7684\u548c\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> // add() takes two integers as parameters, and returns the result of their sum // The values of x and y are determined by the function that calls add() int add ( int x , int y ) { return x + y ; } // main takes no parameters int main () { std :: cout << add ( 4 , 5 ) << '\\n' ; // Arguments 4 and 5 are passed to function add() return 0 ; } \u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff0c\u5f53 add(4,5) \u8bed\u53e5\u6c42\u503c\u65f6\uff0c\u51fd\u6570 add \u88ab\u8c03\u7528\uff0c\u5176\u5f62\u53c2 x \u88ab\u521d\u59cb\u5316\u4e3a 4\uff0c\u5f62\u53c2 y \u88ab\u521d\u59cb\u5316\u4e3a 5\u3002 \u51fd\u6570\u7684 return \u8bed\u53e5\u5bf9 x+y \u8fdb\u884c\u4e86\u6c42\u503c\u5e76\u5f97\u5230\u7ed3\u679c 9\uff0c\u8be5\u503c\u968f\u540e\u88ab\u8fd4\u56de\u7ed9 main \u51fd\u6570\u3002\u7136\u540e 9 \u5c31\u88ab\u8f93\u5165 std:: cout \u5e76\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8f93\u51fa\u7ed3\u679c\uff1a 1 9 \u56fe\u89e3\uff1a","title":"\u5f62\u53c2\u548c\u8fd4\u56de\u503c\u662f\u5982\u4f55\u534f\u540c\u5de5\u4f5c\u7684"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_6","text":"\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u66f4\u591a\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <iostream> int add ( int x , int y ) { return x + y ; } int multiply ( int z , int w ) { return z * w ; } int main () { std :: cout << add ( 4 , 5 ) << '\\n' ; // within add() x=4, y=5, so x+y=9 std :: cout << add ( 1 + 2 , 3 * 4 ) << '\\n' ; // within add() x=3, y=12, so x+y=15 int a { 5 }; std :: cout << add ( a , a ) << '\\n' ; // evaluates (5 + 5) std :: cout << add ( 1 , multiply ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 * 3) std :: cout << add ( 1 , add ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 + 3) return 0 ; } \u4e0a\u8ff0\u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 9 15 10 7 6 \u7b2c\u4e00\u884c\u8bed\u53e5\u975e\u5e38\u76f4\u767d\u3002 \u7b2c\u4e8c\u884c\u8bed\u53e5\uff0c\u4f5c\u4e3a\u5b9e\u53c2\u7684\u8868\u8fbe\u5f0f\u5728\u4f20\u9012\u524d\u9996\u5148\u8fdb\u884c\u6c42\u503c\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c 1 + 2 \u6c42\u503c\u5f97\u5230 3 \uff0c\u6240\u4ee5 3 \u500d\u62f7\u8d1d\u5230\u5f62\u53c2 x\u3002 3 * 4 \u6c42\u503c\u5f97\u5230 12 \uff0c\u56e0\u6b64 12 \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2 y\u3002 add(3,12) \u7684\u7ed3\u679c\u4e3a 15 \u3002 \u63a5\u4e0b\u6765\u7684\u4e24\u884c\u8bed\u53e5\u4e5f\u6bd4\u8f83\u7b80\u5355\uff1a 1 2 int a { 5 }; std :: cout << add ( a , a ) << '\\n' ; // evaluates (5 + 5) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c add() \u53d8\u91cf a \u88ab\u62f7\u8d1d\u5230\u5f62\u53c2 x \u548c y\u3002\u7531\u4e8e a \u7684\u503c\u4e3a 5\uff0c\u5219 add(a, a) = add(5,5) \uff0c\u5176\u8ba1\u7b97\u7ed3\u679c\u4e3a 10\u3002 \u63a5\u4e0b\u6765\u662f\u8fd9\u4e00\u7cfb\u5217\u8bed\u53e5\u4e2d\u6700\u590d\u6742\u7684\u4e00\u6761\uff1a 1 std :: cout << add ( 1 , multiply ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 * 3) \u5f53\u51fd\u6570 add \u6267\u884c\u65f6\uff0c \u7a0b\u5e8f\u5fc5\u987b\u8981\u786e\u5b9a\u5176\u5f62\u53c2 x \u548c y\u3002x \u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u5c31\u662f 1\u3002\u800c\u4e3a\u4e86\u83b7\u53d6\u5f62\u53c2 y \u7684\u503c\uff0c\u7a0b\u5e8f\u5fc5\u987b\u8981\u5bf9 multiply(2,3) \u8fdb\u884c\u6c42\u503c\u3002\u4e3a\u6b64\uff0c\u7a0b\u5e8f\u9996\u5148\u8c03\u7528 multiply \u51fd\u6570\u5e76\u5c06 z \u521d\u59cb\u5316\u4e3a 2\uff0cw \u521d\u59cb\u5316\u4e3a 3\uff0c\u56e0\u6b64 multiply(2,3) \u8fd4\u56de\u503c\u4e3a 6\u3002\u8be5\u503c\u968f\u540e\u88ab\u7528\u6765\u521d\u59cb\u5316 add \u51fd\u6570\u7684\u5f62\u53c2 y\u3002 add(1,6) \u7684\u8fd4\u56de\u503c\u4e3a 7\uff0c\u8be5\u503c\u88ab\u4f20\u9012\u7ed9 std:: cout \u7528\u4e8e\u6253\u5370\u3002 \u7b80\u5355\u6765\u8bf4\uff1a add(1, multiply(2,3)) \u6c42\u503c\u5f97\u5230 add(1,6) \uff0c\u8fdb\u800c\u6c42\u503c\u5f97\u5230 7 \u4e0b\u9762\u7684\u8bed\u53e5\u770b\u4e0a\u53bb\u6709\u70b9\u7ed5\uff0c\u56e0\u4e3a add \u51fd\u6570\u7684\u4e00\u4e2a\u5b9e\u53c2\uff0c\u5176\u503c\u6765\u81ea\u4e8e\u53e6\u5916\u4e00\u4e2a add \u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 1 std :: cout << add ( 1 , add ( 2 , 3 )) << '\\n' ; // evaluates 1 + (2 + 3) \u4e0d\u8fc7\uff0c\u5176\u5b9e\u5b83\u548c\u524d\u4e00\u4e2a\u4f8b\u5b50\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c add(2,3) \u9996\u5148\u6c42\u503c\uff0c\u8fd4\u56de\u503c\u4e3a 5\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9 add(1,5) \u8fdb\u884c\u6c42\u503c\uff0c\u5176\u7ed3\u679c\u4e3a 6\uff0c\u8be5\u503c\u88ab\u4f20\u9012\u7ed9 std:: cout \u7528\u4e8e\u6253\u5370\u3002 \u7b80\u5355\u6765\u8bf4\uff1a add(1, add(2,3)) \u6c42\u503c\u5f97\u5230 add(1,5) \uff0c\u7ee7\u7eed\u6c42\u503c\u5f97\u5230 6\u3002","title":"\u66f4\u591a\u4f8b\u5b50"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.04%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82/#_7","text":"\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u662f\u51fd\u6570\u80fd\u591f\u88ab\u91cd\u7528\u7684\u5173\u952e\u673a\u5236\uff0c\u56e0\u4e3a\u8be5\u673a\u5236\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u6307\u5b9a\u5177\u4f53\u503c\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u51fd\u6570\u83b7\u53d6\u6216\u8ba1\u7b97\u6570\u636e\u5e76\u5c06\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002","title":"\u7ed3\u8bba"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.5 \u2014 Introduction to local scope - \u4f5c\u8005\uff1a ALEX - 2022-5-21 2.5 \u5c40\u90e8\u53d8\u91cf\u548c\u5c40\u90e8\u4f5c\u7528\u57df \u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u548c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u662f[[\u5c40\u90e8\u53d8\u91cf(local variable)]] (\u5c40\u90e8\u53d8\u91cf\u662f\u548c[[\u5168\u5c40\u53d8\u91cf(global variable)]]\u76f8\u5bf9\u7684\u6982\u5ff5\uff0c\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5168\u5c40\u53d8\u91cf\uff09\u3002 1 2 3 4 5 6 int add ( int x , int y ) // function parameters x and y are local variables { int z { x + y }; // z is a local variable too return z ; } \u672c\u8282\u8bfe\u5c06\u8be6\u7ec6\u4ecb\u7ecd[[\u5c40\u90e8\u53d8\u91cf(local variable)]]\u6240\u5177\u6709\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 \u5c40\u90e8\u53d8\u91cf\u751f\u547d\u5468\u671f \u5728[[1.3 \u5bf9\u8c61\u548c\u53d8\u91cf]]\u4e2d\u6211\u4eec\u8ba8\u8bba\u4e86\u4ee5\u5f62\u5982 int x; \u7684\u65b9\u5f0f\u5b9a\u4e49\u53d8\u91cf\u662f\u5982\u4f55\u5728\u8bed\u53e5\u6267\u884c\u65f6[[\u5b9e\u4f8b\u5316(instantiated)]] \u53d8\u91cf\u7684\u3002\u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u662f\u5728\u8fdb\u5165\u51fd\u6570\u65f6\u88ab\u521b\u5efa\u548c\u521d\u59cb\u5316\u7684\uff0c\u51fd\u6570\u4f53\u5185\u7684\u51fd\u6570\u5219\u662f\u5728\u5b9a\u4e49\u65f6\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7684\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u521b\u5efa\u5e76\u521d\u59cb\u5316 { int z { x + y }; // z \u5728\u6b64\u5904\u88ab\u521b\u5efa\u548c\u521d\u59cb\u5316 return z ; } \u6b64\u65f6\u6211\u4eec\u4e0d\u7ecf\u8981\u95ee\uff0c\u201d\u90a3\u4e48\u5b9e\u4f8b\u5316\u7684\u53d8\u91cf\u662f\u5728\u5408\u9002\u88ab\u9500\u6bc1\u7684\u5462\uff1f\u201c\u3002[[\u5c40\u90e8\u53d8\u91cf(local variable)]]\u662f\u5728 \u5305\u542b\u5176\u5b9a\u4e49\u7684\u4e00\u7ec4\u82b1\u62ec\u53f7\u7684\u7ed3\u5c3e \u65f6\u9500\u6bc1\u7684\uff0c\u5176\u9500\u6bc1\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\uff08\u5bf9\u4e8e[[\u5f62\u53c2(parameters)]]\u6765\u8bf4\uff0c\u5219\u662f\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u9500\u6bc1\uff09\u3002 1 2 3 4 5 6 int add ( int x , int y ) { int z { x + y }; return z ; } // z, y, and x destroyed here \u6b63\u5982\u4eba\u7684\u751f\u547d\u5468\u671f\u88ab\u5b9a\u4e49\u4e3a\u5176\u51fa\u751f\u5230\u6b7b\u4ea1\u7684\u8fd9\u6bb5\u65f6\u95f4\u4e00\u6837\uff0c\u53d8\u91cf\u7684[[\u751f\u547d\u5468\u671f(lifetime)]]\u6307\u7684\u662f\u8be5\u53d8\u91cf\u88ab\u521b\u5efa\u5230\u88ab\u9500\u6bc1\u7684\u8fd9\u6bb5\u65f6\u95f4\u3002\u6ce8\u610f\uff0c\u53d8\u91cf\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u53d1\u751f\u7684\uff08\u79f0\u4e3a[[\u8fd0\u884c\u65f6(runtime)]]\uff09\uff0c\u800c\u4e0d\u662f\u5728[[\u7f16\u8bd1\u65f6(compile-time)]]\u53d1\u751f\u7684\u3002\u56e0\u6b64\uff0c\u751f\u547d\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5c5e\u6027\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb The above rules around creation, initialization, and destruction are guarantees. That is, objects must be created and initialized no later than the point of definition, and destroyed no earlier than the end of the set of the curly braces in which they are defined (or, for function parameters, at the end of the function). In actuality, the C++ specification gives compilers a lot of flexibility to determine when local variables are created and destroyed. Objects may be created earlier, or destroyed later for optimization purposes. Most often, local variables are created when the function is entered, and destroyed in the opposite order of creation when the function is exited. We\u2019ll discuss this in more detail in a future lesson, when we talk about the call stack. \u4e0b\u9762\u8fd9\u6bb5\u7a0b\u5e8f\u5c55\u793a\u4e86\u6709\u5173\u53d8\u91cf x \u751f\u547d\u5468\u671f\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void doSomething () { std :: cout << \"Hello! \\n \" ; } int main () { int x { 0 }; // x \u7684\u751f\u547d\u5468\u671f\u8d77\u70b9 doSomething (); // \u5728\u51fd\u6570\u8c03\u7528\u671f\u95f4\uff0cx \u4ecd\u7136\u5b58\u5728 return 0 ; } // x \u7684\u751f\u547d\u5468\u671f\u7ec8\u70b9 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cx \u7684\u751f\u547d\u5468\u671f\u4ece\u5b83\u7684\u5b9a\u4e49\u5f00\u59cb\u4e00\u76f4\u5230 main \u51fd\u6570\u7684\u672b\u5c3e\u7ed3\u675f\u3002\u8fd9\u5176\u4e2d\u5305\u542b\u4e86\u51fd\u6570 doSomething \u6267\u884c\u7684\u65f6\u95f4\u3002 \u5c40\u90e8\u4f5c\u7528\u57df \u4e00\u4e2a[[\u6807\u8bc6\u7b26(identifier)]]\u7684[[\u4f5c\u7528\u57df(scope)]]\u8868\u660e\u4e86\u8be5\u8868\u793a\u7b26\u5728\u6e90\u7801\u4e2d\u80fd\u591f\u88ab\u8bbf\u95ee\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4e00\u4e2a\u6807\u8bc6\u7b26\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5219\u79f0\u5176\u5728\u4f5c\u7528\u57df\u4e2d\u3002\u5f53\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u8bbf\u95ee\u65f6\uff0c\u5219\u79f0\u5176\u8d85\u51fa\u4e86\u4f5c\u7528\u57df\uff08Out of scope\uff09\u3002\u4f5c\u7528\u57df\u662f\u4e00\u4e2a[[\u7f16\u8bd1\u65f6(compile-time)]]\u5c5e\u6027\uff0c\u5982\u679c\u5728\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u4e4b\u5916\u8bbf\u95ee\u5b83\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002 \u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4ece\u8be5\u53d8\u91cf\u7684\u5b9a\u4e49\u5f00\u59cb\uff0c\u5728\u5305\u542b\u4e86\u8be5\u53d8\u91cf\u5b9a\u4e49\u7684\u4e00\u7ec4\u82b1\u62ec\u53f7\u7684\u7ed3\u5c3e\u7ec8\u6b62\uff08\u5bf9\u4e8e\u51fd\u6570[[\u5f62\u53c2(parameters)]]\u5219\u5728\u51fd\u6570\u7ed3\u5c3e\u7ec8\u6b62\uff09\u3002\u8fd9\u786e\u4fdd\u4e86\u53d8\u91cf\u5728\u5b9a\u4e49\u524d\u4e0d\u80fd\u88ab\u4f7f\u7528\uff08[[\u5373\u4f7f\u7f16\u8bd1\u5668\u9009\u62e9\u5728\u6b64\u4e4b\u524d\u521b\u5efa\u53d8\u91cf]]\uff09\u3002\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u4f5c\u7528\u57df\u4e0d\u80fd\u5ef6\u4f38\u5230\u5176\u4ed6\u51fd\u6570\u4e2d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u53d8\u91cf x \u7684\u4f5c\u7528\u57df\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> // x \u4e0d\u5728\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u57df void doSomething () { std :: cout << \"Hello! \\n \" ; } int main () { // x \u6b64\u65f6\u8fd8\u4e0d\u80fd\u88ab\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8fdb\u5165\u5176\u4f5c\u7528\u57df int x { 0 }; // x \u4ece\u6b64\u65f6\u8fdb\u5165\u4f5c\u7528\u57df\uff0c\u968f\u540e\u53ef\u4ee5\u5728\u8be5\u51fd\u6570\u4e2d\u4f7f\u7528\u5b83 doSomething (); return 0 ; } // x \u4f5c\u7528\u57df\u7ec8\u6b62\u4e0e\u6b64\uff0c\u6b64\u540e\u4e0d\u518d\u80fd\u591f\u88ab\u4f7f\u7528 \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf x \u4ece\u5176\u5b9a\u4e49\u4f4d\u7f6e\u5f00\u59cb\u8fdb\u5165\u4f5c\u7528\u57df\uff0c\u5728 main \u51fd\u6570\u7ed3\u675f\u65f6\u79bb\u5f00\u5176\u4f5c\u7528\u57df\u3002\u6ce8\u610f\uff0c\u53d8\u91cf x \u7684\u4f5c\u7528\u57df\u4e0d\u4f1a\u5ef6\u4f38\u5230\u51fd\u6570 doSomething() \u4e2d\u3002\u8fd9\u4e5f\u4e00\u4f4d\u7f6e main \u51fd\u6570\u8c03\u7528 doSomething \u548c\u8be5\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u201c\u8d85\u51fa\u4f5c\u7528\u57df\u201d \u548c \u201c\u79bb\u5f00\u4f5c\u7528\u57df\u201d \u672f\u8bed[[\u8d85\u51fa\u4f5c\u7528\u57df(out of scope)]] \u548c[[\u79bb\u5f00\u4f5c\u7528\u57df(going out of scope)]]\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\u53ef\u80fd\u4ee4\u4eba\u56f0\u60d1\u3002 \u6807\u8bc6\u7b26\u8d85\u51fa\u4f5c\u7528\u57df\u8868\u793a\u5176\u4e0d\u80fd\u5728\u4ee3\u7801\u4e2d\u88ab\u8bbf\u95ee\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c[[\u6807\u8bc6\u7b26(identifier)]] x \u8fdb\u5165\u4f5c\u7528\u57df\u7684\u65f6\u95f4\u4ece\u5176\u5b9a\u4e49\u5f00\u59cb\u5230 main \u51fd\u6570\u7ed3\u5c3e\u4e3a\u6b62\u3002\u8fd9\u6bb5\u4ee3\u7801\u4ee5\u5916\u7684\u4ee3\u7801\u4e2d\u8bbf\u95ee\u8be5\u6807\u8bc6\u7b26\uff0c\u90fd\u5c5e\u4e8e\u8d85\u51fa\u4f5c\u7528\u57df\u3002 \u672f\u8bed\u79bb\u5f00\u4f5c\u7528\u57df\u63cf\u8ff0\u7684\u5bf9\u8c61\u5219\u4e00\u822c\u662f\u67d0\u4e2a\u5bf9\u8c61\u800c\u4e0d\u662f\u6807\u8bc6\u7b26\u3002\u6211\u4eec\u8bf4\u4e00\u4e2a\u53d8\u91cf\u4f1a\u5728\u5b9e\u4f8b\u5316\u5b83\u4f5c\u7528\u57df\u7684\u7ed3\u5c3e\u5904\uff08\u82b1\u62ec\u53f7\u7ed3\u675f\u5904\uff09\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c[[\u5bf9\u8c61(objec)]] x \u4f1a\u5728 main \u51fd\u6570\u7684\u7ed3\u5c3e\u5904\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5177\u5907\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4f1a\u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u7ec8\u6b62\uff0c\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728\u6b64\u65f6\u88ab\u9500\u6bc1\u3002 \u6ce8\u610f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u7684\u53d8\u91cf\u90fd\u4f1a\u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u9500\u6bc1\u3002\u6211\u4eec\u4f1a\u5728\u5c06\u6765\u7684\u8bfe\u7a0b\u4e2d\u4ecb\u7ecd\u6b64\u7c7b\u4f8b\u5b50\u3002 \u5176\u4ed6\u4f8b\u5b50 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7a0d\u5fae\u66f4\u590d\u6742\u4e00\u5b9a\u3002\u8bf7\u8bb0\u4f4f\uff0c\u751f\u547d\u5468\u671f\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5c5e\u6027\uff0c\u800c\u4f5c\u7528\u57df\u662f\u7f16\u8bd1\u65f6\u5c5e\u6027\u3002\u867d\u7136\uff0c\u6211\u4eec\u5728\u540c\u4e00\u6bb5\u4ee3\u7801\u4e2d\u8ba8\u8bba\u4e24\u8005\uff0c\u5b83\u4eec\u7684\u51fa\u53d1\u70b9\u662f\u4e0d\u540c\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u5e76\u8fdb\u5165\u4f5c\u7528\u57df { // x \u548c y \u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u89c1/\u53ef\u7528 return x + y ; } // y \u548c x \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 int main () { int a { 5 }; // a \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df int b { 6 }; // b \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df // a \u548c b \u53ea\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u7528 std :: cout << add ( a , b ) << '\\n' ; // calls function add() with x=5 and y=6 return 0 ; } // b \u548c a \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 \u51fd\u6570\u5f62\u53c2 x \u548c y \u5728 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u4f5c\u4e3a\u53d8\u91cf\uff0c\u5b83\u4eec\u53ea\u5728 add \u51fd\u6570\u4e2d\u53ef\u89c1\u53ef\u7528\uff0c\u5e76\u5728 add \u51fd\u6570\u7ed3\u675f\u65f6\u9500\u6bc1\u3002\u53d8\u91cf a \u548c b \u5728\u51fd\u6570 main \u4e2d\u88ab\u521b\u5efa\uff0c\u53ea\u5728 main \u51fd\u6570\u4e2d\u53ef\u7528\uff0c\u5e76\u4e14\u5728 main \u51fd\u6570\u7ed3\u675f\u65f6\u88ab\u9500\u6bc1\u3002 \u4e3a\u4e86\u5f3a\u5316\u7406\u89e3\uff0c\u8ba9\u6211\u4eec\u9010\u6b65\u89e3\u6790\u8be5\u51fd\u6570\uff0c\u4e0b\u5217\u64cd\u4f5c\u6309\u987a\u5e8f\u53d1\u751f\uff1a - \u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff1b - main \u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf a \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 5\uff1b - main \u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf b \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff1b - add \u51fd\u6570\u88ab\u8c03\u7528\uff0c\u51fd\u6570\u7684[[\u5b9e\u53c2(arguments)]]\u4e3a 5 \u548c 6\uff1b - add \u7684\u53d8\u91cf x \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 5\uff1b - add \u7684\u53d8\u91cf y \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff1b - \u8868\u8fbe\u5f0f x + y \u6c42\u503c\u5f97\u5230\u7ed3\u679c 11\uff1b - add \u5c06\u503c 11 \u62f7\u8d1d\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570 main \uff1b - add \u7684 y \u548c x \u88ab\u9500\u6bc1\uff1b - main \u5728\u63a7\u5236\u53f0\u6253\u5370 11\uff1b - main \u8fd4\u56de 0 \u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff1b - main \u7684\u5c40\u90e8\u53d8\u91cf b \u548c a \u88ab\u9500\u6bc1\uff1b \u4ee5\u4e0a\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u51fd\u6570 add \u88ab\u5148\u540e\u4e24\u6b21\u8c03\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u5f62\u53c2 x \u548c y \u4e5f\u88ab\u5148\u540e\u521b\u5efa\u5e76\u9500\u6bc1\u4e24\u6b21\u2014\u2014\u6bcf\u6b21\u8c03\u7528\u5c31\u4f1a\u53d1\u751f\u4e00\u6b21\u521b\u5efa\u548c\u9500\u6bc1\u3002\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u6709\u5927\u91cf\u7684\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u53d8\u91cf\u4e5f\u4f1a\u968f\u4e4b\u88ab\u9891\u7e41\u7684\u521b\u5efa\u548c\u9500\u6bc1\u3002 \u51fd\u6570\u7684\u9694\u79bb \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u770b\u51fa\uff0c\u53d8\u91cf a \u548c b \u662f\u4e0d\u540c\u4e8e\u53d8\u91cf x \u548c y \u7684\u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u5e76\u8fdb\u5165\u4f5c\u7528\u57df { // x \u548c y \u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u89c1/\u53ef\u7528 return x + y ; } // y \u548c x \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 int main () { int x { 5 }; // x \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df int y { 6 }; // y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df // x \u548c y \u53ea\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u7528 std :: cout << add ( x , y ) << '\\n' ; // calls function add() with x=5 and y=6 return 0 ; } // x \u548c y \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 \u4e0e\u524d\u4e00\u4e2a\u4f8b\u5b50\u76f8\u6bd4\uff0c\u672c\u4f8b\u53ea\u662f\u5c06 main \u51fd\u6570\u4e2d\u7684\u53d8\u91cf a \u548c b \u4fee\u6539\u6210\u4e86 x \u548c y \u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c\u548c\u4e4b\u524d\u7684\u7a0b\u5e8f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u5373\u4f7f main \u51fd\u6570\u548c add \u51fd\u6570\u90fd\u4f7f\u7528\u4e86\u53d8\u91cf\u540d x \u548c y \u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u4e5f\u53ef\u4ee5\u5de5\u4f5c\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8ba4\u8bc6\u5230\u7684\u662f\uff0c\u5373\u4f7f main \u51fd\u6570\u548c add \u51fd\u6570\u90fd\u4f7f\u7528\u4e86\u53d8\u91cf\u540d x \u548c y \uff0c\u4f46\u662f\u8fd9\u4e9b\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002 main \u51fd\u6570\u4e2d\u7684 x \u548c y \uff0c\u548c add \u51fd\u6570\u4e2d\u7684 x \u548c y \u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u2014\u2014\u5b83\u4eec\u53ea\u662f\u78b0\u5de7\u540c\u540d\u7f62\u4e86\u3002 \u5176\u6b21\uff0c\u5728 main \u51fd\u6570\u4e2d\uff0c \u53d8\u91cf\u540d x \u548c y \u6307\u7684\u662f main \u51fd\u6570\u5c40\u90e8\u4f5c\u7528\u4e2d\u7684\u53d8\u91cf x \u548c y \u3002\u8fd9\u4e9b\u53d8\u91cf\u53ea\u80fd\u591f\u5728 main \u51fd\u6570\u4e2d\u88ab\u770b\u5230\uff08\u88ab\u4f7f\u7528\uff09\u3002\u540c\u6837\u7684\uff0c\u5728 add \u51fd\u6570\u4e2d\uff0c, \u53d8\u91cf\u540d x \u548c y \u6307\u7684\u662f add \u51fd\u6570\u7684\u5f62\u53c2 x \u548c y \uff0c\u5b83\u4eec\u4e5f\u53ea\u80fd\u591f\u5728 add \u4e2d\u88ab\u770b\u5230\u548c\u4f7f\u7528\u3002 \u957f\u8bdd\u77ed\u8bf4\uff0c\u5176\u5b9e add \u548c main \u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u4e0d\u77e5\u9053\u5bf9\u65b9\u4f7f\u7528\u4e86\u4e0e\u81ea\u5df1\u76f8\u540c\u7684\u53d8\u91cf\u540d\u3002\u56e0\u4e3a\uff0c\u8fd9\u4e9b\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5e76\u6ca1\u6709\u91cd\u53e0\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c x \u548c y \u5728\u4efb\u4f55\u65f6\u5019\u88ab\u5f15\u7528\uff0c\u5176\u6307\u4ee3\u7684\u5bf9\u8c61\u90fd\u662f\u6e05\u695a\u7684\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u51fd\u6570\u5f62\u53c2\u6216\u8005\u662f\u5c40\u90e8\u53d8\u91cf\u5728\u58f0\u660e\u7684\u65f6\u5019\u6240\u4f7f\u7528\u7684\u540d\u5b57\uff0c\u53ea\u5728\u51fd\u6570\u4f53\u5185\u90e8\u53ef\u89c1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u51fd\u6570\u5728\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4e0d\u8003\u8651\u5176\u4ed6\u51fd\u6570\u662f\u5426\u4f7f\u7528\u4e86\u67d0\u4e9b\u53d8\u91cf\u540d\u3002\u8fd9\u4e00\u7279\u6027\uff0c\u53ef\u4ee5\u5e2e\u52a9\u51fd\u6570\u4fdd\u6301\u72ec\u7acb\u6027\u3002 \u5728\u540e\u7eed\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u63a2\u8ba8\u5173\u4e8e\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u66f4\u591a\u5185\u5bb9\uff0c\u540c\u65f6\u4e5f\u4f1a\u8c08\u5230\u5176\u4ed6\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u3002 \u5728\u4f55\u5904\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf \u51fd\u6570\u4f53\u5185\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5e94\u8be5\u5c3d\u53ef\u80fd\u89e3\u51b3\u5176\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u7684\u4f4d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int x {}; // x \u5728\u6b64\u5904\u5b9a\u4e49 std :: cin >> x ; // \u5728\u6b64\u5904\u4f7f\u7528 std :: cout << \"Enter another integer: \" ; int y {}; // y \u5728\u6b64\u5904\u5b9a\u4e49 std :: cin >> y ; // \u5728\u6b64\u5904\u4f7f\u7528 int sum { x + y }; // sum \u5728\u6b64\u5904\u5b9a\u4e49 std :: cout << \"The sum is: \" << sum << '\\n' ; // \u5728\u6b64\u5904\u4f7f\u7528 return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u662f\u5728\u5b83\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u65f6\u7684\u524d\u4e00\u884c\u5b9a\u4e49\u7684\u3002\u8fd9\u4e2a\u89c4\u5b9a\u5bfc\u5e08\u65e0\u9700\u4e25\u683c\u9075\u5b88\u2014\u2014\u5982\u679c\u4f60\u5e0c\u671b\u5c06\u7b2c\u4e94\u884c\u548c\u7b2c\u516d\u884c\u7684\u4f4d\u7f6e\u6362\u4e00\u4e0b\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5c3d\u91cf\u5728\u5c40\u90e8\u53d8\u91cf\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u524d\u6700\u8fd1\u7684\u5730\u65b9\u5b9a\u4e49\u8be5\u5c40\u90e8\u53d8\u91cf\u3002","title":"2.05 \u5c40\u90e8\u53d8\u91cf\u548c\u5c40\u90e8\u4f5c\u7528\u57df"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#25","text":"","title":"2.5 \u5c40\u90e8\u53d8\u91cf\u548c\u5c40\u90e8\u4f5c\u7528\u57df"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_1","text":"\u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u548c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u662f[[\u5c40\u90e8\u53d8\u91cf(local variable)]] (\u5c40\u90e8\u53d8\u91cf\u662f\u548c[[\u5168\u5c40\u53d8\u91cf(global variable)]]\u76f8\u5bf9\u7684\u6982\u5ff5\uff0c\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5168\u5c40\u53d8\u91cf\uff09\u3002 1 2 3 4 5 6 int add ( int x , int y ) // function parameters x and y are local variables { int z { x + y }; // z is a local variable too return z ; } \u672c\u8282\u8bfe\u5c06\u8be6\u7ec6\u4ecb\u7ecd[[\u5c40\u90e8\u53d8\u91cf(local variable)]]\u6240\u5177\u6709\u7684\u4e00\u4e9b\u5c5e\u6027\u3002","title":"\u5c40\u90e8\u53d8\u91cf"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_2","text":"\u5728[[1.3 \u5bf9\u8c61\u548c\u53d8\u91cf]]\u4e2d\u6211\u4eec\u8ba8\u8bba\u4e86\u4ee5\u5f62\u5982 int x; \u7684\u65b9\u5f0f\u5b9a\u4e49\u53d8\u91cf\u662f\u5982\u4f55\u5728\u8bed\u53e5\u6267\u884c\u65f6[[\u5b9e\u4f8b\u5316(instantiated)]] \u53d8\u91cf\u7684\u3002\u51fd\u6570\u7684[[\u5f62\u53c2(parameters)]]\u662f\u5728\u8fdb\u5165\u51fd\u6570\u65f6\u88ab\u521b\u5efa\u548c\u521d\u59cb\u5316\u7684\uff0c\u51fd\u6570\u4f53\u5185\u7684\u51fd\u6570\u5219\u662f\u5728\u5b9a\u4e49\u65f6\u521b\u5efa\u5e76\u521d\u59cb\u5316\u7684\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u521b\u5efa\u5e76\u521d\u59cb\u5316 { int z { x + y }; // z \u5728\u6b64\u5904\u88ab\u521b\u5efa\u548c\u521d\u59cb\u5316 return z ; } \u6b64\u65f6\u6211\u4eec\u4e0d\u7ecf\u8981\u95ee\uff0c\u201d\u90a3\u4e48\u5b9e\u4f8b\u5316\u7684\u53d8\u91cf\u662f\u5728\u5408\u9002\u88ab\u9500\u6bc1\u7684\u5462\uff1f\u201c\u3002[[\u5c40\u90e8\u53d8\u91cf(local variable)]]\u662f\u5728 \u5305\u542b\u5176\u5b9a\u4e49\u7684\u4e00\u7ec4\u82b1\u62ec\u53f7\u7684\u7ed3\u5c3e \u65f6\u9500\u6bc1\u7684\uff0c\u5176\u9500\u6bc1\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\uff08\u5bf9\u4e8e[[\u5f62\u53c2(parameters)]]\u6765\u8bf4\uff0c\u5219\u662f\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u9500\u6bc1\uff09\u3002 1 2 3 4 5 6 int add ( int x , int y ) { int z { x + y }; return z ; } // z, y, and x destroyed here \u6b63\u5982\u4eba\u7684\u751f\u547d\u5468\u671f\u88ab\u5b9a\u4e49\u4e3a\u5176\u51fa\u751f\u5230\u6b7b\u4ea1\u7684\u8fd9\u6bb5\u65f6\u95f4\u4e00\u6837\uff0c\u53d8\u91cf\u7684[[\u751f\u547d\u5468\u671f(lifetime)]]\u6307\u7684\u662f\u8be5\u53d8\u91cf\u88ab\u521b\u5efa\u5230\u88ab\u9500\u6bc1\u7684\u8fd9\u6bb5\u65f6\u95f4\u3002\u6ce8\u610f\uff0c\u53d8\u91cf\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u53d1\u751f\u7684\uff08\u79f0\u4e3a[[\u8fd0\u884c\u65f6(runtime)]]\uff09\uff0c\u800c\u4e0d\u662f\u5728[[\u7f16\u8bd1\u65f6(compile-time)]]\u53d1\u751f\u7684\u3002\u56e0\u6b64\uff0c\u751f\u547d\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5c5e\u6027\u3002 [!INFO] \u6269\u5c55\u9605\u8bfb The above rules around creation, initialization, and destruction are guarantees. That is, objects must be created and initialized no later than the point of definition, and destroyed no earlier than the end of the set of the curly braces in which they are defined (or, for function parameters, at the end of the function). In actuality, the C++ specification gives compilers a lot of flexibility to determine when local variables are created and destroyed. Objects may be created earlier, or destroyed later for optimization purposes. Most often, local variables are created when the function is entered, and destroyed in the opposite order of creation when the function is exited. We\u2019ll discuss this in more detail in a future lesson, when we talk about the call stack. \u4e0b\u9762\u8fd9\u6bb5\u7a0b\u5e8f\u5c55\u793a\u4e86\u6709\u5173\u53d8\u91cf x \u751f\u547d\u5468\u671f\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void doSomething () { std :: cout << \"Hello! \\n \" ; } int main () { int x { 0 }; // x \u7684\u751f\u547d\u5468\u671f\u8d77\u70b9 doSomething (); // \u5728\u51fd\u6570\u8c03\u7528\u671f\u95f4\uff0cx \u4ecd\u7136\u5b58\u5728 return 0 ; } // x \u7684\u751f\u547d\u5468\u671f\u7ec8\u70b9 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cx \u7684\u751f\u547d\u5468\u671f\u4ece\u5b83\u7684\u5b9a\u4e49\u5f00\u59cb\u4e00\u76f4\u5230 main \u51fd\u6570\u7684\u672b\u5c3e\u7ed3\u675f\u3002\u8fd9\u5176\u4e2d\u5305\u542b\u4e86\u51fd\u6570 doSomething \u6267\u884c\u7684\u65f6\u95f4\u3002","title":"\u5c40\u90e8\u53d8\u91cf\u751f\u547d\u5468\u671f"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_3","text":"\u4e00\u4e2a[[\u6807\u8bc6\u7b26(identifier)]]\u7684[[\u4f5c\u7528\u57df(scope)]]\u8868\u660e\u4e86\u8be5\u8868\u793a\u7b26\u5728\u6e90\u7801\u4e2d\u80fd\u591f\u88ab\u8bbf\u95ee\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4e00\u4e2a\u6807\u8bc6\u7b26\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u5219\u79f0\u5176\u5728\u4f5c\u7528\u57df\u4e2d\u3002\u5f53\u4e00\u4e2a\u6807\u8bc6\u7b26\u4e0d\u80fd\u88ab\u8bbf\u95ee\u65f6\uff0c\u5219\u79f0\u5176\u8d85\u51fa\u4e86\u4f5c\u7528\u57df\uff08Out of scope\uff09\u3002\u4f5c\u7528\u57df\u662f\u4e00\u4e2a[[\u7f16\u8bd1\u65f6(compile-time)]]\u5c5e\u6027\uff0c\u5982\u679c\u5728\u6807\u8bc6\u7b26\u7684\u4f5c\u7528\u57df\u4e4b\u5916\u8bbf\u95ee\u5b83\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002 \u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4ece\u8be5\u53d8\u91cf\u7684\u5b9a\u4e49\u5f00\u59cb\uff0c\u5728\u5305\u542b\u4e86\u8be5\u53d8\u91cf\u5b9a\u4e49\u7684\u4e00\u7ec4\u82b1\u62ec\u53f7\u7684\u7ed3\u5c3e\u7ec8\u6b62\uff08\u5bf9\u4e8e\u51fd\u6570[[\u5f62\u53c2(parameters)]]\u5219\u5728\u51fd\u6570\u7ed3\u5c3e\u7ec8\u6b62\uff09\u3002\u8fd9\u786e\u4fdd\u4e86\u53d8\u91cf\u5728\u5b9a\u4e49\u524d\u4e0d\u80fd\u88ab\u4f7f\u7528\uff08[[\u5373\u4f7f\u7f16\u8bd1\u5668\u9009\u62e9\u5728\u6b64\u4e4b\u524d\u521b\u5efa\u53d8\u91cf]]\uff09\u3002\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u4f5c\u7528\u57df\u4e0d\u80fd\u5ef6\u4f38\u5230\u5176\u4ed6\u51fd\u6570\u4e2d\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u53d8\u91cf x \u7684\u4f5c\u7528\u57df\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> // x \u4e0d\u5728\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u57df void doSomething () { std :: cout << \"Hello! \\n \" ; } int main () { // x \u6b64\u65f6\u8fd8\u4e0d\u80fd\u88ab\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8fdb\u5165\u5176\u4f5c\u7528\u57df int x { 0 }; // x \u4ece\u6b64\u65f6\u8fdb\u5165\u4f5c\u7528\u57df\uff0c\u968f\u540e\u53ef\u4ee5\u5728\u8be5\u51fd\u6570\u4e2d\u4f7f\u7528\u5b83 doSomething (); return 0 ; } // x \u4f5c\u7528\u57df\u7ec8\u6b62\u4e0e\u6b64\uff0c\u6b64\u540e\u4e0d\u518d\u80fd\u591f\u88ab\u4f7f\u7528 \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u53d8\u91cf x \u4ece\u5176\u5b9a\u4e49\u4f4d\u7f6e\u5f00\u59cb\u8fdb\u5165\u4f5c\u7528\u57df\uff0c\u5728 main \u51fd\u6570\u7ed3\u675f\u65f6\u79bb\u5f00\u5176\u4f5c\u7528\u57df\u3002\u6ce8\u610f\uff0c\u53d8\u91cf x \u7684\u4f5c\u7528\u57df\u4e0d\u4f1a\u5ef6\u4f38\u5230\u51fd\u6570 doSomething() \u4e2d\u3002\u8fd9\u4e5f\u4e00\u4f4d\u7f6e main \u51fd\u6570\u8c03\u7528 doSomething \u548c\u8be5\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002","title":"\u5c40\u90e8\u4f5c\u7528\u57df"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_4","text":"\u672f\u8bed[[\u8d85\u51fa\u4f5c\u7528\u57df(out of scope)]] \u548c[[\u79bb\u5f00\u4f5c\u7528\u57df(going out of scope)]]\u5bf9\u4e8e\u65b0\u624b\u6765\u8bf4\u53ef\u80fd\u4ee4\u4eba\u56f0\u60d1\u3002 \u6807\u8bc6\u7b26\u8d85\u51fa\u4f5c\u7528\u57df\u8868\u793a\u5176\u4e0d\u80fd\u5728\u4ee3\u7801\u4e2d\u88ab\u8bbf\u95ee\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c[[\u6807\u8bc6\u7b26(identifier)]] x \u8fdb\u5165\u4f5c\u7528\u57df\u7684\u65f6\u95f4\u4ece\u5176\u5b9a\u4e49\u5f00\u59cb\u5230 main \u51fd\u6570\u7ed3\u5c3e\u4e3a\u6b62\u3002\u8fd9\u6bb5\u4ee3\u7801\u4ee5\u5916\u7684\u4ee3\u7801\u4e2d\u8bbf\u95ee\u8be5\u6807\u8bc6\u7b26\uff0c\u90fd\u5c5e\u4e8e\u8d85\u51fa\u4f5c\u7528\u57df\u3002 \u672f\u8bed\u79bb\u5f00\u4f5c\u7528\u57df\u63cf\u8ff0\u7684\u5bf9\u8c61\u5219\u4e00\u822c\u662f\u67d0\u4e2a\u5bf9\u8c61\u800c\u4e0d\u662f\u6807\u8bc6\u7b26\u3002\u6211\u4eec\u8bf4\u4e00\u4e2a\u53d8\u91cf\u4f1a\u5728\u5b9e\u4f8b\u5316\u5b83\u4f5c\u7528\u57df\u7684\u7ed3\u5c3e\u5904\uff08\u82b1\u62ec\u53f7\u7ed3\u675f\u5904\uff09\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c[[\u5bf9\u8c61(objec)]] x \u4f1a\u5728 main \u51fd\u6570\u7684\u7ed3\u5c3e\u5904\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5177\u5907\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4f1a\u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u7ec8\u6b62\uff0c\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728\u6b64\u65f6\u88ab\u9500\u6bc1\u3002 \u6ce8\u610f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u7684\u53d8\u91cf\u90fd\u4f1a\u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u9500\u6bc1\u3002\u6211\u4eec\u4f1a\u5728\u5c06\u6765\u7684\u8bfe\u7a0b\u4e2d\u4ecb\u7ecd\u6b64\u7c7b\u4f8b\u5b50\u3002","title":"\u201c\u8d85\u51fa\u4f5c\u7528\u57df\u201d \u548c \u201c\u79bb\u5f00\u4f5c\u7528\u57df\u201d"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_5","text":"\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u7a0d\u5fae\u66f4\u590d\u6742\u4e00\u5b9a\u3002\u8bf7\u8bb0\u4f4f\uff0c\u751f\u547d\u5468\u671f\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5c5e\u6027\uff0c\u800c\u4f5c\u7528\u57df\u662f\u7f16\u8bd1\u65f6\u5c5e\u6027\u3002\u867d\u7136\uff0c\u6211\u4eec\u5728\u540c\u4e00\u6bb5\u4ee3\u7801\u4e2d\u8ba8\u8bba\u4e24\u8005\uff0c\u5b83\u4eec\u7684\u51fa\u53d1\u70b9\u662f\u4e0d\u540c\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u5e76\u8fdb\u5165\u4f5c\u7528\u57df { // x \u548c y \u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u89c1/\u53ef\u7528 return x + y ; } // y \u548c x \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 int main () { int a { 5 }; // a \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df int b { 6 }; // b \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df // a \u548c b \u53ea\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u7528 std :: cout << add ( a , b ) << '\\n' ; // calls function add() with x=5 and y=6 return 0 ; } // b \u548c a \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 \u51fd\u6570\u5f62\u53c2 x \u548c y \u5728 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u4f5c\u4e3a\u53d8\u91cf\uff0c\u5b83\u4eec\u53ea\u5728 add \u51fd\u6570\u4e2d\u53ef\u89c1\u53ef\u7528\uff0c\u5e76\u5728 add \u51fd\u6570\u7ed3\u675f\u65f6\u9500\u6bc1\u3002\u53d8\u91cf a \u548c b \u5728\u51fd\u6570 main \u4e2d\u88ab\u521b\u5efa\uff0c\u53ea\u5728 main \u51fd\u6570\u4e2d\u53ef\u7528\uff0c\u5e76\u4e14\u5728 main \u51fd\u6570\u7ed3\u675f\u65f6\u88ab\u9500\u6bc1\u3002 \u4e3a\u4e86\u5f3a\u5316\u7406\u89e3\uff0c\u8ba9\u6211\u4eec\u9010\u6b65\u89e3\u6790\u8be5\u51fd\u6570\uff0c\u4e0b\u5217\u64cd\u4f5c\u6309\u987a\u5e8f\u53d1\u751f\uff1a - \u7a0b\u5e8f\u4ece main \u51fd\u6570\u7684\u9876\u90e8\u5f00\u59cb\u6267\u884c\uff1b - main \u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf a \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 5\uff1b - main \u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf b \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff1b - add \u51fd\u6570\u88ab\u8c03\u7528\uff0c\u51fd\u6570\u7684[[\u5b9e\u53c2(arguments)]]\u4e3a 5 \u548c 6\uff1b - add \u7684\u53d8\u91cf x \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 5\uff1b - add \u7684\u53d8\u91cf y \u88ab\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e3a 6\uff1b - \u8868\u8fbe\u5f0f x + y \u6c42\u503c\u5f97\u5230\u7ed3\u679c 11\uff1b - add \u5c06\u503c 11 \u62f7\u8d1d\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570 main \uff1b - add \u7684 y \u548c x \u88ab\u9500\u6bc1\uff1b - main \u5728\u63a7\u5236\u53f0\u6253\u5370 11\uff1b - main \u8fd4\u56de 0 \u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff1b - main \u7684\u5c40\u90e8\u53d8\u91cf b \u548c a \u88ab\u9500\u6bc1\uff1b \u4ee5\u4e0a\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u51fd\u6570 add \u88ab\u5148\u540e\u4e24\u6b21\u8c03\u7528\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u5f62\u53c2 x \u548c y \u4e5f\u88ab\u5148\u540e\u521b\u5efa\u5e76\u9500\u6bc1\u4e24\u6b21\u2014\u2014\u6bcf\u6b21\u8c03\u7528\u5c31\u4f1a\u53d1\u751f\u4e00\u6b21\u521b\u5efa\u548c\u9500\u6bc1\u3002\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u6709\u5927\u91cf\u7684\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u53d8\u91cf\u4e5f\u4f1a\u968f\u4e4b\u88ab\u9891\u7e41\u7684\u521b\u5efa\u548c\u9500\u6bc1\u3002","title":"\u5176\u4ed6\u4f8b\u5b50"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_6","text":"\u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u770b\u51fa\uff0c\u53d8\u91cf a \u548c b \u662f\u4e0d\u540c\u4e8e\u53d8\u91cf x \u548c y \u7684\u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> int add ( int x , int y ) // x \u548c y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u5e76\u8fdb\u5165\u4f5c\u7528\u57df { // x \u548c y \u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u89c1/\u53ef\u7528 return x + y ; } // y \u548c x \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 int main () { int x { 5 }; // x \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df int y { 6 }; // y \u5728\u6b64\u5904\u88ab\u521b\u5efa\u3001\u521d\u59cb\u5316\u5e76\u8fdb\u5165\u4f5c\u7528\u57df // x \u548c y \u53ea\u5728\u8be5\u51fd\u6570\u4e2d\u53ef\u7528 std :: cout << add ( x , y ) << '\\n' ; // calls function add() with x=5 and y=6 return 0 ; } // x \u548c y \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u9500\u6bc1 \u4e0e\u524d\u4e00\u4e2a\u4f8b\u5b50\u76f8\u6bd4\uff0c\u672c\u4f8b\u53ea\u662f\u5c06 main \u51fd\u6570\u4e2d\u7684\u53d8\u91cf a \u548c b \u4fee\u6539\u6210\u4e86 x \u548c y \u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c\u548c\u4e4b\u524d\u7684\u7a0b\u5e8f\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u5373\u4f7f main \u51fd\u6570\u548c add \u51fd\u6570\u90fd\u4f7f\u7528\u4e86\u53d8\u91cf\u540d x \u548c y \u3002\u4e3a\u4ec0\u4e48\u8fd9\u6837\u4e5f\u53ef\u4ee5\u5de5\u4f5c\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8ba4\u8bc6\u5230\u7684\u662f\uff0c\u5373\u4f7f main \u51fd\u6570\u548c add \u51fd\u6570\u90fd\u4f7f\u7528\u4e86\u53d8\u91cf\u540d x \u548c y \uff0c\u4f46\u662f\u8fd9\u4e9b\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002 main \u51fd\u6570\u4e2d\u7684 x \u548c y \uff0c\u548c add \u51fd\u6570\u4e2d\u7684 x \u548c y \u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\u2014\u2014\u5b83\u4eec\u53ea\u662f\u78b0\u5de7\u540c\u540d\u7f62\u4e86\u3002 \u5176\u6b21\uff0c\u5728 main \u51fd\u6570\u4e2d\uff0c \u53d8\u91cf\u540d x \u548c y \u6307\u7684\u662f main \u51fd\u6570\u5c40\u90e8\u4f5c\u7528\u4e2d\u7684\u53d8\u91cf x \u548c y \u3002\u8fd9\u4e9b\u53d8\u91cf\u53ea\u80fd\u591f\u5728 main \u51fd\u6570\u4e2d\u88ab\u770b\u5230\uff08\u88ab\u4f7f\u7528\uff09\u3002\u540c\u6837\u7684\uff0c\u5728 add \u51fd\u6570\u4e2d\uff0c, \u53d8\u91cf\u540d x \u548c y \u6307\u7684\u662f add \u51fd\u6570\u7684\u5f62\u53c2 x \u548c y \uff0c\u5b83\u4eec\u4e5f\u53ea\u80fd\u591f\u5728 add \u4e2d\u88ab\u770b\u5230\u548c\u4f7f\u7528\u3002 \u957f\u8bdd\u77ed\u8bf4\uff0c\u5176\u5b9e add \u548c main \u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u4e0d\u77e5\u9053\u5bf9\u65b9\u4f7f\u7528\u4e86\u4e0e\u81ea\u5df1\u76f8\u540c\u7684\u53d8\u91cf\u540d\u3002\u56e0\u4e3a\uff0c\u8fd9\u4e9b\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5e76\u6ca1\u6709\u91cd\u53e0\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c x \u548c y \u5728\u4efb\u4f55\u65f6\u5019\u88ab\u5f15\u7528\uff0c\u5176\u6307\u4ee3\u7684\u5bf9\u8c61\u90fd\u662f\u6e05\u695a\u7684\u3002 [!TIP] \u5173\u952e\u4fe1\u606f \u51fd\u6570\u5f62\u53c2\u6216\u8005\u662f\u5c40\u90e8\u53d8\u91cf\u5728\u58f0\u660e\u7684\u65f6\u5019\u6240\u4f7f\u7528\u7684\u540d\u5b57\uff0c\u53ea\u5728\u51fd\u6570\u4f53\u5185\u90e8\u53ef\u89c1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u51fd\u6570\u5728\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4e0d\u8003\u8651\u5176\u4ed6\u51fd\u6570\u662f\u5426\u4f7f\u7528\u4e86\u67d0\u4e9b\u53d8\u91cf\u540d\u3002\u8fd9\u4e00\u7279\u6027\uff0c\u53ef\u4ee5\u5e2e\u52a9\u51fd\u6570\u4fdd\u6301\u72ec\u7acb\u6027\u3002 \u5728\u540e\u7eed\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u63a2\u8ba8\u5173\u4e8e\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u66f4\u591a\u5185\u5bb9\uff0c\u540c\u65f6\u4e5f\u4f1a\u8c08\u5230\u5176\u4ed6\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u3002","title":"\u51fd\u6570\u7684\u9694\u79bb"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.05%20%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F/#_7","text":"\u51fd\u6570\u4f53\u5185\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5176\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5e94\u8be5\u5c3d\u53ef\u80fd\u89e3\u51b3\u5176\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u7684\u4f4d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> int main () { std :: cout << \"Enter an integer: \" ; int x {}; // x \u5728\u6b64\u5904\u5b9a\u4e49 std :: cin >> x ; // \u5728\u6b64\u5904\u4f7f\u7528 std :: cout << \"Enter another integer: \" ; int y {}; // y \u5728\u6b64\u5904\u5b9a\u4e49 std :: cin >> y ; // \u5728\u6b64\u5904\u4f7f\u7528 int sum { x + y }; // sum \u5728\u6b64\u5904\u5b9a\u4e49 std :: cout << \"The sum is: \" << sum << '\\n' ; // \u5728\u6b64\u5904\u4f7f\u7528 return 0 ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u53d8\u91cf\u90fd\u662f\u5728\u5b83\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u65f6\u7684\u524d\u4e00\u884c\u5b9a\u4e49\u7684\u3002\u8fd9\u4e2a\u89c4\u5b9a\u5bfc\u5e08\u65e0\u9700\u4e25\u683c\u9075\u5b88\u2014\u2014\u5982\u679c\u4f60\u5e0c\u671b\u5c06\u7b2c\u4e94\u884c\u548c\u7b2c\u516d\u884c\u7684\u4f4d\u7f6e\u6362\u4e00\u4e0b\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 [!TIP] \u6700\u4f73\u5b9e\u8df5 \u5c3d\u91cf\u5728\u5c40\u90e8\u53d8\u91cf\u7b2c\u4e00\u6b21\u88ab\u4f7f\u7528\u524d\u6700\u8fd1\u7684\u5730\u65b9\u5b9a\u4e49\u8be5\u5c40\u90e8\u53d8\u91cf\u3002","title":"\u5728\u4f55\u5904\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.06%20%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BD%95%E6%9C%89%E7%94%A8%EF%BC%8C%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.6 \u2014 Why functions are useful, and how to use them effectively - \u4f5c\u8005\uff1a ALEX - 2022-4-15 2.6 \u51fd\u6570\u4e3a\u4f55\u6709\u7528\uff0c\u5982\u4f55\u9ad8\u6548\u4f7f\u7528\u51fd\u6570 \u901a\u8fc7\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u51fd\u6570\u4ee5\u53ca\u51fd\u6570\u7684\u57fa\u672c\u529f\u80fd\uff0c\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\uff0c\u4e3a\u4ec0\u4e48\u8bf4\u51fd\u6570\u975e\u5e38\u6709\u7528\u3002 \u51fd\u6570\u4e3a\u4ec0\u4e48\u6709\u7528 \u65b0\u624b\u7a0b\u5e8f\u5458\u603b\u4f1a\u95ee\uff1a\u201c\u96be\u9053\u6211\u4eec\u5c31\u4e0d\u80fd\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u585e\u5230 main \u51fd\u6570\u91cc\u9762\u5417\uff1f\u201d \uff0c\u5176\u5b9e\u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u4f60\u7684\u786e\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u4ee3\u7801\u90fd\u585e\u5230 main \u51fd\u6570\u91cc\u9762\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4ee3\u7801\u91cf\u6bd4\u8f83\u591a\u6216\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4f7f\u7528\u51fd\u6570\u80fd\u591f\u5e26\u6765\u5f88\u591a\u597d\u5904\uff1a \u4fbf\u4e8e\u7ec4\u7ec7\u4ee3\u7801 -- \u968f\u7740\u7a0b\u5e8f\u7684\u590d\u6742\u6027\u8d8a\u6765\u8d8a\u9ad8\uff0c\u5c06\u6240\u6709\u7684\u4ee3\u7801\u90fd\u662f\u585e\u5230 main \u51fd\u6570\u4e2d\u4f1a\u4f7f main \u51fd\u6570\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u51fd\u6570\u770b\u505a\u662f\u4e00\u4e2a\u4e2a\u72ec\u7acb\u4e8e\u4e3b\u7a0b\u5e8f\u7684\u8ff7\u4f60\u7a0b\u5e8f\uff0c\u5728\u7f16\u5199\u5b83\u4eec\u7684\u65f6\u5019\u6211\u4eec\u65e0\u9700\u8003\u8651\u5176\u4ed6\u7a0b\u5e8f\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u7a0b\u5e8f\u7b80\u5316\u4e3a\u591a\u4e2a\u66f4\u5c0f\u3001\u66f4\u6613\u7ef4\u62a4\u7684\u6bb5\u843d\uff0c\u4ece\u800c\u964d\u4f4e\u6574\u4e2a\u7a0b\u5e8f\u7684\u590d\u6742\u5ea6\uff1b \u63d0\u9ad8\u53ef\u91cd\u7528\u6027 -- \u5f53\u51fd\u6570\u88ab\u7f16\u5199\u540e\uff0c\u5b83\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u88ab\u591a\u6b21\u8c03\u7528\u3002\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u4ee3\u7801 (\u201cDon\u2019t Repeat Yourself\u201d\u539f\u5219)\u800c\u4e14\u80fd\u591f\u6700\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u6240\u53ef\u80fd\u5e26\u6765\u7684\u9519\u8bef\u3002\u51fd\u6570\u8fd8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u95f4\u5171\u4eab\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u7f16\u5199\uff08\u6216\u6d4b\u8bd5\uff09\u4ee3\u7801\u3002\uff1b \u4fbf\u4e8e\u6d4b\u8bd5\u4ee3\u7801 -- \u51fd\u6570\u53ef\u4ee5\u51cf\u5c11\u5197\u4f59\u4ee3\u7801\uff0c\u56e0\u6b64\u9996\u5148\u5c31\u53ef\u4ee5\u51cf\u5c11\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u6570\u91cf\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u51fd\u6570\u662f\u81ea\u5305\u542b\u7684\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u901a\u8fc7\u6d4b\u8bd5\u5e76\u786e\u4fdd\u6b63\u786e\u5de5\u4f5c\u540e\uff0c\u9664\u975e\u5b83\u88ab\u4fee\u6539\u4e86\uff0c\u5426\u5219\u5c06\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u4e48\u505a\u663e\u7136\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\uff0c\u53d1\u73b0bug\u7684\u96be\u5ea6\u4e5f\u5c31\u968f\u4e4b\u964d\u4f4e\u4e86\uff08\u4e5f\u66f4\u52a0\u5bb9\u6613\u907f\u514dbug\uff09\uff1b \u63d0\u9ad8\u53ef\u6269\u5c55\u6027 -- \u5f53\u6211\u4eec\u9700\u8981\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u4f7f\u5176\u80fd\u591f\u5904\u7406\u4e4b\u524d\u4e0d\u80fd\u5904\u7406\u7684\u60c5\u51b5\u65f6\uff0c\u51fd\u6570\u80fd\u591f\u4f7f\u6211\u4eec\u5728\u4e00\u5904\u8fdb\u884c\u6539\u52a8\u5e76\u5c06\u6539\u52a8\u7684\u6548\u679c\u5e94\u7528\u5230\u6240\u6709\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u7684\u5730\u65b9\uff1b \u63d0\u9ad8\u62bd\u8c61\u7a0b\u5ea6 -- \u4e3a\u4e86\u4f7f\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u77e5\u6653\u5176\u51fd\u6570\u540d\u3001\u8f93\u5165\u3001\u8f93\u51fa\u4ee5\u53ca\u5b83\u6240\u5904\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u5fc5\u77e5\u9053\u5b83\u5982\u4f55\u5de5\u4f5c\u6216\u8005\u4efb\u4f55\u4e0e\u4f7f\u7528\u5176\u529f\u80fd\u4e0d\u76f8\u5e72\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5728\u4f7f\u7528\u4ed6\u4eba\u7684\u4ee3\u7801\uff08\u6216\u8005\u4efb\u4f55\u6807\u51c6\u5e93\u4e2d\u7684\u51fd\u6570\uff09\u65f6\uff0c\u4f60\u7684\u8ba4\u77e5\u8d1f\u8f7d\u5c31\u964d\u4f4e\u4e86\u3002 \u5c3d\u7ba1\u770b\u4e0a\u53bb\u4e0d\u50cf\uff0c\u4f46\u5b9e\u9645\u4e0a\u6bcf\u5f53\u4f60\u4f7f\u7528 operator<< \u6216 operator>> \u8fd0\u7b97\u7b26\u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u5728\u4f7f\u7528\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u540c\u6837\u5177\u6709\u4e0a\u8ff0\u5168\u90e8\u7684\u4f18\u70b9\u3002 \u9ad8\u6548\u5730\u4f7f\u7528\u51fd\u6570 \u65b0\u624b\u7a0b\u5e8f\u5458\u9047\u5230\u7684\uff08\u9664\u4e86\u5b66\u4e60\u8bed\u8a00\u672c\u8eab\uff09\u6700\u5927\u6311\u6218\u4fbf\u662f\u7406\u89e3\u4f55\u65f6\uff0c\u4ee5\u53ca\u5982\u4f55\u9ad8\u6548\u5730\u4f7f\u7528\u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5173\u4e8e\u7f16\u5199\u51fd\u6570\u7684\u6307\u5bfc\u539f\u5219\uff1a \u5728\u7a0b\u5e8f\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u4e00\u7ec4\u8bed\u53e5\uff0c\u901a\u5e38\u53ef\u4ee5\u88ab\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u591a\u6b21\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u8f93\u5165\uff0c\u90a3\u4e48\u8fd9\u4e9b\u91cd\u590d\u4ee3\u7801\u5c31\u5f88\u9002\u5408\u88ab\u5c01\u88c5\u6210\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u4ee5\u540c\u6837\u7684\u5f62\u5f0f\u5728\u591a\u5904\u8fdb\u884c\u8f93\u51fa\uff0c\u8fd9\u540c\u6837\u4e5f\u662f\u975e\u5e38\u9002\u5408\u5c01\u88c5\u51fd\u6570\u7684\u60c5\u666f\uff1b \u660e\u786e\u5b9a\u4e49\u4e86\u8f93\u5165\u548c\u8f93\u51fa\u7684\u4ee3\u7801\u975e\u5e38\u9002\u5408\u5c01\u88c5\u6210\u51fd\u6570\uff08\u5c24\u5176\u662f\u5f53\u8fd9\u4e9b\u4ee3\u7801\u975e\u5e38\u590d\u6742\u7684\u65f6\u5019\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u8981\u6392\u5e8f\u7684\u5217\u8868\uff0c\u90a3\u4e48\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u7684\u4ee3\u7801\u5c31\u975e\u5e38\u9002\u5408\u4f5c\u4e3a\u51fd\u6570\uff0c\u65e2\u662f\u8be5\u6392\u5e8f\u53ef\u80fd\u53ea\u8fdb\u884c\u4f9d\u6b21\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u5217\u8868\uff0c\u8f93\u51fa\u5219\u662f\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u5217\u8868\u3002\u8fd8\u6709\u5f88\u597d\u7684\u4f8b\u5b50\u662f\uff0c\u5982\u679c\u4f60\u7f16\u5199\u4e86\u4e00\u4e9b\u6a21\u62df\u63b7\u9ab0\u5b50\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48\u5b83\u4e5f\u5f88\u9002\u5408\u4f5c\u4e3a\u51fd\u6570\u3002\u5c3d\u7ba1\u5728\u5f53\u524d\u7684\u7a0b\u5e8f\u4e2d\u4f60\u53ef\u80fd\u53ea\u4f1a\u4f7f\u7528\u5b83\u4e00\u6b21\uff0c\u4f46\u662f\u5c06\u6765\u5982\u679c\u4f60\u60f3\u6269\u5c55\u7a0b\u5e8f\u6216\u7f16\u5199\u5176\u4ed6\u7a0b\u5e8f\uff0c\u8be5\u529f\u80fd\u5c31\u53ef\u4ee5\u76f4\u63a5\u88ab\u590d\u7528\uff1b \u4e00\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u4e00\u4ef6\u4e8b\uff1b \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u53d8\u5f97\u53c8\u957f\u3001\u53c8\u590d\u6742\u3001\u6216\u8005\u96be\u4ee5\u7406\u89e3\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u5e94\u8be5\u88ab\u518d\u6b21\u62c6\u5206\uff0c\u53d8\u6210\u51e0\u4e2a\u5b50\u51fd\u6570\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a[[\u91cd\u6784(refactoring)]] \u3002\u6211\u4eec\u4f1a\u5728[[3.10 \u2014 Finding issues before they become problems]]\u4e2d\u4ecb\u7ecd\u91cd\u6784\u7684\u6982\u5ff5\u3002 \u901a\u5e38\uff0c\u5728\u5b66\u4e60C++\u7684\u65f6\u5019\uff0c\u4f60\u7f16\u5199\u7684\u5f88\u591a\u7a0b\u5e8f\u90fd\u6d89\u53ca\u5230\u5982\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u5b50\u4efb\u52a1\uff1a \u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff1b \u57fa\u4e8e\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97\uff1b \u6253\u5370\u8ba1\u7b97\u7684\u7ed3\u679c\u3002 \u5bf9\u4e8e\u77ed\u5c0f\u7684\u7a0b\u5e8f (\u4f8b\u5982\uff0c\u5c0f\u4e8e20\u884c\u4ee3\u7801\u7684\u7a0b\u5e8f\uff09\uff0c\u4e0a\u8ff0\u4e09\u4e2a\u5b50\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u5b8c\u6210\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u66f4\u957f\uff08\u6216\u8005\u51fa\u4e8e\u7ec3\u4e60\u7684\u76ee\u7684\uff09\uff0c\u4e0a\u8ff0\u4e09\u4e2a\u4efb\u52a1\u90fd\u5f88\u9002\u5408\u5404\u81ea\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u3002 \u65b0\u624b\u7a0b\u5e8f\u5458\u901a\u5e38\u4f1a\u5c06\u8ba1\u7b97\u7ed3\u679c\u548c\u6253\u5370\u7ed3\u679c\u8fd9\u4e24\u6b65\u5408\u5e76\u4e3a\u4e00\u4e2a\u51fd\u6570\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e48\u505a\u8fdd\u53cd\u4e86\u201c\u4e00\u4e2a\u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u201d \u7684\u539f\u5219\u3002\u8d1f\u8d23\u8ba1\u7b97\u7ed3\u679c\u7684\u51fd\u6570\u5e94\u8be5\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u7136\u540e\u8ba9\u4e3b\u8c03\u51fd\u6570\u51b3\u5b9a\u5982\u4f55\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\uff08\u4f8b\u5982\u8c03\u7528\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u5c06\u8be5\u7ed3\u679c\u6253\u5370\u51fa\u6765\uff09\u3002","title":"2.06 \u51fd\u6570\u4e3a\u4f55\u6709\u7528\uff0c\u5982\u4f55\u9ad8\u6548\u4f7f\u7528\u51fd\u6570"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.06%20%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BD%95%E6%9C%89%E7%94%A8%EF%BC%8C%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0/#26","text":"\u901a\u8fc7\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u51fd\u6570\u4ee5\u53ca\u51fd\u6570\u7684\u57fa\u672c\u529f\u80fd\uff0c\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\uff0c\u4e3a\u4ec0\u4e48\u8bf4\u51fd\u6570\u975e\u5e38\u6709\u7528\u3002","title":"2.6 \u51fd\u6570\u4e3a\u4f55\u6709\u7528\uff0c\u5982\u4f55\u9ad8\u6548\u4f7f\u7528\u51fd\u6570"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.06%20%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BD%95%E6%9C%89%E7%94%A8%EF%BC%8C%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0/#_1","text":"\u65b0\u624b\u7a0b\u5e8f\u5458\u603b\u4f1a\u95ee\uff1a\u201c\u96be\u9053\u6211\u4eec\u5c31\u4e0d\u80fd\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u585e\u5230 main \u51fd\u6570\u91cc\u9762\u5417\uff1f\u201d \uff0c\u5176\u5b9e\u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u4f60\u7684\u786e\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u4ee3\u7801\u90fd\u585e\u5230 main \u51fd\u6570\u91cc\u9762\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4ee3\u7801\u91cf\u6bd4\u8f83\u591a\u6216\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4f7f\u7528\u51fd\u6570\u80fd\u591f\u5e26\u6765\u5f88\u591a\u597d\u5904\uff1a \u4fbf\u4e8e\u7ec4\u7ec7\u4ee3\u7801 -- \u968f\u7740\u7a0b\u5e8f\u7684\u590d\u6742\u6027\u8d8a\u6765\u8d8a\u9ad8\uff0c\u5c06\u6240\u6709\u7684\u4ee3\u7801\u90fd\u662f\u585e\u5230 main \u51fd\u6570\u4e2d\u4f1a\u4f7f main \u51fd\u6570\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u51fd\u6570\u770b\u505a\u662f\u4e00\u4e2a\u4e2a\u72ec\u7acb\u4e8e\u4e3b\u7a0b\u5e8f\u7684\u8ff7\u4f60\u7a0b\u5e8f\uff0c\u5728\u7f16\u5199\u5b83\u4eec\u7684\u65f6\u5019\u6211\u4eec\u65e0\u9700\u8003\u8651\u5176\u4ed6\u7a0b\u5e8f\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u7a0b\u5e8f\u7b80\u5316\u4e3a\u591a\u4e2a\u66f4\u5c0f\u3001\u66f4\u6613\u7ef4\u62a4\u7684\u6bb5\u843d\uff0c\u4ece\u800c\u964d\u4f4e\u6574\u4e2a\u7a0b\u5e8f\u7684\u590d\u6742\u5ea6\uff1b \u63d0\u9ad8\u53ef\u91cd\u7528\u6027 -- \u5f53\u51fd\u6570\u88ab\u7f16\u5199\u540e\uff0c\u5b83\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u88ab\u591a\u6b21\u8c03\u7528\u3002\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u4ee3\u7801 (\u201cDon\u2019t Repeat Yourself\u201d\u539f\u5219)\u800c\u4e14\u80fd\u591f\u6700\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u590d\u5236\u7c98\u8d34\u4ee3\u7801\u6240\u53ef\u80fd\u5e26\u6765\u7684\u9519\u8bef\u3002\u51fd\u6570\u8fd8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u95f4\u5171\u4eab\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u7f16\u5199\uff08\u6216\u6d4b\u8bd5\uff09\u4ee3\u7801\u3002\uff1b \u4fbf\u4e8e\u6d4b\u8bd5\u4ee3\u7801 -- \u51fd\u6570\u53ef\u4ee5\u51cf\u5c11\u5197\u4f59\u4ee3\u7801\uff0c\u56e0\u6b64\u9996\u5148\u5c31\u53ef\u4ee5\u51cf\u5c11\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u6570\u91cf\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u51fd\u6570\u662f\u81ea\u5305\u542b\u7684\uff0c\u56e0\u6b64\u5f53\u51fd\u6570\u901a\u8fc7\u6d4b\u8bd5\u5e76\u786e\u4fdd\u6b63\u786e\u5de5\u4f5c\u540e\uff0c\u9664\u975e\u5b83\u88ab\u4fee\u6539\u4e86\uff0c\u5426\u5219\u5c06\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u4e48\u505a\u663e\u7136\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\uff0c\u53d1\u73b0bug\u7684\u96be\u5ea6\u4e5f\u5c31\u968f\u4e4b\u964d\u4f4e\u4e86\uff08\u4e5f\u66f4\u52a0\u5bb9\u6613\u907f\u514dbug\uff09\uff1b \u63d0\u9ad8\u53ef\u6269\u5c55\u6027 -- \u5f53\u6211\u4eec\u9700\u8981\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u4f7f\u5176\u80fd\u591f\u5904\u7406\u4e4b\u524d\u4e0d\u80fd\u5904\u7406\u7684\u60c5\u51b5\u65f6\uff0c\u51fd\u6570\u80fd\u591f\u4f7f\u6211\u4eec\u5728\u4e00\u5904\u8fdb\u884c\u6539\u52a8\u5e76\u5c06\u6539\u52a8\u7684\u6548\u679c\u5e94\u7528\u5230\u6240\u6709\u8c03\u7528\u4e86\u8be5\u51fd\u6570\u7684\u5730\u65b9\uff1b \u63d0\u9ad8\u62bd\u8c61\u7a0b\u5ea6 -- \u4e3a\u4e86\u4f7f\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u77e5\u6653\u5176\u51fd\u6570\u540d\u3001\u8f93\u5165\u3001\u8f93\u51fa\u4ee5\u53ca\u5b83\u6240\u5904\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u5fc5\u77e5\u9053\u5b83\u5982\u4f55\u5de5\u4f5c\u6216\u8005\u4efb\u4f55\u4e0e\u4f7f\u7528\u5176\u529f\u80fd\u4e0d\u76f8\u5e72\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5728\u4f7f\u7528\u4ed6\u4eba\u7684\u4ee3\u7801\uff08\u6216\u8005\u4efb\u4f55\u6807\u51c6\u5e93\u4e2d\u7684\u51fd\u6570\uff09\u65f6\uff0c\u4f60\u7684\u8ba4\u77e5\u8d1f\u8f7d\u5c31\u964d\u4f4e\u4e86\u3002 \u5c3d\u7ba1\u770b\u4e0a\u53bb\u4e0d\u50cf\uff0c\u4f46\u5b9e\u9645\u4e0a\u6bcf\u5f53\u4f60\u4f7f\u7528 operator<< \u6216 operator>> \u8fd0\u7b97\u7b26\u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u5728\u4f7f\u7528\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u540c\u6837\u5177\u6709\u4e0a\u8ff0\u5168\u90e8\u7684\u4f18\u70b9\u3002 \u9ad8\u6548\u5730\u4f7f\u7528\u51fd\u6570 \u65b0\u624b\u7a0b\u5e8f\u5458\u9047\u5230\u7684\uff08\u9664\u4e86\u5b66\u4e60\u8bed\u8a00\u672c\u8eab\uff09\u6700\u5927\u6311\u6218\u4fbf\u662f\u7406\u89e3\u4f55\u65f6\uff0c\u4ee5\u53ca\u5982\u4f55\u9ad8\u6548\u5730\u4f7f\u7528\u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5173\u4e8e\u7f16\u5199\u51fd\u6570\u7684\u6307\u5bfc\u539f\u5219\uff1a \u5728\u7a0b\u5e8f\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u4e00\u7ec4\u8bed\u53e5\uff0c\u901a\u5e38\u53ef\u4ee5\u88ab\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u591a\u6b21\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u8f93\u5165\uff0c\u90a3\u4e48\u8fd9\u4e9b\u91cd\u590d\u4ee3\u7801\u5c31\u5f88\u9002\u5408\u88ab\u5c01\u88c5\u6210\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u4ee5\u540c\u6837\u7684\u5f62\u5f0f\u5728\u591a\u5904\u8fdb\u884c\u8f93\u51fa\uff0c\u8fd9\u540c\u6837\u4e5f\u662f\u975e\u5e38\u9002\u5408\u5c01\u88c5\u51fd\u6570\u7684\u60c5\u666f\uff1b \u660e\u786e\u5b9a\u4e49\u4e86\u8f93\u5165\u548c\u8f93\u51fa\u7684\u4ee3\u7801\u975e\u5e38\u9002\u5408\u5c01\u88c5\u6210\u51fd\u6570\uff08\u5c24\u5176\u662f\u5f53\u8fd9\u4e9b\u4ee3\u7801\u975e\u5e38\u590d\u6742\u7684\u65f6\u5019\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u8981\u6392\u5e8f\u7684\u5217\u8868\uff0c\u90a3\u4e48\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u7684\u4ee3\u7801\u5c31\u975e\u5e38\u9002\u5408\u4f5c\u4e3a\u51fd\u6570\uff0c\u65e2\u662f\u8be5\u6392\u5e8f\u53ef\u80fd\u53ea\u8fdb\u884c\u4f9d\u6b21\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u5217\u8868\uff0c\u8f93\u51fa\u5219\u662f\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u5217\u8868\u3002\u8fd8\u6709\u5f88\u597d\u7684\u4f8b\u5b50\u662f\uff0c\u5982\u679c\u4f60\u7f16\u5199\u4e86\u4e00\u4e9b\u6a21\u62df\u63b7\u9ab0\u5b50\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48\u5b83\u4e5f\u5f88\u9002\u5408\u4f5c\u4e3a\u51fd\u6570\u3002\u5c3d\u7ba1\u5728\u5f53\u524d\u7684\u7a0b\u5e8f\u4e2d\u4f60\u53ef\u80fd\u53ea\u4f1a\u4f7f\u7528\u5b83\u4e00\u6b21\uff0c\u4f46\u662f\u5c06\u6765\u5982\u679c\u4f60\u60f3\u6269\u5c55\u7a0b\u5e8f\u6216\u7f16\u5199\u5176\u4ed6\u7a0b\u5e8f\uff0c\u8be5\u529f\u80fd\u5c31\u53ef\u4ee5\u76f4\u63a5\u88ab\u590d\u7528\uff1b \u4e00\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u4e00\u4ef6\u4e8b\uff1b \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u53d8\u5f97\u53c8\u957f\u3001\u53c8\u590d\u6742\u3001\u6216\u8005\u96be\u4ee5\u7406\u89e3\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u5e94\u8be5\u88ab\u518d\u6b21\u62c6\u5206\uff0c\u53d8\u6210\u51e0\u4e2a\u5b50\u51fd\u6570\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a[[\u91cd\u6784(refactoring)]] \u3002\u6211\u4eec\u4f1a\u5728[[3.10 \u2014 Finding issues before they become problems]]\u4e2d\u4ecb\u7ecd\u91cd\u6784\u7684\u6982\u5ff5\u3002 \u901a\u5e38\uff0c\u5728\u5b66\u4e60C++\u7684\u65f6\u5019\uff0c\u4f60\u7f16\u5199\u7684\u5f88\u591a\u7a0b\u5e8f\u90fd\u6d89\u53ca\u5230\u5982\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u5b50\u4efb\u52a1\uff1a \u4ece\u7528\u6237\u83b7\u53d6\u8f93\u5165\uff1b \u57fa\u4e8e\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97\uff1b \u6253\u5370\u8ba1\u7b97\u7684\u7ed3\u679c\u3002 \u5bf9\u4e8e\u77ed\u5c0f\u7684\u7a0b\u5e8f (\u4f8b\u5982\uff0c\u5c0f\u4e8e20\u884c\u4ee3\u7801\u7684\u7a0b\u5e8f\uff09\uff0c\u4e0a\u8ff0\u4e09\u4e2a\u5b50\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u5b8c\u6210\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u66f4\u957f\uff08\u6216\u8005\u51fa\u4e8e\u7ec3\u4e60\u7684\u76ee\u7684\uff09\uff0c\u4e0a\u8ff0\u4e09\u4e2a\u4efb\u52a1\u90fd\u5f88\u9002\u5408\u5404\u81ea\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u3002 \u65b0\u624b\u7a0b\u5e8f\u5458\u901a\u5e38\u4f1a\u5c06\u8ba1\u7b97\u7ed3\u679c\u548c\u6253\u5370\u7ed3\u679c\u8fd9\u4e24\u6b65\u5408\u5e76\u4e3a\u4e00\u4e2a\u51fd\u6570\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e48\u505a\u8fdd\u53cd\u4e86\u201c\u4e00\u4e2a\u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u201d \u7684\u539f\u5219\u3002\u8d1f\u8d23\u8ba1\u7b97\u7ed3\u679c\u7684\u51fd\u6570\u5e94\u8be5\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u4e3b\u8c03\u51fd\u6570\uff0c\u7136\u540e\u8ba9\u4e3b\u8c03\u51fd\u6570\u51b3\u5b9a\u5982\u4f55\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\uff08\u4f8b\u5982\u8c03\u7528\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u5c06\u8be5\u7ed3\u679c\u6253\u5370\u51fa\u6765\uff09\u3002","title":"\u51fd\u6570\u4e3a\u4ec0\u4e48\u6709\u7528"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/","text":"[!INFO] \u539f\u6587\u4fe1\u606f\uff1a - \u94fe\u63a5\uff1a 2.7 \u2014 Forward declarations and definitions - \u4f5c\u8005\uff1a ALEX - 2022-5-19 2.7 \u524d\u5411\u58f0\u660e\u548c\u5b9a\u4e49 Take a look at this seemingly innocent sample program: 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } int add ( int x , int y ) { return x + y ; } You would expect this program to produce the result: 1 The sum of 3 and 4 is: 7 But in fact, it doesn\u2019t compile at all! Visual Studio produces the following compile error: 1 add.cpp(5) : error C3861: 'add': identifier not found The reason this program doesn\u2019t compile is because the compiler compiles the contents of code files sequentially. When the compiler reaches the function call to add on line 5 of main , it doesn\u2019t know what add is, because we haven\u2019t defined add until line 9! That produces the error, identifier not found . Older versions of Visual Studio would produce an additional error: 1 add.cpp(9) : error C2365: 'add'; : redefinition; previous definition was 'formerly unknown identifier' This is somewhat misleading, given that add wasn\u2019t ever defined in the first place. Despite this, it\u2019s useful to generally note that it is fairly common for a single error to produce many redundant or related errors or warnings. [!TIP] \u6700\u4f73\u5b9e\u8df5 When addressing compile errors in your programs, always resolve the first error produced first and then compile again. To fix this problem, we need to address the fact that the compiler doesn\u2019t know what add is. There are two common ways to address the issue. Option 1: Reorder the function definitions One way to address the issue is to reorder the function definitions so add is defined before main : 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int add ( int x , int y ) { return x + y ; } int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } COPY That way, by the time main calls add , the compiler will already know what add is. Because this is such a simple program, this change is relatively easy to do. However, in a larger program, it can be tedious trying to figure out which functions call which other functions (and in what order) so they can be declared sequentially. Furthermore, this option is not always possible. Let\u2019s say we\u2019re writing a program that has two functions A and B . If function A calls function B , and function B calls function A , then there\u2019s no way to order the functions in a way that will make the compiler happy. If you define A first, the compiler will complain it doesn\u2019t know what B is. If you define B first, the compiler will complain that it doesn\u2019t know what A is. Option 2: Use a forward declaration We can also fix this by using a \u524d\u5411\u58f0\u660e\uff08[[\u524d\u5411\u58f0\u660e(forward declaration)]]\uff09 A forward declaration allows us to tell the compiler about the existence of an identifier before actually defining the identifier. In the case of functions, this allows us to tell the compiler about the existence of a function before we define the function\u2019s body. This way, when the compiler encounters a call to the function, it\u2019ll understand that we\u2019re making a function call, and can check to ensure we\u2019re calling the function correctly, even if it doesn\u2019t yet know how or where the function is defined. To write a forward declaration for a function, we use a declaration statement called a function prototype. The function prototype consists of the function header (the function\u2019s return type, name, and parameter types), terminated with a semicolon. The function body is not included in the prototype. Here\u2019s a function prototype for the add function: 1 int add ( int x , int y ); // function prototype includes return type, name, parameters, and semicolon. No function body! COPY Now, here\u2019s our original program that didn\u2019t compile, using a function prototype as a forward declaration for function add : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> int add ( int x , int y ); // forward declaration of add() (using a function prototype) int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; // this works because we forward declared add() above return 0 ; } int add ( int x , int y ) // even though the body of add() isn't defined until here { return x + y ; } Now when the compiler reaches the call to add in main, it will know what add looks like (a function that takes two integer parameters and returns an integer), and it won\u2019t complain. It is worth noting that function prototypes do not need to specify the names of the parameters. In the above code, you can also forward declare your function like this: 1 int add ( int , int ); // valid function prototype However, we prefer to name our parameters (using the same names as the actual function), because it allows you to understand what the function parameters are just by looking at the prototype. Otherwise, you\u2019ll have to locate the function definition. [!TIP] \u6700\u4f73\u5b9e\u8df5 When defining function prototypes, keep the parameter names. You can easily create forward declarations by copy/pasting your function\u2019s prototype and adding a semicolon. Forgetting the function body New programmers often wonder what happens if they forward declare a function but do not define it. The answer is: it depends. If a forward declaration is made, but the function is never called, the program will compile and run fine. However, if a forward declaration is made and the function is called, but the program never defines the function, the program will compile okay, but the linker will complain that it can\u2019t resolve the function call. Consider the following program: 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int add ( int x , int y ); // forward declaration of add() using function prototype int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } // note: No definition for function add COPY In this program, we forward declare add , and we call add , but we never define add anywhere. When we try and compile this program, Visual Studio produces the following message: 1 2 3 4 5 Compiling... add.cpp Linking... add.obj : error LNK2001: unresolved external symbol \"int __cdecl add(int,int)\" (?add@@YAHHH@Z) add.exe : fatal error LNK1120: 1 unresolved externals As you can see, the program compiled okay, but it failed at the link stage because int add(int, int) was never defined. Other types of forward declarations Forward declarations are most often used with functions. However, forward declarations can also be used with other identifiers in C++, such as variables and user-defined types. Variables and user-defined types have a different syntax for forward declaration, so we\u2019ll cover these in future lessons. Declarations vs. definitions In C++, you\u2019ll frequently hear the words \u201cdeclaration\u201d and \u201cdefinition\u201d used, and often interchangeably. What do they mean? You now have enough fundamental knowledge to understand the difference between the two. A definition actually implements (for functions or types) or instantiates (for variables) the identifier. Here are some examples of definitions: 1 2 3 4 5 6 int add ( int x , int y ) // implements function add() { int z { x + y }; // instantiates variable z return z ; } COPY A definition is needed to satisfy the linker . If you use an identifier without providing a definition, the linker will error. The one definition rule (or ODR for short) is a well-known rule in C++. The ODR has three parts: Within a given file , a function, variable, type, or template can only have one definition. Within a given program , a variable or normal function can only have one definition. This distinction is made because programs can have more than one file (we\u2019ll cover this in the next lesson). Types, templates, inline functions, and inline variables are allowed to have identical definitions in different files. We haven\u2019t covered what most of these things are yet, so don\u2019t worry about this for now -- we\u2019ll bring it back up when it\u2019s relevant. Violating part 1 of the ODR will cause the compiler to issue a redefinition error. Violating ODR part 2 will likely cause the linker to issue a redefinition error. Violating ODR part 3 will cause undefined behavior. Here\u2019s an example of a violation of part 1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) // violation of ODR, we've already defined function add { return x + y ; } int main () { int x ; int x ; // violation of ODR, we've already defined x } COPY Because the above program violates ODR part 1, this causes the Visual Studio compiler to issue the following compile errors: 1 2 3 4 project3.cpp(9): error C2084: function 'int add(int,int)' already has a body project3.cpp(3): note: see previous definition of 'add' project3.cpp(16): error C2086: 'int x': redefinition project3.cpp(15): note: see declaration of 'x' [!INFO] \u6269\u5c55\u9605\u8bfb Functions that share an identifier but have different parameters are considered to be distinct functions. We discuss this further in lesson 8.9 -- Introduction to function overloading A declaration is a statement that tells the compiler about the existence of an identifier and its type information. Here are some examples of declarations: 1 2 int add ( int x , int y ); // tells the compiler about a function named \"add\" that takes two int parameters and returns an int. No body! int x ; // tells the compiler about an integer variable named x A declaration is all that is needed to satisfy the compiler. This is why we can use a forward declaration to tell the compiler about an identifier that isn\u2019t actually defined until later. In C++, all definitions also serve as declarations. This is why int x appears in our examples for both definitions and declarations. Since int x is a definition, it\u2019s a declaration too. In most cases, a definition serves our purposes, as it satisfies both the compiler and linker. We only need to provide an explicit declaration when we want to use an identifier before it has been defined. While it is true that all definitions are declarations, the converse is not true: not all declarations are definitions. An example of this is the function prototype -- it satisfies the compiler, but not the linker. These declarations that aren\u2019t definitions are called pure declarations. Other types of pure declarations include forward declarations for variables and type declarations (you will encounter these in future lessons, no need to worry about them now). The ODR doesn\u2019t apply to pure declarations (it\u2019s the one definition rule , not the one declaration rule ), so you can have as many pure declarations for an identifier as you desire (although having more than one is redundant). [!NOTE] \u4f5c\u8005\u6ce8 In common language, the term \u201cdeclaration\u201d is typically used to mean \u201ca pure declaration\u201d, and \u201cdefinition\u201d is used to mean \u201ca definition that also serves as a declaration\u201d. Thus, we\u2019d typically call int x; a definition, even though it is both a definition and a declaration.","title":"2.07 \u524d\u5411\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/#27","text":"Take a look at this seemingly innocent sample program: 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } int add ( int x , int y ) { return x + y ; } You would expect this program to produce the result: 1 The sum of 3 and 4 is: 7 But in fact, it doesn\u2019t compile at all! Visual Studio produces the following compile error: 1 add.cpp(5) : error C3861: 'add': identifier not found The reason this program doesn\u2019t compile is because the compiler compiles the contents of code files sequentially. When the compiler reaches the function call to add on line 5 of main , it doesn\u2019t know what add is, because we haven\u2019t defined add until line 9! That produces the error, identifier not found . Older versions of Visual Studio would produce an additional error: 1 add.cpp(9) : error C2365: 'add'; : redefinition; previous definition was 'formerly unknown identifier' This is somewhat misleading, given that add wasn\u2019t ever defined in the first place. Despite this, it\u2019s useful to generally note that it is fairly common for a single error to produce many redundant or related errors or warnings. [!TIP] \u6700\u4f73\u5b9e\u8df5 When addressing compile errors in your programs, always resolve the first error produced first and then compile again. To fix this problem, we need to address the fact that the compiler doesn\u2019t know what add is. There are two common ways to address the issue.","title":"2.7 \u524d\u5411\u58f0\u660e\u548c\u5b9a\u4e49"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/#option-1-reorder-the-function-definitions","text":"One way to address the issue is to reorder the function definitions so add is defined before main : 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> int add ( int x , int y ) { return x + y ; } int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } COPY That way, by the time main calls add , the compiler will already know what add is. Because this is such a simple program, this change is relatively easy to do. However, in a larger program, it can be tedious trying to figure out which functions call which other functions (and in what order) so they can be declared sequentially. Furthermore, this option is not always possible. Let\u2019s say we\u2019re writing a program that has two functions A and B . If function A calls function B , and function B calls function A , then there\u2019s no way to order the functions in a way that will make the compiler happy. If you define A first, the compiler will complain it doesn\u2019t know what B is. If you define B first, the compiler will complain that it doesn\u2019t know what A is.","title":"Option 1: Reorder the function definitions"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/#option-2-use-a-forward-declaration","text":"We can also fix this by using a \u524d\u5411\u58f0\u660e\uff08[[\u524d\u5411\u58f0\u660e(forward declaration)]]\uff09 A forward declaration allows us to tell the compiler about the existence of an identifier before actually defining the identifier. In the case of functions, this allows us to tell the compiler about the existence of a function before we define the function\u2019s body. This way, when the compiler encounters a call to the function, it\u2019ll understand that we\u2019re making a function call, and can check to ensure we\u2019re calling the function correctly, even if it doesn\u2019t yet know how or where the function is defined. To write a forward declaration for a function, we use a declaration statement called a function prototype. The function prototype consists of the function header (the function\u2019s return type, name, and parameter types), terminated with a semicolon. The function body is not included in the prototype. Here\u2019s a function prototype for the add function: 1 int add ( int x , int y ); // function prototype includes return type, name, parameters, and semicolon. No function body! COPY Now, here\u2019s our original program that didn\u2019t compile, using a function prototype as a forward declaration for function add : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> int add ( int x , int y ); // forward declaration of add() (using a function prototype) int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; // this works because we forward declared add() above return 0 ; } int add ( int x , int y ) // even though the body of add() isn't defined until here { return x + y ; } Now when the compiler reaches the call to add in main, it will know what add looks like (a function that takes two integer parameters and returns an integer), and it won\u2019t complain. It is worth noting that function prototypes do not need to specify the names of the parameters. In the above code, you can also forward declare your function like this: 1 int add ( int , int ); // valid function prototype However, we prefer to name our parameters (using the same names as the actual function), because it allows you to understand what the function parameters are just by looking at the prototype. Otherwise, you\u2019ll have to locate the function definition. [!TIP] \u6700\u4f73\u5b9e\u8df5 When defining function prototypes, keep the parameter names. You can easily create forward declarations by copy/pasting your function\u2019s prototype and adding a semicolon.","title":"Option 2: Use a forward declaration"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/#forgetting-the-function-body","text":"New programmers often wonder what happens if they forward declare a function but do not define it. The answer is: it depends. If a forward declaration is made, but the function is never called, the program will compile and run fine. However, if a forward declaration is made and the function is called, but the program never defines the function, the program will compile okay, but the linker will complain that it can\u2019t resolve the function call. Consider the following program: 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> int add ( int x , int y ); // forward declaration of add() using function prototype int main () { std :: cout << \"The sum of 3 and 4 is: \" << add ( 3 , 4 ) << '\\n' ; return 0 ; } // note: No definition for function add COPY In this program, we forward declare add , and we call add , but we never define add anywhere. When we try and compile this program, Visual Studio produces the following message: 1 2 3 4 5 Compiling... add.cpp Linking... add.obj : error LNK2001: unresolved external symbol \"int __cdecl add(int,int)\" (?add@@YAHHH@Z) add.exe : fatal error LNK1120: 1 unresolved externals As you can see, the program compiled okay, but it failed at the link stage because int add(int, int) was never defined. Other types of forward declarations Forward declarations are most often used with functions. However, forward declarations can also be used with other identifiers in C++, such as variables and user-defined types. Variables and user-defined types have a different syntax for forward declaration, so we\u2019ll cover these in future lessons.","title":"Forgetting the function body"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.07%20%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89/#declarations-vs-definitions","text":"In C++, you\u2019ll frequently hear the words \u201cdeclaration\u201d and \u201cdefinition\u201d used, and often interchangeably. What do they mean? You now have enough fundamental knowledge to understand the difference between the two. A definition actually implements (for functions or types) or instantiates (for variables) the identifier. Here are some examples of definitions: 1 2 3 4 5 6 int add ( int x , int y ) // implements function add() { int z { x + y }; // instantiates variable z return z ; } COPY A definition is needed to satisfy the linker . If you use an identifier without providing a definition, the linker will error. The one definition rule (or ODR for short) is a well-known rule in C++. The ODR has three parts: Within a given file , a function, variable, type, or template can only have one definition. Within a given program , a variable or normal function can only have one definition. This distinction is made because programs can have more than one file (we\u2019ll cover this in the next lesson). Types, templates, inline functions, and inline variables are allowed to have identical definitions in different files. We haven\u2019t covered what most of these things are yet, so don\u2019t worry about this for now -- we\u2019ll bring it back up when it\u2019s relevant. Violating part 1 of the ODR will cause the compiler to issue a redefinition error. Violating ODR part 2 will likely cause the linker to issue a redefinition error. Violating ODR part 3 will cause undefined behavior. Here\u2019s an example of a violation of part 1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int add ( int x , int y ) { return x + y ; } int add ( int x , int y ) // violation of ODR, we've already defined function add { return x + y ; } int main () { int x ; int x ; // violation of ODR, we've already defined x } COPY Because the above program violates ODR part 1, this causes the Visual Studio compiler to issue the following compile errors: 1 2 3 4 project3.cpp(9): error C2084: function 'int add(int,int)' already has a body project3.cpp(3): note: see previous definition of 'add' project3.cpp(16): error C2086: 'int x': redefinition project3.cpp(15): note: see declaration of 'x' [!INFO] \u6269\u5c55\u9605\u8bfb Functions that share an identifier but have different parameters are considered to be distinct functions. We discuss this further in lesson 8.9 -- Introduction to function overloading A declaration is a statement that tells the compiler about the existence of an identifier and its type information. Here are some examples of declarations: 1 2 int add ( int x , int y ); // tells the compiler about a function named \"add\" that takes two int parameters and returns an int. No body! int x ; // tells the compiler about an integer variable named x A declaration is all that is needed to satisfy the compiler. This is why we can use a forward declaration to tell the compiler about an identifier that isn\u2019t actually defined until later. In C++, all definitions also serve as declarations. This is why int x appears in our examples for both definitions and declarations. Since int x is a definition, it\u2019s a declaration too. In most cases, a definition serves our purposes, as it satisfies both the compiler and linker. We only need to provide an explicit declaration when we want to use an identifier before it has been defined. While it is true that all definitions are declarations, the converse is not true: not all declarations are definitions. An example of this is the function prototype -- it satisfies the compiler, but not the linker. These declarations that aren\u2019t definitions are called pure declarations. Other types of pure declarations include forward declarations for variables and type declarations (you will encounter these in future lessons, no need to worry about them now). The ODR doesn\u2019t apply to pure declarations (it\u2019s the one definition rule , not the one declaration rule ), so you can have as many pure declarations for an identifier as you desire (although having more than one is redundant). [!NOTE] \u4f5c\u8005\u6ce8 In common language, the term \u201cdeclaration\u201d is typically used to mean \u201ca pure declaration\u201d, and \u201cdefinition\u201d is used to mean \u201ca definition that also serves as a declaration\u201d. Thus, we\u2019d typically call int x; a definition, even though it is both a definition and a declaration.","title":"Declarations vs. definitions"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.08%20%E2%80%94%20Programs%20with%20multiple%20code%20files/","text":"","title":"2.08 \u2014 Programs with multiple code files"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.09%20%E5%90%8D%E7%A7%B0%E5%86%B2%E7%AA%81%E5%92%8C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%AE%80%E4%BB%8B/","text":"","title":"2.09 \u540d\u79f0\u51b2\u7a81\u548c\u547d\u540d\u7a7a\u95f4\u7b80\u4ecb"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.10%20%E2%80%94%20Introduction%20to%20the%20preprocessor/","text":"","title":"2.10 \u2014 Introduction to the preprocessor"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.11%20%E2%80%94%20Header%20files/","text":"","title":"2.11 \u2014 Header files"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.12%20%E2%80%94%20Header%20guards/","text":"","title":"2.12 \u2014 Header guards"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.13%20%E2%80%94%20How%20to%20design%20your%20first%20programs/","text":"","title":"2.13 \u2014 How to design your first programs"},{"location":"02_C%2B%2B%20%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%87%E4%BB%B6/2.x%20%E2%80%94%20Chapter%202%20summary%20and%20quiz/","text":"","title":"2.x \u2014 Chapter 2 summary and quiz"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.1%20%E2%80%94%20Syntax%20and%20semantic%20errors/","text":"","title":"3.1 \u2014 Syntax and semantic errors"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.10%20%E2%80%94%20Finding%20issues%20before%20they%20become%20problems/","text":"","title":"3.10 \u2014 Finding issues before they become problems"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.2%20%E2%80%94%20The%20debugging%20process/","text":"","title":"3.2 \u2014 The debugging process"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.3%20%E2%80%94%20A%20strategy%20for%20debugging/","text":"","title":"3.3 \u2014 A strategy for debugging"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.4%20%E2%80%94%20Basic%20debugging%20tactics/","text":"","title":"3.4 \u2014 Basic debugging tactics"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.5%20%E2%80%94%20More%20debugging%20tactics/","text":"","title":"3.5 \u2014 More debugging tactics"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.6%20%E2%80%94%20Using%20an%20integrated%20debugger-Stepping/","text":"","title":"3.6 \u2014 Using an integrated debugger Stepping"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.7%20%E2%80%94%20Using%20an%20integrated%20debugger-Running%20and%20breakpoints/","text":"","title":"3.7 \u2014 Using an integrated debugger Running and breakpoints"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.8%20%E2%80%94%20Using%20an%20integrated%20debugger-Watching%20variables/","text":"","title":"3.8 \u2014 Using an integrated debugger Watching variables"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.9%20%E2%80%94%20Using%20an%20integrated%20debugger-The%20call%20stack/","text":"","title":"3.9 \u2014 Using an integrated debugger The call stack"},{"location":"03_%E8%B0%83%E8%AF%95%20C%2B%2B%20%E7%A8%8B%E5%BA%8F/3.x%20%E2%80%94%20Chapter%203%20summary%20and%20quiz/","text":"","title":"3.x \u2014 Chapter 3 summary and quiz"},{"location":"99_glossary/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%28forward%20declaration%29/","text":"glossary \u524d\u5411\u58f0\u660e(forward declaration) \u76f8\u5173\u6587\u7ae0 1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u524d\u5411\u58f0\u660e(forward declaration)"},{"location":"99_glossary/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%28forward%20declaration%29/#glossary","text":"","title":"glossary"},{"location":"99_glossary/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%28forward%20declaration%29/#forward-declaration","text":"","title":"\u524d\u5411\u58f0\u660e(forward declaration)"},{"location":"99_glossary/%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E%28forward%20declaration%29/#_1","text":"1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"99_glossary/%E5%AE%9E%E5%8F%82%28arguments%29/","text":"glossary \u5b9e\u53c2(arguments) \u76f8\u5173\u6587\u7ae0 1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u5b9e\u53c2(arguments)"},{"location":"99_glossary/%E5%AE%9E%E5%8F%82%28arguments%29/#glossary","text":"","title":"glossary"},{"location":"99_glossary/%E5%AE%9E%E5%8F%82%28arguments%29/#arguments","text":"","title":"\u5b9e\u53c2(arguments)"},{"location":"99_glossary/%E5%AE%9E%E5%8F%82%28arguments%29/#_1","text":"1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"99_glossary/%E5%BD%A2%E5%8F%82%28parameters%29/","text":"glossary \u5f62\u53c2(parameters) \u76f8\u5173\u6587\u7ae0 1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u5f62\u53c2(parameters)"},{"location":"99_glossary/%E5%BD%A2%E5%8F%82%28parameters%29/#glossary","text":"","title":"glossary"},{"location":"99_glossary/%E5%BD%A2%E5%8F%82%28parameters%29/#parameters","text":"","title":"\u5f62\u53c2(parameters)"},{"location":"99_glossary/%E5%BD%A2%E5%8F%82%28parameters%29/#_1","text":"1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"99_glossary/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%28pass%20by%20value%29/","text":"glossary \u6309\u503c\u4f20\u9012(pass by value) \u76f8\u5173\u6587\u7ae0 1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u6309\u503c\u4f20\u9012(pass by value)"},{"location":"99_glossary/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%28pass%20by%20value%29/#glossary","text":"","title":"glossary"},{"location":"99_glossary/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%28pass%20by%20value%29/#pass-by-value","text":"","title":"\u6309\u503c\u4f20\u9012(pass by value)"},{"location":"99_glossary/%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%28pass%20by%20value%29/#_1","text":"1 2 3 4 5 6 dv.table([\"Title\"],dv.current().file.inlinks .map(b=>{ var page = dv.page(b) return [page.file.link] }) )","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"99_glossary/%E8%AF%8D%E6%B1%87%E8%A1%A8/","text":"","title":"\u8bcd\u6c47\u8868"}]}